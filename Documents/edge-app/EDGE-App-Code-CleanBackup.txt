

--- FILE: .env ---

REACT_APP_SUPABASE_URL=https://raignjcmquxwgjleiwjb.supabase.co
REACT_APP_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InJhaWduamNtcXV4d2dqbGVpd2piIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTMzMDE1NjcsImV4cCI6MjA2ODg3NzU2N30.Zi9m0WdP15mjvaH7GuQjigAmG70iCxuuvbQx8oIF4fA


--- FILE: EDGE-App-Supabase-Backup.sql ---

--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP POLICY IF EXISTS review_cycles_manager_read ON public.review_cycles;
DROP POLICY IF EXISTS review_cycles_admin_access ON public.review_cycles;
DROP POLICY IF EXISTS employees_see_manager ON public.employees;
DROP POLICY IF EXISTS employees_own_update ON public.employees;
DROP POLICY IF EXISTS employees_own_record ON public.employees;
DROP POLICY IF EXISTS employees_manager_team ON public.employees;
DROP POLICY IF EXISTS employees_admin_all_access ON public.employees;
DROP POLICY IF EXISTS assessments_manager_team ON public.assessments;
DROP POLICY IF EXISTS assessments_employee_own ON public.assessments;
DROP POLICY IF EXISTS assessments_admin_access ON public.assessments;
DROP POLICY IF EXISTS assessment_scorecard_metrics_all_policy ON public.assessment_scorecard_metrics;
DROP POLICY IF EXISTS assessment_scorecard_metrics_access ON public.assessment_scorecard_metrics;
DROP POLICY IF EXISTS assessment_rocks_all_policy ON public.assessment_rocks;
DROP POLICY IF EXISTS assessment_rocks_access ON public.assessment_rocks;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_manager_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_review_cycle_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_scorecard_metrics DROP CONSTRAINT IF EXISTS assessment_scorecard_metrics_assessment_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_rocks DROP CONSTRAINT IF EXISTS assessment_rocks_assessment_id_fkey;
ALTER TABLE IF EXISTS ONLY public.review_cycles DROP CONSTRAINT IF EXISTS review_cycles_pkey;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_user_id_key;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_pkey;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_email_key;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_pkey;
ALTER TABLE IF EXISTS ONLY public.assessment_scorecard_metrics DROP CONSTRAINT IF EXISTS assessment_scorecard_metrics_pkey;
ALTER TABLE IF EXISTS ONLY public.assessment_rocks DROP CONSTRAINT IF EXISTS assessment_rocks_pkey;
DROP TABLE IF EXISTS public.review_cycles;
DROP TABLE IF EXISTS public.employees;
DROP TABLE IF EXISTS public.assessments;
DROP TABLE IF EXISTS public.assessment_scorecard_metrics;
DROP TABLE IF EXISTS public.assessment_rocks;
DROP FUNCTION IF EXISTS public.start_review_cycle_for_my_team(cycle_id_to_start bigint);
DROP FUNCTION IF EXISTS public.link_current_user_to_employee();
DROP FUNCTION IF EXISTS public.get_team_status();
DROP FUNCTION IF EXISTS public.get_my_role();
DROP FUNCTION IF EXISTS public.get_my_name();
DROP FUNCTION IF EXISTS public.get_assessment_details(p_assessment_id bigint);
DROP FUNCTION IF EXISTS public.get_all_employees();
DROP FUNCTION IF EXISTS public.debug_auth_uid();
DROP FUNCTION IF EXISTS public.create_simple_review_cycle(p_name text, p_start_date date, p_end_date date);
DROP FUNCTION IF EXISTS public.activate_review_cycle(p_cycle_id bigint);
DROP SCHEMA IF EXISTS public;
--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA public;


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA public IS 'standard public schema';


--
-- Name: activate_review_cycle(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.activate_review_cycle(p_cycle_id bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- Only admins can activate cycles
  IF (SELECT get_my_role()) != 'admin' THEN
    RETURN json_build_object('error', 'Only admins can activate review cycles');
  END IF;
  
  UPDATE review_cycles 
  SET status = 'active' 
  WHERE id = p_cycle_id AND status = 'upcoming';
  
  IF NOT FOUND THEN
    RETURN json_build_object('error', 'Cycle not found or already active');
  END IF;
  
  RETURN json_build_object('success', true, 'message', 'Cycle activated successfully');
END;
$$;


--
-- Name: create_simple_review_cycle(text, date, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_simple_review_cycle(p_name text, p_start_date date, p_end_date date) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  new_cycle_id BIGINT;
BEGIN
  -- Only admins can create cycles
  IF (SELECT get_my_role()) != 'admin' THEN
    RETURN json_build_object('error', 'Only admins can create review cycles');
  END IF;
  
  INSERT INTO review_cycles (name, start_date, end_date, status)
  VALUES (p_name, p_start_date, p_end_date, 'upcoming')
  RETURNING id INTO new_cycle_id;
  
  RETURN json_build_object(
    'success', true,
    'cycle_id', new_cycle_id,
    'message', 'Review cycle created successfully'
  );
END;
$$;


--
-- Name: debug_auth_uid(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.debug_auth_uid() RETURNS TABLE(current_uid uuid, current_email text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT auth.uid() as current_uid, auth.email() as current_email;
$$;


--
-- Name: get_all_employees(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_employees() RETURNS TABLE(id uuid, name text, email text, job_title text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT e.id, e.name, e.email, e.job_title
  FROM employees e
  WHERE e.is_active = true
  ORDER BY e.name;
$$;


--
-- Name: get_assessment_details(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_assessment_details(p_assessment_id bigint) RETURNS TABLE(assessment_id bigint, employee_name text, review_cycle_name text, employee_strengths text, employee_improvements text, gwc_gets_it boolean, gwc_gets_it_feedback text, gwc_wants_it boolean, gwc_wants_it_feedback text, gwc_capacity boolean, gwc_capacity_feedback text, manager_summary_comments text, manager_development_plan text, rocks json[])
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT
    a.id,
    e.name,
    rc.name,
    a.employee_strengths,
    a.employee_improvements,
    a.gwc_gets_it,
    a.gwc_gets_it_feedback,
    a.gwc_wants_it,
    a.gwc_wants_it_feedback,
    a.gwc_capacity,
    a.gwc_capacity_feedback,
    a.manager_summary_comments,
    a.manager_development_plan,
    ARRAY(
      SELECT json_build_object('id', ar.id, 'description', ar.description, 'status', ar.status, 'feedback', ar.feedback)
      FROM assessment_rocks ar WHERE ar.assessment_id = a.id
    )
  FROM assessments a
  JOIN employees e  ON e.id  = a.employee_id
  JOIN review_cycles rc ON rc.id = a.review_cycle_id
  WHERE a.id = p_assessment_id
    AND e.manager_id = (SELECT id FROM employees WHERE user_id = auth.uid());
$$;


--
-- Name: get_my_name(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_name() RETURNS text
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT 
    CASE 
      WHEN auth.email() = 'admin@lucerne.com' THEN 'Admin'
      WHEN auth.email() = 'manager@lucerne.com' THEN 'Manager'
      WHEN auth.email() = 'employee1@lucerne.com' THEN 'Employee 1'
      -- For others, try to get from database with explicit query (no RLS issues with SECURITY DEFINER)
      ELSE COALESCE(
        (SELECT name FROM employees WHERE user_id = auth.uid() LIMIT 1),
        split_part(auth.email(), '@', 1)
      )
    END;
$$;


--
-- Name: get_my_role(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_role() RETURNS text
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT 
    CASE 
      -- Direct email-based admin check (no table queries)
      WHEN auth.email() = 'admin@lucerne.com' THEN 'admin'
      WHEN auth.email() LIKE '%admin%' THEN 'admin'
      -- For now, determine manager vs employee based on email patterns
      -- We'll make this smarter once we're stable
      WHEN auth.email() = 'manager@lucerne.com' THEN 'manager'
      WHEN auth.email() LIKE '%manager%' THEN 'manager'
      -- Default to employee for everyone else
      ELSE 'employee'
    END;
$$;


--
-- Name: get_team_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_team_status() RETURNS TABLE(employee_id uuid, employee_name text, job_title text, assessment_id bigint, assessment_status text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  WITH latest_cycle AS (
    SELECT id FROM public.review_cycles WHERE status = 'active' ORDER BY start_date DESC LIMIT 1
  )
  SELECT
    e.id,
    e.name,
    e.job_title,
    a.id,
    a.status
  FROM employees e
  LEFT JOIN assessments a ON e.id = a.employee_id AND a.review_cycle_id = (SELECT id FROM latest_cycle)
  WHERE e.manager_id = (SELECT id FROM employees WHERE user_id = auth.uid());
$$;


--
-- Name: link_current_user_to_employee(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.link_current_user_to_employee() RETURNS text
    LANGUAGE sql SECURITY DEFINER
    AS $$
  UPDATE employees 
  SET user_id = auth.uid()
  WHERE email = auth.email() AND user_id IS NULL;
  
  SELECT 'User linked successfully' as result;
$$;


--
-- Name: start_review_cycle_for_my_team(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.start_review_cycle_for_my_team(cycle_id_to_start bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  manager_employee_id UUID;
  cycle_exists BOOLEAN;
  assessments_created INTEGER := 0;
BEGIN
  -- Get the manager's employee ID
  SELECT id INTO manager_employee_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF manager_employee_id IS NULL THEN
    RETURN json_build_object('error', 'Manager not found');
  END IF;
  
  -- Check if cycle exists and is active
  SELECT EXISTS(
    SELECT 1 FROM review_cycles 
    WHERE id = cycle_id_to_start AND status = 'active'
  ) INTO cycle_exists;
  
  IF NOT cycle_exists THEN
    RETURN json_build_object('error', 'Review cycle not found or not active');
  END IF;
  
  -- Create assessments for all direct reports
  INSERT INTO assessments (employee_id, review_cycle_id, status)
  SELECT e.id, cycle_id_to_start, 'not_started'
  FROM employees e
  WHERE e.manager_id = manager_employee_id 
    AND e.is_active = true
    AND NOT EXISTS (
      SELECT 1 FROM assessments a 
      WHERE a.employee_id = e.id AND a.review_cycle_id = cycle_id_to_start
    );
  
  GET DIAGNOSTICS assessments_created = ROW_COUNT;
  
  RETURN json_build_object(
    'success', true,
    'message', 'Review cycle started successfully',
    'assessments_created', assessments_created
  );
END;
$$;


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: assessment_rocks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessment_rocks (
    id bigint NOT NULL,
    assessment_id bigint NOT NULL,
    description text NOT NULL,
    status text NOT NULL,
    feedback text
);


--
-- Name: assessment_rocks_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessment_rocks ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessment_rocks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: assessment_scorecard_metrics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessment_scorecard_metrics (
    id bigint NOT NULL,
    assessment_id bigint NOT NULL,
    metric_name text NOT NULL,
    target text,
    actual text,
    status text
);


--
-- Name: assessment_scorecard_metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessment_scorecard_metrics ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessment_scorecard_metrics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: assessments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessments (
    id bigint NOT NULL,
    employee_id uuid NOT NULL,
    review_cycle_id bigint NOT NULL,
    status text DEFAULT 'not_started'::text NOT NULL,
    value_passionate_rating smallint,
    value_passionate_examples text,
    value_driven_rating smallint,
    value_driven_examples text,
    value_resilient_rating smallint,
    value_resilient_examples text,
    value_responsive_rating smallint,
    value_responsive_examples text,
    gwc_gets_it boolean,
    gwc_gets_it_feedback text,
    gwc_wants_it boolean,
    gwc_wants_it_feedback text,
    gwc_capacity boolean,
    gwc_capacity_feedback text,
    employee_strengths text,
    employee_improvements text,
    manager_summary_comments text,
    manager_development_plan text,
    submitted_by_employee_at timestamp with time zone,
    finalized_by_manager_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: assessments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessments ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: employees; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.employees (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    name text NOT NULL,
    email text NOT NULL,
    job_title text,
    manager_id uuid,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: review_cycles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.review_cycles (
    id bigint NOT NULL,
    name text NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status text DEFAULT 'upcoming'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: review_cycles_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.review_cycles ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.review_cycles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Data for Name: assessment_rocks; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessment_rocks (id, assessment_id, description, status, feedback) FROM stdin;
\.


--
-- Data for Name: assessment_scorecard_metrics; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessment_scorecard_metrics (id, assessment_id, metric_name, target, actual, status) FROM stdin;
\.


--
-- Data for Name: assessments; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessments (id, employee_id, review_cycle_id, status, value_passionate_rating, value_passionate_examples, value_driven_rating, value_driven_examples, value_resilient_rating, value_resilient_examples, value_responsive_rating, value_responsive_examples, gwc_gets_it, gwc_gets_it_feedback, gwc_wants_it, gwc_wants_it_feedback, gwc_capacity, gwc_capacity_feedback, employee_strengths, employee_improvements, manager_summary_comments, manager_development_plan, submitted_by_employee_at, finalized_by_manager_at, created_at) FROM stdin;
\.


--
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.employees (id, user_id, name, email, job_title, manager_id, is_active, created_at) FROM stdin;
e956be35-33d7-4870-97b3-63eaae4a690d	15dd4da0-2c94-452c-9213-5598a9e6c548	Employee 1	employee1@lucerne.com	\N	3cdb0da7-4808-4a1f-8e10-02208cfa0c33	t	2025-07-23 20:33:55.130244+00
3cdb0da7-4808-4a1f-8e10-02208cfa0c33	3c22d17f-efac-4b8f-9d6f-59af18f92331	Manager	manager@lucerne.com	\N	\N	t	2025-07-23 20:32:54.398754+00
270a21d0-bd05-4a7a-93bb-6abefa1e61a7	cd31bc16-c8c0-4a99-a35a-872928d5f763	Admin	admin@lucerne.com	Admin	\N	t	2025-07-24 03:15:54.139185+00
10d1c13c-ea48-45c1-8420-a616f0c314ec	\N	Test Employee	test@lucerne.com	Developer	270a21d0-bd05-4a7a-93bb-6abefa1e61a7	t	2025-07-24 03:41:52.798721+00
3542443c-6cd4-48ba-af2f-0bd3b4243c37	\N	John Doe	john@lucerne.com	Developer	\N	t	2025-07-24 03:47:07.323624+00
da01f7e9-e2f6-43b2-b350-affc7c661751	\N	Jane Smith	jane@lucerne.com	Designer	\N	t	2025-07-24 03:47:07.323624+00
\.


--
-- Data for Name: review_cycles; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.review_cycles (id, name, start_date, end_date, status, created_at) FROM stdin;
\.


--
-- Name: assessment_rocks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessment_rocks_id_seq', 1, false);


--
-- Name: assessment_scorecard_metrics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessment_scorecard_metrics_id_seq', 1, false);


--
-- Name: assessments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessments_id_seq', 1, false);


--
-- Name: review_cycles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.review_cycles_id_seq', 1, false);


--
-- Name: assessment_rocks assessment_rocks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_rocks
    ADD CONSTRAINT assessment_rocks_pkey PRIMARY KEY (id);


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_scorecard_metrics
    ADD CONSTRAINT assessment_scorecard_metrics_pkey PRIMARY KEY (id);


--
-- Name: assessments assessments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_pkey PRIMARY KEY (id);


--
-- Name: employees employees_email_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_email_key UNIQUE (email);


--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- Name: employees employees_user_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_user_id_key UNIQUE (user_id);


--
-- Name: review_cycles review_cycles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_cycles
    ADD CONSTRAINT review_cycles_pkey PRIMARY KEY (id);


--
-- Name: assessment_rocks assessment_rocks_assessment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_rocks
    ADD CONSTRAINT assessment_rocks_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES public.assessments(id);


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_assessment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_scorecard_metrics
    ADD CONSTRAINT assessment_scorecard_metrics_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES public.assessments(id);


--
-- Name: assessments assessments_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- Name: assessments assessments_review_cycle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_review_cycle_id_fkey FOREIGN KEY (review_cycle_id) REFERENCES public.review_cycles(id);


--
-- Name: employees employees_manager_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.employees(id);


--
-- Name: assessment_rocks; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.assessment_rocks ENABLE ROW LEVEL SECURITY;

--
-- Name: assessment_rocks assessment_rocks_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_rocks_access ON public.assessment_rocks TO authenticated USING ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid()))))))))) WITH CHECK ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())))))))));


--
-- Name: assessment_rocks assessment_rocks_all_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_rocks_all_policy ON public.assessment_rocks USING ((assessment_id IN ( SELECT assessments.id
   FROM public.assessments
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (assessments.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid())
         LIMIT 1)) OR (assessments.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())
                 LIMIT 1))))))));


--
-- Name: assessment_scorecard_metrics; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.assessment_scorecard_metrics ENABLE ROW LEVEL SECURITY;

--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_scorecard_metrics_access ON public.assessment_scorecard_metrics TO authenticated USING ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid()))))))))) WITH CHECK ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())))))))));


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_all_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_scorecard_metrics_all_policy ON public.assessment_scorecard_metrics USING ((assessment_id IN ( SELECT assessments.id
   FROM public.assessments
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (assessments.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid())
         LIMIT 1)) OR (assessments.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())
                 LIMIT 1))))))));


--
-- Name: assessments; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.assessments ENABLE ROW LEVEL SECURITY;

--
-- Name: assessments assessments_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_admin_access ON public.assessments TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: assessments assessments_employee_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_employee_own ON public.assessments TO authenticated USING ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid())))) WITH CHECK ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))));


--
-- Name: assessments assessments_manager_team; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_manager_team ON public.assessments TO authenticated USING ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.manager_id IN ( SELECT employees_1.id
           FROM public.employees employees_1
          WHERE (employees_1.user_id = auth.uid())))))) WITH CHECK ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.manager_id IN ( SELECT employees_1.id
           FROM public.employees employees_1
          WHERE (employees_1.user_id = auth.uid()))))));


--
-- Name: employees; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;

--
-- Name: employees employees_admin_all_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_admin_all_access ON public.employees TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: employees employees_manager_team; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_manager_team ON public.employees FOR SELECT TO authenticated USING ((manager_id IN ( SELECT employees_1.id
   FROM public.employees employees_1
  WHERE (employees_1.user_id = auth.uid()))));


--
-- Name: employees employees_own_record; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_own_record ON public.employees FOR SELECT TO authenticated USING ((user_id = auth.uid()));


--
-- Name: employees employees_own_update; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_own_update ON public.employees FOR UPDATE TO authenticated USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));


--
-- Name: employees employees_see_manager; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_see_manager ON public.employees FOR SELECT TO authenticated USING ((id IN ( SELECT employees_1.manager_id
   FROM public.employees employees_1
  WHERE ((employees_1.user_id = auth.uid()) AND (employees_1.manager_id IS NOT NULL)))));


--
-- Name: review_cycles; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.review_cycles ENABLE ROW LEVEL SECURITY;

--
-- Name: review_cycles review_cycles_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_admin_access ON public.review_cycles TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: review_cycles review_cycles_manager_read; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_manager_read ON public.review_cycles FOR SELECT TO authenticated USING (((status = ANY (ARRAY['active'::text, 'upcoming'::text])) AND (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.id IN ( SELECT DISTINCT employees_1.manager_id
           FROM public.employees employees_1
          WHERE (employees_1.manager_id IS NOT NULL))))))));


--
-- PostgreSQL database dump complete
--




--- FILE: package.json ---

{
  "name": "edge-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@supabase/auth-ui-react": "^0.4.6",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/supabase-js": "^2.39.0",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1",
    "tailwindcss": "^3.3.5"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}



--- FILE: README.md ---

# Getting Started with Create React App

This project was bootstrapped with [Create React App](https://github.com/facebook/create-react-app).

## Available Scripts

In the project directory, you can run:

### `npm start`

Runs the app in the development mode.\
Open [http://localhost:3000](http://localhost:3000) to view it in your browser.

The page will reload when you make changes.\
You may also see any lint errors in the console.

### `npm test`

Launches the test runner in the interactive watch mode.\
See the section about [running tests](https://facebook.github.io/create-react-app/docs/running-tests) for more information.

### `npm run build`

Builds the app for production to the `build` folder.\
It correctly bundles React in production mode and optimizes the build for the best performance.

The build is minified and the filenames include the hashes.\
Your app is ready to be deployed!

See the section about [deployment](https://facebook.github.io/create-react-app/docs/deployment) for more information.

### `npm run eject`

**Note: this is a one-way operation. Once you `eject`, you can't go back!**

If you aren't satisfied with the build tool and configuration choices, you can `eject` at any time. This command will remove the single build dependency from your project.

Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except `eject` will still work, but they will point to the copied scripts so you can tweak them. At this point you're on your own.

You don't have to ever use `eject`. The curated feature set is suitable for small and middle deployments, and you shouldn't feel obligated to use this feature. However we understand that this tool wouldn't be useful if you couldn't customize it when you are ready for it.

## Learn More

You can learn more in the [Create React App documentation](https://facebook.github.io/create-react-app/docs/getting-started).

To learn React, check out the [React documentation](https://reactjs.org/).

### Code Splitting

This section has moved here: [https://facebook.github.io/create-react-app/docs/code-splitting](https://facebook.github.io/create-react-app/docs/code-splitting)

### Analyzing the Bundle Size

This section has moved here: [https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size](https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size)

### Making a Progressive Web App

This section has moved here: [https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app](https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app)

### Advanced Configuration

This section has moved here: [https://facebook.github.io/create-react-app/docs/advanced-configuration](https://facebook.github.io/create-react-app/docs/advanced-configuration)

### Deployment

This section has moved here: [https://facebook.github.io/create-react-app/docs/deployment](https://facebook.github.io/create-react-app/docs/deployment)

### `npm run build` fails to minify

This section has moved here: [https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify](https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify)



--- FILE: public\favicon.ico ---

         ã  F          )         9  5  @@     °  n  ‰PNG

   IHDR         (-S   äPLTE""""""""""""""""""2PX=r€)7;*:>H¤-BGEˆš8do5Xb6[eK™®Kš¯1MU9gs3S\I“§:gt'03@{‹V¹ÔT´ÏA}V»Ö@y‰6\fH’¦-CII”¨Eˆ›+;@7_i7_jFŠJ–«K›°H£-BHaÚû,@FCƒ”L³&.0W½ÙN£ºI“¨$)+B‘J•ªR¯È?v†>s>u„S±Ê=qP©ÁP¨ÀP§¿,?D4U^%+-M ¶K˜®%+,2OX+<ALœ²#&&D†˜%,.I•©vôTö   tRNSIæçJäeÀe¦   ©IDATxMŽµZEA„ÿÙ³	îî%R¡ïßáTThÇG…»,Á®Å=²Òîmífímnf’A–$â‡>!¦gºôHg½EßÜµ}	Ý»ý‡º¼kdú§¯Jo—™Î3æL"J¹ ›ÌÕüQ‡$âçÄ¼ffµ,é€5i9ÌŸ¯H¨/mB†‡wÍÜw;DØ+&‚W«ª¹¨Dôo@Ê´RI©ÐB¡om.Û³À    IEND®B`‚‰PNG

   IHDR         ×©ÍÊ  ePLTE""""""""""""""""""""""""2RZN¢¹J–«3R[J—¬)59YÁÞ0KS4W`Q«ÄLœ²%+-0JR)6::gtC‚“"##?v†U·Ñ?w†<n{&-/YÂß=q:iuBA}A{ŒB‘/IPP§¿=q€K™®_ÔóL³$();lzR¯ÉaÚûI“¨ZÆã3U^1MU3T]ZÅâI“§X¿ÜF‹ž-BGP¨À6[e,@E5ZdO§¿-BHX¿Û+=AW¾Ú,@FW¼ØQªÃ?v…W¼×+<A@yˆ"#$\Ìê4Wa\ÌëS²Ì$(*.EL^ÑñVºÕ6]h#$%GŽ¡#&';jwV¹Ô-CIL›±ZÄá^Ðï>u„S°Ê/HNM ·_Õõ\ËéM ¶8doD…—D†˜>tƒ+=B[Èæ,>C>t‚<o}@y‰0LS.EKT´Î$'(%,.A~ŽW½ÙC’%+,\ÊèC!ä   tRNS‘íîˆ‰œG¾Ö  OIDATxl‰ÃB¶Q…Ÿu´ß_È³<Ë¦Ýveê²óa6AÎ¾Œûv¢{@Î E' Þd IÕ!çží  ðC—ÔT‹þg  1ÂE(ÏñSQsâiÄ…Zÿ·V¹ Ð)ég!‰ªhÎùtéº-i}˜µµ<Õ?¶lBZaÄ´4{DÓâŒ»_e8¥yÇ­À3ž)Ÿ¥?°f;8.ã¤tÌ=å;	:ã52fKZìlù¨ØšÍ9.ž#ƒÒAÁqÌúÛ®£Vÿ`=$¬Â?_¶¾®ÔqMç.ïJ$
?^q÷ñíÛï.},‚ìsæÝ_TttÔ¾ 1#‰/(ì—-[è`è`ÌÚïÅðZd5’Ž™›?ÎebZ¿Þˆi.Ûæ™ìqÎ„+1°}ÂŒ5ù  ïçd¨G•Ïø    IEND®B`‚‰PNG

   IHDR           D¤ŠÆ  APLTE   """""""""""""""""""""""""""2RZVºÖ_ÔôU·Ñ=r€$()'25]ÎíCƒ•0LS<o}XÀÜX¿Û0JQ=p~D„–<n{VºÕE‡™8do_ÔóEˆšF‹žH‘¥9dp_ÕõH¤I“¨FŒŸ6[e`Ö÷`×øL³/GM_ÓòU¸Ó'02P©Á/IPPªÂX¿Ü&/1;ly3R[`ØøGŽ¡T³Í\ÌêaÚû1OW"##Q«ÄaÙúR®Ç=q€`Öö.EL+=ATµÐ-CIK˜®#&'C‚“^ÐïI”¨&.04U^^Ñð@yˆZÇä$(*[Éç^Ññ,?DR¯É"#$1NV1MTD…—>u„;kxG R¯È/HN&-/@y‰>s>t‚@zŠ]ÍìP¨À$'(D†—]Ïî<n|0JRU·Ò×\¼   	tRNS %­ñ'ïó(ò~ÑÝè  žIDATx“šC1F_Ý¿MmÛ¶4¶m{ÿ˜¤n†çáÓ	®A$–à$b‘ Heø™TãWÄÂh•šh´:PtZQ«0@.`€Þ`4™-V`³Zì&‡A#ÁébkÝÄãñúØ>.''ø`C$FØÏ	‘(±x"6Xác”TÚéL§@Iù;d d-¹|¾P,È”9¡R­ÕÍf3¢¿F½VmMíX§ÚíÍç@Y˜7ÎõºÕN¬=—ŽåÈÊªu}Ö¬«+‘e‡aiq ¤Ö76­íÝ=hûZìíîl›ë‡}á¨Ê±¥[F«I9A¹k9¥ÖëäŒ3¢Ã9Î¡óžqB~Øáb¸ÃåU_¸^Ü [·ôw†ý{z‡v‡z‡Ù(Š£(Š£(þ›†Šfòq”ÉG–Éïkñ”ÏçŠY¾ÿªfäòÇ~à:*4ÓQ\O>Ÿ‘ ‡¼<×“úW£éÍZ|Þ‹Å7“ñ•ïjTÔäãn”½»¢®`$Hð+ò¿GOñûð*èx‹•ø¥X*|”^ÿd    IEND®B`‚‰PNG

   IHDR   @   @   ·ì  :PLTE   """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""%+-@y‰W¼×`×ø^ÑñS²ÌC‚“,>C*8<XÁÝaÚûaÙùMŸµ+<AaÙúXÀÜ#%%TµÐLž´=q>u„K›°`ÖöA}L›±8do=r€%+,@yˆ^ÐïS²Ë)59=q€P©ÁU·Ò"#$PªÂ\Êè0JQQªÃ"##U·Ñ#&&_Ôô>t‚>s`Øø_Ôó5Yc1OW5Zd1NV+=B1MU+;@/GM\Ìê*;?3S\)8<2RZ_Õõ+=A]Ïî,@F,@E&-/0KS7alO¦¾9dp8amB~EˆšP¨ÀN¢¹'023T]]Îí?x‡3U^Cƒ•6\gU¸Ó&.0D„–7_iR­ÆH‘¥I”¨M ¶$(*?v…ZÆãX¿Ü-AG#$%[Éç8co[ÈæW½ÙC’'25?v†8bn%*+Lœ²N£º2PX)7;=p~(58^ÒòP§¿4WaQ«ÄT´Ï0JRQ¬ÅT´ÎI“¨6]hR¯ÉT³Í0LSF‹9eqEˆ›E‰œ9gsFŠCƒ”#&'\Ëé`Ö÷&/16\fB‘A{ŒR®Ç]Íì(47%,.*:>*9=9fr:gt7^iU¶Ð?w†ZÇäX¿Û^ÑðQ­ÅH£)6:V¹Ô'034U^E‡™.EL.FMK™®@zŠS×   tRNS *Ž×øÖ”ý˜	»½•+üùóÔ,ØúôÀ=V  IDATx¤ËµC! ÐïŠ–‡C|ÿãÚ^yR]ÕMÛáO]ßÔÕÝ0NÈ2ÍËí¿"ªª¢(0Vã(ÀY%PDT-~(m¬ó!âKÞY£~´•üIÒf{³ÛÞáa¼§§ô3—ÕOp&”Ð¤‰¡ xŽ÷#Ÿj­ôÚ¶mméòc)]m¤’‡É)Æ§gfçhk²ñÎÒ ægg¦Ç™šìÐ+X€ÅêuiyV×ª·k«°²\[ü:,Ø6ØÜjÄ²;»"»;°×XùþÛfÁáÇÍûý“SÎÎÏÏ8=Þo¾;æèÐ(ƒ‹öÓ¥BkÔeûÍ\7p+mîîáþNÚ<ÀQðOÒæùô³´y‚g»ttÐëo•ý½£ŸìVð»Òäsýü¬™ø”&_ðaüïV~à·Ö?­*8àQ ;8¥Á,¸¤‚f¥“1Üx¤†×§ñŸ*œøÑA¯Ôð°a#±³¶¦#ŠnP‘i+¼¶CÈ,ˆÆèäÍ_áNbÑá‚Ã¸ç •HŽB*ÚÒ¦ L( ^<ñÃ‚L6pJ¾P”É¥Ž©¢%"“R,ä9Èe3eRËa1(
¢ßqÇ8ÙŽ´ŠmKË±mÆ¶mÛü·yi!èÎªYÏuë ÀÏ_Àï?i÷ˆý+òŠÄA|ù{‘˜´?¿_En).JËD¤<€
©¬¢Z\Ts©R*(	¯©JŠ…uX/4J9š¡5·DEµ4kÇ4‡&i¥V4Ú¡®Ð¯†vsf:àg,¢èBC»î$¶ºÍùî‡á–@ôŠI_?<‘!^ŠÈàÓ½ÇöäõB‘%Làw±FD1ŠÁ¨(F€±øH˜%0Æ±¿ÅØ„(¢0ˆÅÄ'Åæ—N.0u„@íY‡PWìIüaNâKš™Ä?ðÓµŒ=Žeœv/c—±ŒÓ0c0÷2Êë:ˆ06R-uÒÄ­\QÌ¶ää´¼µ6R#ÆFš³6Òñ·rÕ­ìu˜æmâðÂž‡Iñi~ –Åü ÃsPþ"± óŸ¼eiyå£ËPšàãÊò’§¡œÝÒ,S]U¦ºV…ªÖ”©®Z¦êoëë·xzã™âÆSnm¬{ÚºwaÙ„Ï…Å»´Ýõ(mg/®þå½À¿¼ûŒ[§b³µq¶Å&Õ¯¹$ñzÈŠ‹H>aÌKT1/æø1O‚‰0¾.hÍ‡YþAÓö£
-ê>Û‹º«¢XÕ¢î}ß¨ëÛÑ;ÃöN´ØvÅýÎ¸ÿ1 ë×ÄO@&v/Äþ_—ö\ôÇ\í.™½+0”;!fÊ¦´Ó%Â JY·O”ÂŽ'/Å]_Š;ßÀ'"&Nªn	aQ^ ”cx¦AáÒ    IEND®B`‚


--- FILE: public\index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="EDGE - Employee Development & Growth Engine" />
    <script src="https://cdn.tailwindcss.com"></script>
    <title>EDGE | Lucerne International</title>
  </head>
  <body class="bg-gray-900 text-white">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


--- FILE: public\manifest.json ---

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



--- FILE: public\robots.txt ---

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



--- FILE: src\App.js ---

// src/App.js - Debug version to clear any cached errors
// Replace your App.js temporarily with this version

import React, { useState, useEffect } from 'react';
import { createClient } from '@supabase/supabase-js';
import { Auth } from '@supabase/auth-ui-react';
import { ThemeSupa } from '@supabase/auth-ui-shared';

import Sidebar from './components/shared/Sidebar';
import Dashboard from './components/pages/Dashboard';
import MyTeam from './components/pages/MyTeam';
import MyReviews from './components/pages/MyReviews';
import Settings from './components/pages/Settings';
import Assessment from './components/pages/Assessment';
import Admin from './components/pages/Admin';
import StartReviewCycleModal from './components/modals/StartReviewCycleModal';
import Modal from './components/modals/Modal';

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;
const supabase = createClient(supabaseUrl, supabaseAnonKey);

const PageRenderer = ({ page, setActivePage, openModal, userRole }) => {
  switch (page.name) {
    case 'Dashboard':
      return <Dashboard supabase={supabase} />;
    case 'My Team':
      return <MyTeam supabase={supabase} openModal={openModal} setActivePage={setActivePage} />;
    case 'My Reviews':
      return <MyReviews supabase={supabase} />;
    case 'Settings':
      return <Settings supabase={supabase} />;
    case 'Assessment':
      return <Assessment supabase={supabase} pageProps={page.props} setActivePage={setActivePage} />;
    case 'Admin':
      return <Admin supabase={supabase} />;
    default:
      return null;
  }
};

export default function App() {
  const [user, setUser] = useState(null);
  const [userRole, setUserRole] = useState(null);
  const [userName, setUserName] = useState('');
  const [userDataLoading, setUserDataLoading] = useState(true);
  const [activePage, setActivePage] = useState({ name: 'Dashboard' });
  const [modal, setModal] = useState({ isOpen: false, name: null, props: {} });
  const [debugInfo, setDebugInfo] = useState('');

  // Fetch user role and name after authentication - SIMPLIFIED VERSION
  const fetchUserData = async () => {
    if (!user) {
      setUserDataLoading(false);
      return;
    }

    try {
      console.log('ðŸ”„ Fetching user data for:', user.email);
      setDebugInfo(`Fetching data for: ${user.email}`);
      
      // SIMPLIFIED: Just use email to determine role for now
      let role = 'employee';
      let name = user.email.split('@')[0];
      
      if (user.email === 'admin@lucerne.com') {
        role = 'admin';
        name = 'Admin';
      } else if (user.email === 'manager@lucerne.com') {
        role = 'manager'; 
        name = 'Manager';
      } else if (user.email === 'employee1@lucerne.com') {
        role = 'employee';
        name = 'Employee 1';
      }

      console.log('âœ… Using simplified role assignment:', { role, name });
      setDebugInfo(`âœ… Role: ${role}, Name: ${name}`);
      
      setUserRole(role);
      setUserName(name);

    } catch (error) {
      console.error('ðŸ’¥ Error in fetchUserData:', error);
      setDebugInfo(`âŒ Error: ${error.message}`);
      // Set defaults if there's an error
      setUserRole('employee');
      setUserName(user.email.split('@')[0]);
    } finally {
      setUserDataLoading(false);
    }
  };

  useEffect(() => {
    // Simple auth setup
    supabase.auth.getSession().then(({ data: { session } }) => {
      setUser(session?.user ?? null);
    });

    const { data: { subscription } } = supabase.auth.onAuthStateChange((event, session) => {
      console.log('ðŸ” Auth state changed:', event, session?.user?.email);
      setUser(session?.user ?? null);
      
      // Reset user data when auth changes
      if (!session?.user) {
        setUserRole(null);
        setUserName('');
        setUserDataLoading(false);
        setDebugInfo('');
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  // Fetch user data when user changes
  useEffect(() => {
    if (user) {
      setUserDataLoading(true);
      fetchUserData();
    }
  }, [user]);

  const openModal = (name, props = {}) => setModal({ isOpen: true, name, props });
  const closeModal = () => setModal({ isOpen: false, name: null, props: {} });

  const handleSignOut = async () => {
    try {
      await supabase.auth.signOut();
      // Reset all user-related state
      setUserRole(null);
      setUserName('');
      setActivePage({ name: 'Dashboard' });
      setDebugInfo('');
    } catch (error) {
      console.error('Error signing out:', error);
    }
  };

  // Show loading screen while checking authentication
  if (userDataLoading && user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-cyan-400 mb-4">EDGE</h1>
          <p className="text-gray-400">Loading your profile...</p>
          <div className="mt-4 w-8 h-8 border-2 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto"></div>
          {debugInfo && (
            <div className="mt-4 text-xs text-gray-500 max-w-md">
              Debug: {debugInfo}
            </div>
          )}
        </div>
      </div>
    );
  }

  // Show login screen if not authenticated
  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="w-full max-w-sm">
          <div className="text-center mb-6">
            <h1 className="text-3xl font-bold text-cyan-400">EDGE</h1>
            <p className="text-gray-400 text-sm">Employee Development & Growth Engine</p>
            <p className="text-xs text-gray-500 mt-2">DEBUG VERSION - Simplified Auth</p>
          </div>
          <div className="bg-gray-800 p-6 rounded-lg">
            <Auth
              supabaseClient={supabase}
              appearance={{ 
                theme: ThemeSupa,
                style: {
                  button: { 
                    background: '#0891b2', 
                    color: 'white',
                    borderRadius: '0.5rem'
                  },
                  anchor: { color: '#67e8f9' },
                  input: { 
                    background: '#374151',
                    border: '1px solid #4b5563',
                    borderRadius: '0.5rem',
                    color: 'white'
                  }
                }
              }}
              providers={[]}
              view="sign_in"
            />
            
            {/* Test Users Helper */}
            <div className="mt-6 p-4 bg-gray-700 rounded-lg">
              <p className="text-xs text-gray-400 mb-2">Test Users:</p>
              <div className="text-xs text-gray-300 space-y-1">
                <div>â€¢ admin@lucerne.com (Admin) â† Use this</div>
                <div>â€¢ manager@lucerne.com (Manager)</div>
                <div>â€¢ employee1@lucerne.com (Employee)</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen flex bg-gray-900 text-gray-100">
      <Sidebar 
        activePage={activePage.name} 
        setActivePage={setActivePage} 
        userRole={userRole}
        userName={userName}
        handleSignOut={handleSignOut}
      />
      <main className="flex-grow">
        <PageRenderer 
          page={activePage} 
          setActivePage={setActivePage} 
          openModal={openModal} 
          userRole={userRole}
        />
      </main>

      {modal.isOpen && (
        <Modal closeModal={closeModal}>
          {modal.name === 'startReviewCycle' && (
            <StartReviewCycleModal supabase={supabase} closeModal={closeModal} modalProps={modal.props} />
          )}
        </Modal>
      )}

      {/* Debug Info Footer */}
      {debugInfo && (
        <div className="fixed bottom-0 left-0 right-0 bg-gray-800 text-xs text-gray-400 p-2 border-t border-gray-700">
          Debug: {debugInfo} | Role: {userRole} | User: {user?.email}
        </div>
      )}
    </div>
  );
}


--- FILE: src\index.js ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


--- FILE: src\components\modals\Modal.js ---

import React from 'react';
import { X } from 'lucide-react';

export default function Modal({ children, closeModal }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
      <div className="bg-gray-900 rounded-xl shadow-lg w-full max-w-lg relative p-6">
        <button onClick={closeModal} className="absolute top-4 right-4 text-gray-400 hover:text-white">
          <X size={20} />
        </button>
        {children}
      </div>
    </div>
  );
}


--- FILE: src\components\modals\StartReviewCycleModal.js ---

import React, { useEffect, useState } from 'react';

export default function StartReviewCycleModal({ supabase, closeModal, modalProps }) {
  const [cycles, setCycles] = useState([]);
  const [selected, setSelected] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchCycles = async () => {
      const { data, error } = await supabase
        .from('review_cycles')
        .select('id, name, status')
        .eq('status', 'active');
      if (error) setError(error.message);
      else setCycles(data);
      setLoading(false);
    };
    fetchCycles();
  }, [supabase]);

  const start = async () => {
    if (!selected) return;
    setSubmitting(true);
    const { error } = await supabase.rpc('start_review_cycle_for_my_team', { cycle_id_to_start: selected });
    if (error) setError(error.message);
    else {
      if (modalProps?.afterSave) await modalProps.afterSave();
      closeModal();
    }
    setSubmitting(false);
  };

  if (loading) return <div>Loadingâ€¦</div>;
  return (
    <div>
      <h2 className="text-xl font-semibold mb-4">Start Review Cycle</h2>
      {error && <p className="text-red-400 mb-2">{error}</p>}
      <label className="block mb-4">
        <span className="text-sm">Select Active Cycle</span>
        <select
          value={selected}
          onChange={(e) => setSelected(parseInt(e.target.value))}
          className="mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg p-2">
          <option value="">â€” choose â€”</option>
          {cycles.map((c) => (
            <option key={c.id} value={c.id}>{c.name}</option>
          ))}
        </select>
      </label>
      <div className="flex justify-end space-x-2">
        <button onClick={closeModal} className="px-4 py-2 rounded-lg bg-gray-700 hover:bg-gray-600">Cancel</button>
        <button
          onClick={start}
          disabled={!selected || submitting}
          className="px-4 py-2 rounded-lg bg-cyan-600 hover:bg-cyan-700 disabled:opacity-50">
          {submitting ? 'Startingâ€¦' : 'Start'}
        </button>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\Admin.js ---

// src/components/pages/Admin.js - Enhanced version for Phase 1
import React, { useEffect, useState } from 'react';
import { Users, Calendar, Plus, Play, AlertTriangle } from 'lucide-react';

export default function Admin({ supabase }) {
  const [employees, setEmployees] = useState([]);
  const [cycles, setCycles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [showCreateModal, setShowCreateModal] = useState(false);

  useEffect(() => {
    fetchData();
  }, []);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      console.log('ðŸ”„ Admin: Fetching data...');
      
      // Fetch employees - get ALL employees first
      const { data: employeesData, error: employeesError } = await supabase
        .from('employees')
        .select('id, name, email, job_title, is_active, created_at, manager_id')
        .order('name');
      
      if (employeesError) {
        console.error('âŒ Employees error:', employeesError);
        throw employeesError;
      }
      
      console.log('âœ… Employees loaded:', employeesData);
      setEmployees(employeesData || []);

      // Fetch review cycles
      const { data: cyclesData, error: cyclesError } = await supabase
        .from('review_cycles')
        .select('id, name, status, start_date, end_date, created_at')
        .order('created_at', { ascending: false });
      
      if (cyclesError) {
        console.error('âŒ Cycles error:', cyclesError);
        setCycles([]);
      } else {
        console.log('âœ… Cycles loaded:', cyclesData);
        setCycles(cyclesData || []);
      }

    } catch (err) {
      console.error('ðŸ’¥ Admin fetch error:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleActivateCycle = async (cycleId) => {
    try {
      const { data, error } = await supabase.rpc('activate_review_cycle', {
        p_cycle_id: cycleId
      });
      
      if (error) throw error;
      
      if (data.success) {
        alert('âœ… ' + data.message);
        fetchData(); // Refresh data
      } else {
        alert('âŒ ' + data.error);
      }
    } catch (err) {
      alert('âŒ Error: ' + err.message);
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">Admin Panel</h1>
        <div className="text-center py-8">Loading admin data...</div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">Admin Panel</h1>
        <div className="text-red-400 text-center py-8">
          <AlertTriangle size={48} className="mx-auto mb-4" />
          <p>Error loading data: {error}</p>
          <button 
            onClick={fetchData}
            className="mt-4 px-4 py-2 bg-cyan-600 hover:bg-cyan-700 rounded-lg"
          >
            Retry
          </button>
        </div>
      </div>
    );
  }

  const getStatusBadge = (status) => {
    const colors = {
      upcoming: 'bg-yellow-600 text-white',
      active: 'bg-green-600 text-white', 
      completed: 'bg-blue-600 text-white'
    };
    return colors[status] || 'bg-gray-600 text-white';
  };

  return (
    <div className="p-8">
      <div className="flex justify-between items-center mb-8">
        <h1 className="text-3xl font-bold text-cyan-400">Admin Panel</h1>
        <button
          onClick={() => setShowCreateModal(true)}
          className="bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded-lg flex items-center"
        >
          <Plus size={16} className="mr-2" />
          Create Review Cycle
        </button>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Employees Section */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center mb-4">
            <Users className="mr-2 text-cyan-400" size={24} />
            <h2 className="text-xl font-semibold">Employees ({employees.length})</h2>
          </div>
          
          {employees.length > 0 ? (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {employees.map((employee) => (
                <div key={employee.id} className="flex justify-between items-center p-3 bg-gray-700 rounded">
                  <div>
                    <p className="font-medium text-white">{employee.name}</p>
                    <p className="text-sm text-gray-400">{employee.email}</p>
                    <p className="text-xs text-gray-500">
                      {employee.job_title || 'No Title'} â€¢ 
                      {employee.manager_id ? ' Has Manager' : ' No Manager'}
                    </p>
                  </div>
                  <div className="text-right">
                    <span className={`text-xs px-2 py-1 rounded ${
                      employee.is_active ? 'bg-green-600 text-white' : 'bg-red-600 text-white'
                    }`}>
                      {employee.is_active ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <p className="text-center text-gray-400 py-4">No employees found</p>
          )}
        </div>

        {/* Review Cycles Section */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center mb-4">
            <Calendar className="mr-2 text-cyan-400" size={24} />
            <h2 className="text-xl font-semibold">Review Cycles ({cycles.length})</h2>
          </div>
          
          {cycles.length > 0 ? (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {cycles.map((cycle) => (
                <div key={cycle.id} className="p-3 bg-gray-700 rounded">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <p className="font-medium text-white">{cycle.name}</p>
                      <p className="text-sm text-gray-400">
                        {new Date(cycle.start_date).toLocaleDateString()} - {new Date(cycle.end_date).toLocaleDateString()}
                      </p>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded ${getStatusBadge(cycle.status)}`}>
                      {cycle.status}
                    </span>
                  </div>
                  
                  {cycle.status === 'upcoming' && (
                    <button
                      onClick={() => handleActivateCycle(cycle.id)}
                      className="text-green-400 hover:text-green-300 flex items-center text-sm mt-2"
                    >
                      <Play size={14} className="mr-1" />
                      Activate
                    </button>
                  )}
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <p className="text-gray-400 mb-4">No review cycles found</p>
              <p className="text-sm text-gray-500">Create your first review cycle to get started</p>
            </div>
          )}
        </div>
      </div>

      {/* Summary Stats */}
      <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-cyan-400">{employees.length}</p>
          <p className="text-gray-400">Total Employees</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-green-400">
            {employees.filter(e => e.is_active).length}
          </p>
          <p className="text-gray-400">Active Employees</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-yellow-400">
            {cycles.filter(c => c.status === 'active').length}
          </p>
          <p className="text-gray-400">Active Cycles</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-purple-400">
            {employees.filter(e => e.manager_id).length}
          </p>
          <p className="text-gray-400">Employees with Managers</p>
        </div>
      </div>

      {/* Create Cycle Modal */}
      {showCreateModal && (
        <CreateCycleModal 
          supabase={supabase}
          onClose={() => setShowCreateModal(false)}
          onSuccess={() => {
            setShowCreateModal(false);
            fetchData();
          }}
        />
      )}
    </div>
  );
}

// Simple Create Cycle Modal Component
function CreateCycleModal({ supabase, onClose, onSuccess }) {
  const [formData, setFormData] = useState({
    name: '',
    startDate: '',
    endDate: ''
  });
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!formData.name || !formData.startDate || !formData.endDate) {
      setError('All fields are required');
      return;
    }

    setSaving(true);
    setError('');

    try {
      const { data, error } = await supabase.rpc('create_simple_review_cycle', {
        p_name: formData.name,
        p_start_date: formData.startDate,
        p_end_date: formData.endDate
      });

      if (error) throw error;

      if (data.success) {
        alert('âœ… ' + data.message);
        onSuccess();
      } else {
        setError(data.error);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50">
      <div className="bg-gray-800 rounded-lg p-8 w-full max-w-md">
        <h3 className="text-xl font-bold text-cyan-400 mb-4">Create Review Cycle</h3>
        
        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Cycle Name
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => setFormData(prev => ({...prev, name: e.target.value}))}
              placeholder="e.g., Q1 2025 Performance Review"
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded text-white"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              Start Date
            </label>
            <input
              type="date"
              value={formData.startDate}
              onChange={(e) => setFormData(prev => ({...prev, startDate: e.target.value}))}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded text-white"
              required
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-300 mb-1">
              End Date
            </label>
            <input
              type="date"
              value={formData.endDate}
              onChange={(e) => setFormData(prev => ({...prev, endDate: e.target.value}))}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded text-white"
              required
            />
          </div>

          {error && (
            <div className="text-red-400 text-sm bg-red-900 p-2 rounded">
              {error}
            </div>
          )}

          <div className="flex justify-end space-x-3 pt-4">
            <button
              type="button"
              onClick={onClose}
              className="px-4 py-2 bg-gray-600 hover:bg-gray-700 rounded text-white"
            >
              Cancel
            </button>
            <button
              type="submit"
              disabled={saving}
              className="px-4 py-2 bg-cyan-500 hover:bg-cyan-600 rounded text-white disabled:opacity-50"
            >
              {saving ? 'Creating...' : 'Create Cycle'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\Assessment.js ---

import React, { useEffect, useState } from 'react';

export default function Assessment({ supabase, pageProps, setActivePage }) {
  const { assessmentId } = pageProps;
  const [assessment, setAssessment] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchDetails = async () => {
      const { data, error } = await supabase.rpc('get_assessment_details', { p_assessment_id: assessmentId });
      if (error) setError(error.message);
      else setAssessment(data?.[0]);
      setLoading(false);
    };
    fetchDetails();
  }, [supabase, assessmentId]);

  if (loading) return <div className="p-8">Loadingâ€¦</div>;
  if (error)   return <div className="p-8 text-red-400">{error}</div>;
  if (!assessment) return <div className="p-8">No data</div>;

  return (
    <div className="p-8 space-y-6">
      <button onClick={() => setActivePage({ name: 'My Team', props: {} })} className="text-cyan-400 hover:underline">â†Â Back to MyÂ Team</button>

      <h2 className="text-2xl font-semibold">{assessment.employee_name}</h2>
      <p className="text-gray-400">Review Cycle: {assessment.review_cycle_name}</p>

      <section>
        <h3 className="text-xl font-semibold mb-2 mt-6">GWC</h3>
        <ul className="space-y-1 text-gray-300 list-disc list-inside">
          <li>GetsÂ It: {assessment.gwc_gets_it ? 'âœ…' : 'âŒ'} â€” {assessment.gwc_gets_it_feedback}</li>
          <li>WantsÂ It: {assessment.gwc_wants_it ? 'âœ…' : 'âŒ'} â€” {assessment.gwc_wants_it_feedback}</li>
          <li>Capacity: {assessment.gwc_capacity ? 'âœ…' : 'âŒ'} â€” {assessment.gwc_capacity_feedback}</li>
        </ul>
      </section>

      <section>
        <h3 className="text-xl font-semibold mb-2 mt-6">Strengths &Â Improvements</h3>
        <p className="mb-2"><strong>Strengths:</strong> {assessment.employee_strengths}</p>
        <p><strong>Improvements:</strong> {assessment.employee_improvements}</p>
      </section>

      <section>
        <h3 className="text-xl font-semibold mb-2 mt-6">Rocks</h3>
        <ul className="space-y-2">
          {assessment.rocks?.map((rock) => (
            <li key={rock.id} className="p-3 bg-gray-800 rounded-lg">{rock.description} â€” <span className="capitalize text-gray-400">{rock.status}</span></li>
          ))}
        </ul>
      </section>
    </div>
  );
}


--- FILE: src\components\pages\Dashboard.js ---

import React, { useEffect, useState } from 'react';

export default function Dashboard({ supabase }) {
  const [teamStatus, setTeamStatus] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchStatus = async () => {
      const { data, error } = await supabase.rpc('get_team_status');
      if (error) {
        setError(error.message);
      } else {
        setTeamStatus(data);
      }
      setLoading(false);
    };
    fetchStatus();
  }, [supabase]);

  if (loading) return <div className="p-8">Loadingâ€¦</div>;
  if (error)   return <div className="p-8 text-red-400">{error}</div>;

  return (
    <div className="p-8">
      <h2 className="text-2xl font-semibold mb-6">TeamÂ Dashboard</h2>
      <div className="overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-700 text-gray-300">
            <tr>
              <th className="px-4 py-2 text-left">Employee</th>
              <th className="px-4 py-2 text-left">JobÂ Title</th>
              <th className="px-4 py-2 text-left">AssessmentÂ Status</th>
            </tr>
          </thead>
          <tbody>
            {teamStatus.map((row) => (
              <tr key={row.employee_id} className="even:bg-gray-800">
                <td className="px-4 py-2">{row.employee_name}</td>
                <td className="px-4 py-2">{row.job_title}</td>
                <td className="px-4 py-2 capitalize">{row.assessment_status ?? 'â€”'}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\MyReviews.js ---

// src/components/pages/MyReviews.js
import React, { useEffect, useState } from 'react';

export default function MyReviews({ supabase }) {
  const [reviews, setReviews] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    const fetchReviews = async () => {
      const { data: { session }, error: sessionError } = await supabase.auth.getSession();

      if (sessionError || !session) {
        setError(sessionError?.message || "No active session");
        setLoading(false);
        return;
      }

      const { data, error } = await supabase
        .from('assessments')
        .select('id, review_cycle_id, status, review_cycles(name)')
        .eq('employee_id', session.user.id);

      if (error) setError(error.message);
      else setReviews(data);

      setLoading(false);
    };

    fetchReviews();
  }, [supabase]);

  if (loading) return <div className="p-8">Loadingâ€¦</div>;
  if (error)   return <div className="p-8 text-red-400">{error}</div>;

  return (
    <div className="p-8">
      <h2 className="text-2xl font-semibold mb-6">My Reviews</h2>
      <ul className="space-y-4">
        {reviews.map((r) => (
          <li key={r.id} className="p-4 bg-gray-800 rounded-lg shadow flex justify-between">
            <span>
              {r.review_cycles?.name ?? 'Unnamed Cycle'} â€” <span className="capitalize">{r.status}</span>
            </span>
            <span className="text-sm text-gray-400">ID: {r.id}</span>
          </li>
        ))}
      </ul>
    </div>
  );
}



--- FILE: src\components\pages\MyTeam.js ---

import React, { useEffect, useState } from 'react';
import { Play } from 'lucide-react';

export default function MyTeam({ supabase, openModal, setActivePage }) {
  const [teamStatus, setTeamStatus] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const load = async () => {
    setLoading(true);
    const { data, error } = await supabase.rpc('get_team_status');
    if (error) setError(error.message);
    else setTeamStatus(data);
    setLoading(false);
  };

  useEffect(() => {
    load();
    // realâ€‘time updates optional: supabase.channel()
  }, []);

  if (loading) return <div className="p-8">Loadingâ€¦</div>;
  if (error)   return <div className="p-8 text-red-400">{error}</div>;

  return (
    <div className="p-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold">MyÂ Team</h2>
        <button
          onClick={() => openModal('startReviewCycle', { afterSave: load })}
          className="flex items-center bg-cyan-600 hover:bg-cyan-700 px-4 py-2 rounded-lg shadow">
          <Play size={16} className="mr-2" />
          Start Review Cycle
        </button>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full text-sm">
          <thead className="bg-gray-700 text-gray-300">
            <tr>
              <th className="px-4 py-2 text-left">Employee</th>
              <th className="px-4 py-2 text-left">JobÂ Title</th>
              <th className="px-4 py-2 text-left">AssessmentÂ Status</th>
              <th className="px-4 py-2" />
            </tr>
          </thead>
          <tbody>
            {teamStatus.map((row) => (
              <tr key={row.employee_id} className="even:bg-gray-800">
                <td className="px-4 py-2">{row.employee_name}</td>
                <td className="px-4 py-2">{row.job_title}</td>
                <td className="px-4 py-2 capitalize">{row.assessment_status ?? 'â€”'}</td>
                <td className="px-4 py-2 text-right">
                  {row.assessment_id && (
                    <button
                      onClick={() => setActivePage({ name: 'Assessment', props: { assessmentId: row.assessment_id } })}
                      className="text-cyan-400 hover:underline">
                      Open
                    </button>
                  )}
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\Settings.js ---

import React from 'react';

export default function Settings() {
  return (
    <div className="p-8 max-w-xl">
      <h2 className="text-2xl font-semibold mb-6">Settings</h2>
      <p className="mb-4 text-gray-400">This minimal MVP has no userâ€‘configurable settings yet.</p>
      <p className="text-sm text-gray-500">Future iterations will include notification preferences, theme selection, and profile editing.</p>
    </div>
  );
}


--- FILE: src\components\shared\Sidebar.js ---

// src/components/shared/Sidebar.js - Fixed with proper sign out
import React from 'react';
import { LayoutDashboard, Users, FileText, Settings, LogOut, UserCog } from 'lucide-react';

const Sidebar = ({ activePage, setActivePage, userRole, userName, handleSignOut }) => {
  // Define navigation items with role requirements
  const navItems = [
    { name: 'Dashboard', icon: LayoutDashboard, roles: ['admin', 'manager', 'employee'] },
    { name: 'My Team', icon: Users, roles: ['admin', 'manager'] },
    { name: 'My Reviews', icon: FileText, roles: ['admin', 'manager', 'employee'] },
    { name: 'Settings', icon: Settings, roles: ['admin', 'manager', 'employee'] },
    { name: 'Admin', icon: UserCog, roles: ['admin'] },
  ];

  // Filter items based on user role
  const visibleItems = navItems.filter(item => 
    !userRole || item.roles.includes(userRole)
  );

  return (
    <div className="w-64 bg-gray-900 text-white flex flex-col h-screen shadow-2xl">
      <div className="p-6 text-center border-b border-gray-700">
        <h1 className="text-3xl font-bold text-cyan-400 tracking-wider">EDGE</h1>
        {userName && (
          <div className="mt-2">
            <p className="text-sm text-gray-300">Welcome, {userName}</p>
            {userRole && (
              <p className="text-xs text-gray-500 capitalize">({userRole})</p>
            )}
          </div>
        )}
      </div>
      
      <nav className="flex-grow p-4">
        <ul>
          {visibleItems.map((item) => (
            <li key={item.name}>
              <button
                onClick={() => setActivePage({ name: item.name, props: {} })}
                className={`w-full flex items-center p-3 my-2 rounded-lg transition-all duration-200 text-left ${
                  activePage === item.name
                    ? 'bg-cyan-500 text-white shadow-lg'
                    : 'text-gray-400 hover:bg-gray-700 hover:text-white'
                }`}
              >
                <item.icon className="mr-4" size={20} />
                <span className="font-semibold">{item.name}</span>
              </button>
            </li>
          ))}
        </ul>
      </nav>
      
      <div className="p-4 border-t border-gray-700">
        <button
          onClick={handleSignOut}
          className="w-full flex items-center p-3 rounded-lg text-gray-400 hover:bg-red-600 hover:text-white transition-all duration-200"
        >
          <LogOut className="mr-4" size={20} />
          <span className="font-semibold">Sign Out</span>
        </button>
      </div>
    </div>
  );
};

export default Sidebar;
