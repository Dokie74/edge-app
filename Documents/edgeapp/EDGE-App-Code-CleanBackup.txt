

--- FILE: .env ---

# Supabase Configuration
REACT_APP_SUPABASE_URL=https://blssdohlfcmyhxtpalcf.supabase.co
REACT_APP_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsc3Nkb2hsZmNteWh4dHBhbGNmIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTM1ODM0NjMsImV4cCI6MjA2OTE1OTQ2M30.GwXpC36F37Us9MJbjArFDXCtt47nO60qDDOJNd1Rm7o

# Service Role Key (âš ï¸ NEVER expose this in production client-side code)
REACT_APP_SUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImJsc3Nkb2hsZmNteWh4dHBhbGNmIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MzU4MzQ2MywiZXhwIjoyMDY5MTU5NDYzfQ.OT4SY35tNsUMwTexh7J5nYwaEPbaFu3lZ7i5NO9Yim8

# Environment
REACT_APP_ENV=development


--- FILE: CLAUDE.local.md ---



--- FILE: CONTRIBUTING.md ---

# Contributing to EDGE

Thank you for your interest in contributing to EDGE! This document provides guidelines and information for contributors.

## ðŸ“‹ Table of Contents

- [Code of Conduct](#code-of-conduct)
- [Getting Started](#getting-started)
- [Development Workflow](#development-workflow)
- [Coding Standards](#coding-standards)
- [Testing](#testing)
- [Pull Request Process](#pull-request-process)
- [Issue Reporting](#issue-reporting)

## ðŸ¤ Code of Conduct

This project adheres to a code of conduct. By participating, you are expected to uphold this code. Please report unacceptable behavior to the project maintainers.

### Our Standards

- **Be respectful**: Treat all contributors with respect and kindness
- **Be inclusive**: Welcome newcomers and help them get started
- **Be collaborative**: Work together to achieve common goals
- **Be constructive**: Provide helpful feedback and suggestions

## ðŸš€ Getting Started

### Prerequisites

Before contributing, ensure you have:
- Node.js 18+ installed
- Git configured with your name and email
- A Supabase account for testing
- Familiarity with React, TypeScript, and PostgreSQL

### Development Setup

1. **Fork the repository** on GitHub
2. **Clone your fork** locally:
   ```bash
   git clone https://github.com/YOUR_USERNAME/edge-app.git
   cd edge-app
   ```
3. **Add upstream remote**:
   ```bash
   git remote add upstream https://github.com/original-org/edge-app.git
   ```
4. **Install dependencies**:
   ```bash
   npm install
   ```
5. **Set up environment**:
   ```bash
   cp .env.example .env.local
   # Configure your Supabase credentials
   ```

## ðŸ”„ Development Workflow

### Branch Naming Convention

Use descriptive branch names with prefixes:
- `feature/` - New features
- `fix/` - Bug fixes
- `docs/` - Documentation updates
- `refactor/` - Code refactoring
- `test/` - Test improvements

Examples:
- `feature/user-profile-enhancement`
- `fix/dashboard-loading-issue`
- `docs/api-documentation-update`

### Making Changes

1. **Create a feature branch**:
   ```bash
   git checkout -b feature/your-feature-name
   ```

2. **Make your changes** following our coding standards

3. **Run tests** to ensure everything works:
   ```bash
   npm test
   npm run type-check
   ```

4. **Commit your changes** with descriptive messages:
   ```bash
   git add .
   git commit -m "feat: add user profile enhancement feature"
   ```

### Commit Message Convention

We follow the [Conventional Commits](https://www.conventionalcommits.org/) specification:

- `feat:` - New features
- `fix:` - Bug fixes
- `docs:` - Documentation changes
- `style:` - Code style changes (formatting, etc.)
- `refactor:` - Code refactoring
- `test:` - Adding or updating tests
- `chore:` - Maintenance tasks

Examples:
```
feat: add employee search functionality
fix: resolve dashboard loading timeout issue
docs: update API documentation for development plans
refactor: optimize dashboard component performance
test: add unit tests for AdminService
```

## ðŸ“ Coding Standards

### TypeScript Guidelines

- **Always use TypeScript** for new files
- **Define interfaces** for all data structures
- **Use strict mode** settings in tsconfig.json
- **Avoid `any` type** - use proper typing
- **Export types** from `src/types/index.ts`

### React Guidelines

- **Functional components** with hooks
- **Use React.memo** for performance optimization
- **Custom hooks** for reusable logic
- **Proper prop types** with TypeScript interfaces
- **Handle loading and error states**

### Code Style

- **Use Prettier** for code formatting
- **Follow ESLint** rules and recommendations
- **Use meaningful variable names**
- **Write self-documenting code**
- **Add comments** for complex logic only

### File Organization

```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ ComponentName.tsx        # Component implementation
â”‚   â”œâ”€â”€ ComponentName.test.tsx   # Component tests
â”‚   â””â”€â”€ index.ts                 # Export barrel
â”œâ”€â”€ services/
â”‚   â”œâ”€â”€ ServiceName.ts           # Service implementation
â”‚   â”œâ”€â”€ ServiceName.test.ts      # Service tests
â”‚   â””â”€â”€ index.ts                 # Export barrel
â””â”€â”€ types/
    â””â”€â”€ index.ts                 # All type definitions
```

## ðŸ§ª Testing

### Testing Requirements

All contributions must include appropriate tests:

- **Unit tests** for utility functions and services
- **Component tests** for React components
- **Integration tests** for API interactions
- **E2E tests** for critical user workflows (when applicable)

### Writing Tests

```typescript
// Component test example
import { render, screen, fireEvent } from '@testing-library/react';
import { Button } from './Button';

describe('Button Component', () => {
  it('calls onClick when clicked', () => {
    const handleClick = jest.fn();
    render(<Button onClick={handleClick}>Click me</Button>);
    
    fireEvent.click(screen.getByRole('button'));
    expect(handleClick).toHaveBeenCalledTimes(1);
  });
});
```

### Running Tests

```bash
# Run all tests
npm test

# Run tests in watch mode
npm test -- --watch

# Run tests with coverage
npm test -- --coverage

# Run TypeScript type checking
npm run type-check
```

## ðŸ” Pull Request Process

### Before Submitting

1. **Update documentation** if needed
2. **Run the full test suite**
3. **Check TypeScript compilation**
4. **Verify your changes work locally**
5. **Rebase on latest main branch**

### PR Requirements

- **Descriptive title** and detailed description
- **Link related issues** using keywords (fixes #123)
- **Include screenshots** for UI changes
- **List breaking changes** if any
- **Update CHANGELOG.md** for significant changes

### PR Template

```markdown
## Description
Brief description of the changes

## Type of Change
- [ ] Bug fix
- [ ] New feature
- [ ] Breaking change
- [ ] Documentation update

## Testing
- [ ] Unit tests added/updated
- [ ] Integration tests added/updated
- [ ] Manual testing completed

## Screenshots (if applicable)
<!-- Add screenshots for UI changes -->

## Checklist
- [ ] Code follows project style guidelines
- [ ] Self-review completed
- [ ] Tests pass
- [ ] Documentation updated
```

### Review Process

1. **Automated checks** must pass (CI/CD pipeline)
2. **Code review** by at least one maintainer
3. **Address feedback** and make requested changes
4. **Final approval** and merge by maintainers

## ðŸ› Issue Reporting

### Bug Reports

When reporting bugs, please include:

- **Clear description** of the issue
- **Steps to reproduce** the problem
- **Expected vs actual behavior**
- **Environment details** (browser, OS, version)
- **Screenshots or logs** if applicable

### Feature Requests

For feature requests, please provide:

- **Clear description** of the proposed feature
- **Use case** and business justification
- **Proposed implementation** (if you have ideas)
- **Alternative solutions** considered

### Issue Templates

Use the appropriate issue template:
- ðŸ› Bug Report
- âœ¨ Feature Request
- ðŸ“š Documentation
- â“ Question

## ðŸ·ï¸ Labels and Milestones

### Common Labels

- `bug` - Something isn't working
- `enhancement` - New feature or request
- `documentation` - Improvements to documentation
- `good first issue` - Good for newcomers
- `help wanted` - Extra attention is needed
- `priority: high` - High priority issues
- `status: needs review` - Awaiting review

## ðŸŽ¯ Development Focus Areas

We especially welcome contributions in these areas:

1. **Performance optimization** - React.memo, lazy loading, bundle optimization
2. **Testing coverage** - Unit tests, integration tests, E2E tests
3. **Accessibility** - WCAG compliance, keyboard navigation, screen readers
4. **Documentation** - API docs, user guides, developer tutorials
5. **Internationalization** - Multi-language support
6. **Mobile optimization** - Responsive design improvements

## ðŸ“ž Getting Help

If you need help contributing:

- **GitHub Discussions** - For general questions and ideas
- **GitHub Issues** - For bug reports and feature requests
- **Email** - contact@your-company.com for sensitive matters

## ðŸ™ Recognition

Contributors are recognized in:
- README.md contributors section
- CHANGELOG.md for each release
- GitHub contributors page
- Annual contributor highlights

Thank you for contributing to EDGE! ðŸš€


--- FILE: EDGE-App-Supabase-Backup.sql ---

--
-- PostgreSQL database dump
--

-- Dumped from database version 17.4
-- Dumped by pg_dump version 17.5

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

DROP POLICY IF EXISTS security_audit_admin_read ON public.security_audit;
DROP POLICY IF EXISTS review_cycles_update_admin ON public.review_cycles;
DROP POLICY IF EXISTS review_cycles_select_all ON public.review_cycles;
DROP POLICY IF EXISTS review_cycles_manager_read ON public.review_cycles;
DROP POLICY IF EXISTS review_cycles_insert_admin ON public.review_cycles;
DROP POLICY IF EXISTS review_cycles_admin_access ON public.review_cycles;
DROP POLICY IF EXISTS notifications_update_own ON public.notifications;
DROP POLICY IF EXISTS notifications_select_own ON public.notifications;
DROP POLICY IF EXISTS notifications_own_access ON public.notifications;
DROP POLICY IF EXISTS notifications_insert_own ON public.notifications;
DROP POLICY IF EXISTS messages_participant_access ON public.manager_employee_messages;
DROP POLICY IF EXISTS messages_admin_access ON public.manager_employee_messages;
DROP POLICY IF EXISTS manager_notes_own_access ON public.manager_notes;
DROP POLICY IF EXISTS kudos_public_read ON public.kudos;
DROP POLICY IF EXISTS kudos_own_insert ON public.kudos;
DROP POLICY IF EXISTS feedback_assessment_access ON public.assessment_feedback;
DROP POLICY IF EXISTS employees_own_update ON public.employees;
DROP POLICY IF EXISTS employees_own_record ON public.employees;
DROP POLICY IF EXISTS employees_admin_all_access ON public.employees;
DROP POLICY IF EXISTS employee_goals_own_access ON public.employee_development_goals;
DROP POLICY IF EXISTS employee_goals_manager_access ON public.employee_development_goals;
DROP POLICY IF EXISTS employee_goals_admin_access ON public.employee_development_goals;
DROP POLICY IF EXISTS employee_departments_select_own ON public.employee_departments;
DROP POLICY IF EXISTS development_plans_update_own ON public.development_plans;
DROP POLICY IF EXISTS development_plans_select_own ON public.development_plans;
DROP POLICY IF EXISTS development_plans_insert_own ON public.development_plans;
DROP POLICY IF EXISTS development_plans_access ON public.development_plans;
DROP POLICY IF EXISTS departments_select_all ON public.departments;
DROP POLICY IF EXISTS company_rocks_read ON public.company_rocks;
DROP POLICY IF EXISTS company_rocks_admin ON public.company_rocks;
DROP POLICY IF EXISTS assessments_update_own ON public.assessments;
DROP POLICY IF EXISTS assessments_select_own ON public.assessments;
DROP POLICY IF EXISTS assessments_manager_team ON public.assessments;
DROP POLICY IF EXISTS assessments_insert_own ON public.assessments;
DROP POLICY IF EXISTS assessments_employee_own ON public.assessments;
DROP POLICY IF EXISTS assessments_admin_access ON public.assessments;
DROP POLICY IF EXISTS assessment_scorecard_metrics_all_policy ON public.assessment_scorecard_metrics;
DROP POLICY IF EXISTS assessment_scorecard_metrics_access ON public.assessment_scorecard_metrics;
DROP POLICY IF EXISTS assessment_rocks_all_policy ON public.assessment_rocks;
DROP POLICY IF EXISTS assessment_rocks_access ON public.assessment_rocks;
ALTER TABLE IF EXISTS ONLY public.training_requests DROP CONSTRAINT IF EXISTS training_requests_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.security_audit DROP CONSTRAINT IF EXISTS security_audit_user_id_fkey;
ALTER TABLE IF EXISTS ONLY public.security_audit DROP CONSTRAINT IF EXISTS security_audit_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.peer_feedback DROP CONSTRAINT IF EXISTS peer_feedback_recipient_id_fkey;
ALTER TABLE IF EXISTS ONLY public.peer_feedback DROP CONSTRAINT IF EXISTS peer_feedback_giver_id_fkey;
ALTER TABLE IF EXISTS ONLY public.notifications DROP CONSTRAINT IF EXISTS notifications_sender_id_fkey;
ALTER TABLE IF EXISTS ONLY public.notifications DROP CONSTRAINT IF EXISTS notifications_recipient_id_fkey;
ALTER TABLE IF EXISTS ONLY public.manager_notes DROP CONSTRAINT IF EXISTS manager_notes_manager_id_fkey;
ALTER TABLE IF EXISTS ONLY public.manager_notes DROP CONSTRAINT IF EXISTS manager_notes_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.manager_employee_messages DROP CONSTRAINT IF EXISTS manager_employee_messages_to_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.manager_employee_messages DROP CONSTRAINT IF EXISTS manager_employee_messages_from_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.kudos DROP CONSTRAINT IF EXISTS kudos_receiver_id_fkey;
ALTER TABLE IF EXISTS ONLY public.kudos DROP CONSTRAINT IF EXISTS kudos_giver_id_fkey;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_manager_id_fkey;
ALTER TABLE IF EXISTS ONLY public.employee_development_goals DROP CONSTRAINT IF EXISTS employee_development_goals_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.employee_departments DROP CONSTRAINT IF EXISTS employee_departments_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.employee_departments DROP CONSTRAINT IF EXISTS employee_departments_department_id_fkey;
ALTER TABLE IF EXISTS ONLY public.development_plans DROP CONSTRAINT IF EXISTS development_plans_manager_reviewed_by_fkey;
ALTER TABLE IF EXISTS ONLY public.development_plans DROP CONSTRAINT IF EXISTS development_plans_manager_id_fkey;
ALTER TABLE IF EXISTS ONLY public.development_plans DROP CONSTRAINT IF EXISTS development_plans_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.company_rocks DROP CONSTRAINT IF EXISTS company_rocks_review_cycle_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_review_cycle_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_employee_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_scorecard_metrics DROP CONSTRAINT IF EXISTS assessment_scorecard_metrics_assessment_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_rocks DROP CONSTRAINT IF EXISTS assessment_rocks_assessment_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_feedback DROP CONSTRAINT IF EXISTS assessment_feedback_given_by_id_fkey;
ALTER TABLE IF EXISTS ONLY public.assessment_feedback DROP CONSTRAINT IF EXISTS assessment_feedback_assessment_id_fkey;
DROP TRIGGER IF EXISTS update_review_cycles_updated_at ON public.review_cycles;
DROP TRIGGER IF EXISTS update_assessments_updated_at ON public.assessments;
DROP TRIGGER IF EXISTS trg_manager_review_completed ON public.assessments;
DROP TRIGGER IF EXISTS trg_assessment_submitted ON public.assessments;
DROP INDEX IF EXISTS public.idx_training_requests_status;
DROP INDEX IF EXISTS public.idx_training_requests_employee;
DROP INDEX IF EXISTS public.idx_review_cycles_status;
DROP INDEX IF EXISTS public.idx_review_cycles_dates;
DROP INDEX IF EXISTS public.idx_review_cycles_created_at;
DROP INDEX IF EXISTS public.idx_notifications_unread;
DROP INDEX IF EXISTS public.idx_notifications_type;
DROP INDEX IF EXISTS public.idx_notifications_recipient_id;
DROP INDEX IF EXISTS public.idx_notifications_read_at;
DROP INDEX IF EXISTS public.idx_notifications_created_at;
DROP INDEX IF EXISTS public.idx_messages_to_employee;
DROP INDEX IF EXISTS public.idx_messages_from_employee;
DROP INDEX IF EXISTS public.idx_manager_notes_manager_id;
DROP INDEX IF EXISTS public.idx_manager_notes_employee_id;
DROP INDEX IF EXISTS public.idx_manager_notes_created_at;
DROP INDEX IF EXISTS public.idx_employee_departments_employee_id;
DROP INDEX IF EXISTS public.idx_employee_departments_department_id;
DROP INDEX IF EXISTS public.idx_development_plans_status;
DROP INDEX IF EXISTS public.idx_development_plans_manager_id;
DROP INDEX IF EXISTS public.idx_development_plans_employee_id;
DROP INDEX IF EXISTS public.idx_development_plans_created_at;
DROP INDEX IF EXISTS public.idx_development_goals_status;
DROP INDEX IF EXISTS public.idx_development_goals_employee;
DROP INDEX IF EXISTS public.idx_assessments_updated_at;
DROP INDEX IF EXISTS public.idx_assessments_status;
DROP INDEX IF EXISTS public.idx_assessments_employee_id;
DROP INDEX IF EXISTS public.idx_assessments_created_at;
ALTER TABLE IF EXISTS ONLY public.training_requests DROP CONSTRAINT IF EXISTS training_requests_pkey;
ALTER TABLE IF EXISTS ONLY public.security_audit DROP CONSTRAINT IF EXISTS security_audit_pkey;
ALTER TABLE IF EXISTS ONLY public.review_cycles DROP CONSTRAINT IF EXISTS review_cycles_pkey;
ALTER TABLE IF EXISTS ONLY public.peer_feedback DROP CONSTRAINT IF EXISTS peer_feedback_pkey;
ALTER TABLE IF EXISTS ONLY public.notifications DROP CONSTRAINT IF EXISTS notifications_pkey;
ALTER TABLE IF EXISTS ONLY public.manager_notes DROP CONSTRAINT IF EXISTS manager_notes_pkey;
ALTER TABLE IF EXISTS ONLY public.manager_employee_messages DROP CONSTRAINT IF EXISTS manager_employee_messages_pkey;
ALTER TABLE IF EXISTS ONLY public.kudos DROP CONSTRAINT IF EXISTS kudos_pkey;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_user_id_key;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_pkey;
ALTER TABLE IF EXISTS ONLY public.employees DROP CONSTRAINT IF EXISTS employees_email_key;
ALTER TABLE IF EXISTS ONLY public.employee_development_goals DROP CONSTRAINT IF EXISTS employee_development_goals_pkey;
ALTER TABLE IF EXISTS ONLY public.employee_departments DROP CONSTRAINT IF EXISTS employee_departments_pkey;
ALTER TABLE IF EXISTS ONLY public.employee_departments DROP CONSTRAINT IF EXISTS employee_departments_employee_id_department_id_key;
ALTER TABLE IF EXISTS ONLY public.development_plans DROP CONSTRAINT IF EXISTS development_plans_pkey;
ALTER TABLE IF EXISTS ONLY public.departments DROP CONSTRAINT IF EXISTS departments_pkey;
ALTER TABLE IF EXISTS ONLY public.departments DROP CONSTRAINT IF EXISTS departments_name_key;
ALTER TABLE IF EXISTS ONLY public.company_rocks DROP CONSTRAINT IF EXISTS company_rocks_pkey;
ALTER TABLE IF EXISTS ONLY public.assessments DROP CONSTRAINT IF EXISTS assessments_pkey;
ALTER TABLE IF EXISTS ONLY public.assessment_scorecard_metrics DROP CONSTRAINT IF EXISTS assessment_scorecard_metrics_pkey;
ALTER TABLE IF EXISTS ONLY public.assessment_rocks DROP CONSTRAINT IF EXISTS assessment_rocks_pkey;
ALTER TABLE IF EXISTS ONLY public.assessment_feedback DROP CONSTRAINT IF EXISTS assessment_feedback_pkey;
ALTER TABLE IF EXISTS public.security_audit ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.peer_feedback ALTER COLUMN feedback_id DROP DEFAULT;
ALTER TABLE IF EXISTS public.employee_departments ALTER COLUMN id DROP DEFAULT;
ALTER TABLE IF EXISTS public.departments ALTER COLUMN id DROP DEFAULT;
DROP TABLE IF EXISTS public.training_requests;
DROP SEQUENCE IF EXISTS public.security_audit_id_seq;
DROP TABLE IF EXISTS public.security_audit;
DROP TABLE IF EXISTS public.review_cycles;
DROP SEQUENCE IF EXISTS public.peer_feedback_feedback_id_seq;
DROP TABLE IF EXISTS public.peer_feedback;
DROP TABLE IF EXISTS public.notifications;
DROP TABLE IF EXISTS public.manager_notes;
DROP TABLE IF EXISTS public.manager_employee_messages;
DROP TABLE IF EXISTS public.kudos;
DROP TABLE IF EXISTS public.employees;
DROP TABLE IF EXISTS public.employee_development_goals;
DROP SEQUENCE IF EXISTS public.employee_departments_id_seq;
DROP TABLE IF EXISTS public.employee_departments;
DROP TABLE IF EXISTS public.development_plans;
DROP SEQUENCE IF EXISTS public.departments_id_seq;
DROP TABLE IF EXISTS public.departments;
DROP TABLE IF EXISTS public.company_rocks;
DROP TABLE IF EXISTS public.assessments;
DROP TABLE IF EXISTS public.assessment_scorecard_metrics;
DROP TABLE IF EXISTS public.assessment_rocks;
DROP TABLE IF EXISTS public.assessment_feedback;
DROP FUNCTION IF EXISTS public.upsert_development_goal(p_goal_id uuid, p_goal_type text, p_title text, p_description text, p_target_date date, p_priority text, p_status text);
DROP FUNCTION IF EXISTS public.update_updated_at_column();
DROP FUNCTION IF EXISTS public.update_manager_note(p_note_id uuid, p_title text, p_content text, p_category text, p_priority text);
DROP FUNCTION IF EXISTS public.update_employee(p_employee_id uuid, p_name text, p_email text, p_job_title text, p_role text, p_manager_id uuid, p_is_active boolean);
DROP FUNCTION IF EXISTS public.update_assessment_field(p_assessment_id bigint, p_field_name text, p_field_value text);
DROP FUNCTION IF EXISTS public.update_assessment(p_assessment_id bigint, p_updates jsonb);
DROP FUNCTION IF EXISTS public.test_get_assessment_details(p_assessment_id bigint);
DROP FUNCTION IF EXISTS public.submit_training_request(p_request_type text, p_title text, p_description text, p_provider text, p_estimated_cost numeric, p_preferred_date date, p_business_justification text);
DROP FUNCTION IF EXISTS public.submit_self_assessment(p_assessment_id bigint);
DROP FUNCTION IF EXISTS public.submit_manager_review(p_assessment_id bigint, p_feedback jsonb);
DROP FUNCTION IF EXISTS public.submit_development_plan(p_goals text, p_objectives text, p_skills_to_develop text, p_resources_needed text, p_success_metrics text, p_target_completion_date date, _csrf_token text, _nonce text, _timestamp text);
DROP FUNCTION IF EXISTS public.submit_development_plan(p_title text, p_description text, p_goals text, p_skills_to_develop text, p_timeline text);
DROP FUNCTION IF EXISTS public.submit_development_plan(p_title text, p_description text, p_goals jsonb, p_skills_to_develop jsonb, p_timeline text);
DROP FUNCTION IF EXISTS public.start_review_cycle_for_my_team(cycle_id_to_start bigint);
DROP FUNCTION IF EXISTS public.set_employee_departments(p_employee_id uuid, p_department_ids integer[]);
DROP FUNCTION IF EXISTS public.save_manager_note(p_employee_id uuid, p_title text, p_content text, p_category text, p_priority text);
DROP FUNCTION IF EXISTS public.review_development_plan(p_plan_id uuid, p_status text, p_feedback text, p_rating integer, _csrf_token text, _nonce text, _timestamp text);
DROP FUNCTION IF EXISTS public.review_development_plan(p_plan_id uuid, p_status text, p_manager_feedback text);
DROP FUNCTION IF EXISTS public.notify_manager_assessment_submitted();
DROP FUNCTION IF EXISTS public.notify_employee_manager_review_completed();
DROP FUNCTION IF EXISTS public.mark_notification_read(p_notification_id uuid);
DROP FUNCTION IF EXISTS public.mark_feedback_helpful(p_feedback_id bigint);
DROP FUNCTION IF EXISTS public.log_security_event(p_action text, p_resource text, p_success boolean);
DROP FUNCTION IF EXISTS public.link_employee_to_auth_user(p_employee_id uuid, p_auth_user_id uuid);
DROP FUNCTION IF EXISTS public.link_current_user_to_employee();
DROP FUNCTION IF EXISTS public.link_auth_user_to_employee(p_employee_id uuid, p_auth_user_id uuid);
DROP FUNCTION IF EXISTS public.give_peer_feedback(p_recipient_id uuid, p_feedback_type text, p_message text, p_category text, p_is_anonymous boolean);
DROP FUNCTION IF EXISTS public.give_kudo(p_receiver_id uuid, p_core_value text, p_comment text);
DROP FUNCTION IF EXISTS public.get_user_notifications();
DROP FUNCTION IF EXISTS public.get_unread_notification_count();
DROP FUNCTION IF EXISTS public.get_team_status();
DROP FUNCTION IF EXISTS public.get_team_assessments();
DROP FUNCTION IF EXISTS public.get_review_cycle_details(p_cycle_id bigint);
DROP FUNCTION IF EXISTS public.get_potential_managers();
DROP FUNCTION IF EXISTS public.get_my_training_requests();
DROP FUNCTION IF EXISTS public.get_my_team();
DROP FUNCTION IF EXISTS public.get_my_role();
DROP FUNCTION IF EXISTS public.get_my_name();
DROP FUNCTION IF EXISTS public.get_my_feedback_received(p_limit integer);
DROP FUNCTION IF EXISTS public.get_my_development_plans();
DROP FUNCTION IF EXISTS public.get_my_development_goals();
DROP FUNCTION IF EXISTS public.get_my_assessments();
DROP FUNCTION IF EXISTS public.get_manager_employees();
DROP FUNCTION IF EXISTS public.get_kudos_wall();
DROP FUNCTION IF EXISTS public.get_feedback_wall(p_limit integer, p_feedback_type text);
DROP FUNCTION IF EXISTS public.get_employees_simple();
DROP FUNCTION IF EXISTS public.get_employees_for_feedback();
DROP FUNCTION IF EXISTS public.get_employee_with_departments(p_employee_id uuid);
DROP FUNCTION IF EXISTS public.get_employee_profile();
DROP FUNCTION IF EXISTS public.get_employee_notes(p_employee_id uuid);
DROP FUNCTION IF EXISTS public.get_employee_departments(p_employee_id uuid);
DROP FUNCTION IF EXISTS public.get_development_plans_for_review();
DROP FUNCTION IF EXISTS public.get_development_plans();
DROP FUNCTION IF EXISTS public.get_dashboard_stats(p_role text);
DROP FUNCTION IF EXISTS public.get_current_user_session();
DROP FUNCTION IF EXISTS public.get_current_user_role();
DROP FUNCTION IF EXISTS public.get_current_employee_id();
DROP FUNCTION IF EXISTS public.get_assessment_feedback(p_assessment_id bigint);
DROP FUNCTION IF EXISTS public.get_assessment_details(p_assessment_id bigint);
DROP FUNCTION IF EXISTS public.get_all_review_cycles_for_admin();
DROP FUNCTION IF EXISTS public.get_all_employees_simple();
DROP FUNCTION IF EXISTS public.get_all_employees_for_admin();
DROP FUNCTION IF EXISTS public.get_all_employees();
DROP FUNCTION IF EXISTS public.get_all_departments();
DROP FUNCTION IF EXISTS public.get_active_review_cycles_with_status();
DROP FUNCTION IF EXISTS public.delete_manager_note(p_note_id uuid);
DROP FUNCTION IF EXISTS public.debug_auth_uid();
DROP FUNCTION IF EXISTS public.create_simple_review_cycle(p_name text, p_start_date date, p_end_date date);
DROP FUNCTION IF EXISTS public.create_notification(p_recipient_id uuid, p_sender_id uuid, p_type text, p_title text, p_message text, p_data jsonb);
DROP FUNCTION IF EXISTS public.create_notification(p_recipient_id uuid, p_sender_id uuid, p_type text, p_title text, p_message text, p_data json);
DROP FUNCTION IF EXISTS public.create_employee_with_temp_password(p_name text, p_email text, p_job_title text, p_role text, p_manager_id uuid, p_temp_password text);
DROP FUNCTION IF EXISTS public.create_employee(p_name text, p_email text, p_job_title text, p_role text, p_manager_id uuid, p_temp_password text);
DROP FUNCTION IF EXISTS public.close_review_cycle(_csrf_token text, _nonce text, _timestamp bigint, p_cycle_id text);
DROP FUNCTION IF EXISTS public.close_review_cycle(p_cycle_id bigint);
DROP FUNCTION IF EXISTS public.check_user_permission(required_permission text);
DROP FUNCTION IF EXISTS public.auto_link_new_employees();
DROP FUNCTION IF EXISTS public.add_assessment_feedback(p_assessment_id bigint, p_feedback text);
DROP FUNCTION IF EXISTS public.activate_review_cycle(p_cycle_id bigint);
DROP SCHEMA IF EXISTS public;
--
-- Name: public; Type: SCHEMA; Schema: -; Owner: -
--

CREATE SCHEMA public;


--
-- Name: SCHEMA public; Type: COMMENT; Schema: -; Owner: -
--

COMMENT ON SCHEMA public IS 'standard public schema';


--
-- Name: activate_review_cycle(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.activate_review_cycle(p_cycle_id bigint) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_assessment_count INT := 0;
    v_cycle_name TEXT;
BEGIN
    -- Ensure the user is an admin
    IF (SELECT role FROM public.employees WHERE user_id = auth.uid() AND is_active = true) != 'admin' THEN
        RETURN '{"error": "Permission denied: Admin access required"}'::jsonb;
    END IF;

    -- Check if cycle exists
    SELECT name INTO v_cycle_name FROM public.review_cycles WHERE id = p_cycle_id;
    IF v_cycle_name IS NULL THEN
        RETURN '{"error": "Review cycle not found"}'::jsonb;
    END IF;

    -- Activate the cycle
    UPDATE public.review_cycles SET status = 'active' WHERE id = p_cycle_id;

    -- Create assessments for all active employees who don't already have one for this cycle
    INSERT INTO public.assessments (employee_id, review_cycle_id, self_assessment_status, manager_review_status, employee_acknowledgment, created_at, updated_at)
    SELECT 
        id, 
        p_cycle_id, 
        'not_started', 
        'pending',
        false,
        NOW(),
        NOW()
    FROM public.employees
    WHERE is_active = true AND id NOT IN (
        SELECT employee_id FROM public.assessments WHERE review_cycle_id = p_cycle_id
    );

    -- Get the count of newly created assessments
    GET DIAGNOSTICS v_assessment_count = ROW_COUNT;

    RETURN jsonb_build_object(
        'success', true,
        'message', 'Review cycle activated successfully',
        'cycle_name', v_cycle_name,
        'assessments_created', v_assessment_count
    );
END;
$$;


--
-- Name: add_assessment_feedback(bigint, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.add_assessment_feedback(p_assessment_id bigint, p_feedback text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  feedback_giver_id uuid;
BEGIN
  -- Get the current user's employee ID
  SELECT id INTO feedback_giver_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF feedback_giver_id IS NULL THEN
    RETURN json_build_object('error', 'Employee record not found');
  END IF;
  
  -- Insert the feedback
  INSERT INTO assessment_feedback (assessment_id, given_by_id, feedback)
  VALUES (p_assessment_id, feedback_giver_id, p_feedback);
  
  RETURN json_build_object(
    'success', true,
    'message', 'Feedback added successfully'
  );
EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object('error', 'Failed to add feedback: ' || SQLERRM);
END;
$$;


--
-- Name: auto_link_new_employees(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.auto_link_new_employees() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_link_count INTEGER := 0;
    v_employee_record RECORD;
    v_auth_user_id UUID;
BEGIN
    -- Only admins can run this
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('success', false, 'error', 'Unauthorized');
    END IF;
    
    -- Find employees without linked auth accounts
    FOR v_employee_record IN
        SELECT e.id, e.email, e.name, e.temp_password
        FROM employees e
        WHERE e.is_active = true 
        AND e.user_id IS NULL
        AND e.temp_password IS NOT NULL
        ORDER BY e.created_at DESC
    LOOP
        -- Find matching auth user by email
        SELECT au.id INTO v_auth_user_id
        FROM auth.users au
        WHERE au.email = v_employee_record.email
        LIMIT 1;
        
        -- Link them if found
        IF v_auth_user_id IS NOT NULL THEN
            UPDATE employees 
            SET user_id = v_auth_user_id, updated_at = NOW()
            WHERE id = v_employee_record.id;
            
            v_link_count := v_link_count + 1;
        END IF;
    END LOOP;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Auto-linking completed',
        'accounts_linked', v_link_count
    );
END;
$$;


--
-- Name: check_user_permission(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.check_user_permission(required_permission text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    user_role TEXT;
    has_permission BOOLEAN := false;
BEGIN
    -- Get user role
    SELECT role INTO user_role
    FROM employees 
    WHERE user_id = auth.uid() 
    AND is_active = true;
    
    -- Fallback - check by email
    IF user_role IS NULL AND auth.email() IS NOT NULL THEN
        SELECT role INTO user_role
        FROM employees 
        WHERE LOWER(email) = LOWER(auth.email())
        AND is_active = true;
    END IF;
    
    -- Check permissions based on role
    CASE required_permission
        WHEN 'admin' THEN
            has_permission := (user_role = 'admin');
        WHEN 'manage_users' THEN
            has_permission := (user_role = 'admin');
        WHEN 'manage_cycles' THEN
            has_permission := (user_role = 'admin');
        WHEN 'manage_team' THEN
            has_permission := (user_role IN ('admin', 'manager'));
        WHEN 'write' THEN
            has_permission := (user_role IN ('admin', 'manager', 'employee'));
        WHEN 'read' THEN
            has_permission := (user_role IN ('admin', 'manager', 'employee'));
        ELSE
            has_permission := false;
    END CASE;
    
    RETURN has_permission;
END;
$$;


--
-- Name: close_review_cycle(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.close_review_cycle(p_cycle_id bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_cycle_record review_cycles%ROWTYPE;
    v_assessments_count INTEGER := 0;
    v_completed_count INTEGER := 0;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Get the review cycle
    SELECT * INTO v_cycle_record
    FROM review_cycles 
    WHERE id = p_cycle_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object('error', 'Review cycle not found');
    END IF;
    
    -- Check if cycle is in a valid state to close
    IF v_cycle_record.status != 'active' THEN
        RETURN json_build_object('error', 'Only active review cycles can be closed');
    END IF;
    
    -- Get count of assessments for this cycle
    SELECT 
        COUNT(*) as total_assessments,
        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed_assessments
    INTO v_assessments_count, v_completed_count
    FROM assessments 
    WHERE review_cycle_id = p_cycle_id;
    
    -- Update cycle status to completed
    UPDATE review_cycles 
    SET 
        status = 'completed',
        end_date = CURRENT_DATE
    WHERE id = p_cycle_id;
    
    -- Update any remaining assessments to closed status
    UPDATE assessments 
    SET 
        status = 'closed',
        closed_at = NOW()
    WHERE review_cycle_id = p_cycle_id 
    AND status NOT IN ('completed', 'finalized');
    
    -- Log the closure
    PERFORM log_security_event(
        'review_cycle_closed',
        'cycle_id:' || p_cycle_id::text,
        true
    );
    
    RETURN json_build_object(
        'success', true,
        'message', 'Review cycle closed successfully',
        'cycle_id', p_cycle_id,
        'cycle_name', v_cycle_record.name,
        'total_assessments', v_assessments_count,
        'completed_assessments', v_completed_count
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to close review cycle: ' || SQLERRM);
END;
$$;


--
-- Name: close_review_cycle(text, text, bigint, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.close_review_cycle(_csrf_token text, _nonce text, _timestamp bigint, p_cycle_id text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    v_cycle_record RECORD;
    v_total_assessments INTEGER;
    v_completed_assessments INTEGER;
    v_has_updated_at BOOLEAN;
BEGIN
    -- Validate CSRF token (basic implementation)
    IF _csrf_token IS NULL OR LENGTH(_csrf_token) < 10 THEN
        RETURN json_build_object('error', 'Invalid CSRF token');
    END IF;
    
    -- Get current user's employee record
    SELECT e.id, e.role INTO v_current_employee_id, v_employee_role
    FROM employees e
    WHERE e.user_id = auth.uid() AND e.is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Check if user is admin
    IF v_employee_role != 'admin' THEN
        RETURN json_build_object('error', 'Access denied: Admin privileges required');
    END IF;
    
    -- Check if updated_at column exists
    SELECT EXISTS (
        SELECT 1 FROM information_schema.columns 
        WHERE table_name = 'review_cycles' AND column_name = 'updated_at'
    ) INTO v_has_updated_at;
    
    -- Find the review cycle
    BEGIN
        SELECT * INTO v_cycle_record
        FROM review_cycles 
        WHERE id::text = p_cycle_id 
           OR name = p_cycle_id
           OR name ILIKE '%' || p_cycle_id || '%'
        ORDER BY created_at DESC
        LIMIT 1;
    EXCEPTION
        WHEN OTHERS THEN
            RETURN json_build_object('error', 'Error finding review cycle: ' || SQLERRM);
    END;
    
    -- If not found, return error with available cycles
    IF v_cycle_record.id IS NULL THEN
        RETURN json_build_object(
            'error', 'Review cycle not found with ID: ' || p_cycle_id,
            'available_cycles', (
                SELECT json_agg(json_build_object('id', id::text, 'name', name, 'status', status))
                FROM review_cycles 
                ORDER BY created_at DESC 
                LIMIT 5
            )
        );
    END IF;
    
    -- Check if cycle is already closed
    IF v_cycle_record.status = 'closed' THEN
        RETURN json_build_object('error', 'Review cycle "' || v_cycle_record.name || '" is already closed');
    END IF;
    
    -- Get assessment statistics
    SELECT 
        COUNT(*) as total,
        COUNT(CASE WHEN status = 'completed' THEN 1 END) as completed
    INTO v_total_assessments, v_completed_assessments
    FROM assessments 
    WHERE review_cycle_id = v_cycle_record.id;
    
    -- Close the review cycle (handle missing updated_at column gracefully)
    IF v_has_updated_at THEN
        UPDATE review_cycles 
        SET status = 'closed', updated_at = NOW()
        WHERE id = v_cycle_record.id;
    ELSE
        UPDATE review_cycles 
        SET status = 'closed'
        WHERE id = v_cycle_record.id;
    END IF;
    
    -- Log the action (handle missing function gracefully)
    BEGIN
        PERFORM log_security_event(
            'review_cycle_closed',
            'cycle_id:' || v_cycle_record.id::text || ',name:' || v_cycle_record.name,
            true
        );
    EXCEPTION
        WHEN undefined_function THEN
            -- Ignore if logging function doesn't exist
            NULL;
    END;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Review cycle closed successfully',
        'cycle_id', v_cycle_record.id::text,
        'cycle_name', v_cycle_record.name,
        'total_assessments', v_total_assessments,
        'completed_assessments', v_completed_assessments
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to close review cycle: ' || SQLERRM);
END;
$$;


--
-- Name: create_employee(text, text, text, text, uuid, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_employee(p_name text, p_email text, p_job_title text DEFAULT NULL::text, p_role text DEFAULT 'employee'::text, p_manager_id uuid DEFAULT NULL::uuid, p_temp_password text DEFAULT NULL::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_id UUID;
    v_auth_user_id UUID;
    v_signup_result JSON;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Validate inputs
    IF p_name IS NULL OR TRIM(p_name) = '' THEN
        RETURN json_build_object('error', 'Name is required');
    END IF;
    
    IF p_email IS NULL OR TRIM(p_email) = '' THEN
        RETURN json_build_object('error', 'Email is required');
    END IF;
    
    IF p_temp_password IS NULL OR LENGTH(TRIM(p_temp_password)) < 6 THEN
        RETURN json_build_object('error', 'Password is required and must be at least 6 characters');
    END IF;
    
    -- Check if email already exists in employees table
    IF EXISTS (SELECT 1 FROM employees WHERE email = LOWER(TRIM(p_email))) THEN
        RETURN json_build_object('error', 'Email already exists');
    END IF;
    
    -- Validate role
    IF p_role NOT IN ('employee', 'manager', 'admin') THEN
        RETURN json_build_object('error', 'Invalid role. Must be employee, manager, or admin');
    END IF;
    
    -- Validate manager if provided and not null UUID
    IF p_manager_id IS NOT NULL AND p_manager_id != '00000000-0000-0000-0000-000000000000'::UUID THEN
        IF NOT EXISTS (SELECT 1 FROM employees WHERE id = p_manager_id AND is_active = true) THEN
            RETURN json_build_object('error', 'Manager not found or inactive');
        END IF;
    END IF;
    
    -- First, create the Supabase auth user using admin API
    -- Note: This requires service role key, typically done via edge function
    -- For now, we'll create the employee record and return instructions for manual auth creation
    
    -- Insert employee record
    INSERT INTO employees (
        name,
        email,
        job_title,
        role,
        manager_id,
        is_active,
        created_at,
        updated_at
    ) VALUES (
        TRIM(p_name),
        LOWER(TRIM(p_email)),
        COALESCE(NULLIF(TRIM(p_job_title), ''), NULL),
        p_role,
        CASE WHEN p_manager_id = '00000000-0000-0000-0000-000000000000'::UUID THEN NULL ELSE p_manager_id END,
        true,
        NOW(),
        NOW()
    ) RETURNING id INTO v_employee_id;
    
    -- Log the creation
    PERFORM log_security_event(
        'employee_created',
        'employee_id:' || v_employee_id::text || ',role:' || p_role,
        true
    );
    
    -- Return success with next steps for auth user creation
    RETURN json_build_object(
        'success', true,
        'message', 'Employee created successfully',
        'employee_id', v_employee_id,
        'next_steps', json_build_object(
            'action', 'create_auth_user',
            'email', LOWER(TRIM(p_email)),
            'password', p_temp_password,
            'employee_id', v_employee_id
        )
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to create employee: ' || SQLERRM);
END;
$$;


--
-- Name: create_employee_with_temp_password(text, text, text, text, uuid, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_employee_with_temp_password(p_name text, p_email text, p_job_title text, p_role text, p_manager_id uuid DEFAULT NULL::uuid, p_temp_password text DEFAULT NULL::text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_id uuid;
    v_result jsonb;
    v_auth_user_id uuid;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN jsonb_build_object('success', false, 'error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Validate inputs
    IF p_name IS NULL OR TRIM(p_name) = '' THEN
        RETURN jsonb_build_object('success', false, 'error', 'Name is required');
    END IF;
    
    IF p_email IS NULL OR TRIM(p_email) = '' THEN
        RETURN jsonb_build_object('success', false, 'error', 'Email is required');
    END IF;
    
    -- Check if email already exists in employees table
    IF EXISTS (SELECT 1 FROM employees WHERE email = LOWER(TRIM(p_email))) THEN
        RETURN jsonb_build_object('success', false, 'error', 'Employee with this email already exists');
    END IF;
    
    -- Try to create the Supabase auth user directly in the function
    -- This uses a different approach than the admin API
    BEGIN
        -- Insert into auth.users table directly (this requires service role permissions)
        INSERT INTO auth.users (
            id,
            instance_id,
            email,
            encrypted_password,
            email_confirmed_at,
            created_at,
            updated_at,
            raw_app_meta_data,
            raw_user_meta_data,
            is_super_admin,
            role
        ) VALUES (
            gen_random_uuid(),
            '00000000-0000-0000-0000-000000000000',
            LOWER(TRIM(p_email)),
            crypt(p_temp_password, gen_salt('bf')), -- bcrypt encryption
            NOW(), -- auto-confirm email
            NOW(),
            NOW(),
            '{"provider": "email", "providers": ["email"]}',
            jsonb_build_object('name', p_name),
            false,
            'authenticated'
        ) RETURNING id INTO v_auth_user_id;
        
    EXCEPTION WHEN OTHERS THEN
        -- If direct auth creation fails, we'll create employee record and handle auth separately
        v_auth_user_id := NULL;
    END;
    
    -- Insert the employee record
    INSERT INTO employees (
        name, 
        email, 
        job_title, 
        role, 
        manager_id, 
        temp_password, 
        must_change_password, 
        is_active,
        user_id,
        created_at,
        updated_at
    ) VALUES (
        TRIM(p_name),
        LOWER(TRIM(p_email)), 
        COALESCE(NULLIF(TRIM(p_job_title), ''), NULL), 
        p_role, 
        CASE WHEN p_manager_id = '00000000-0000-0000-0000-000000000000'::UUID THEN NULL ELSE p_manager_id END,
        p_temp_password, 
        true, 
        true,
        v_auth_user_id,
        NOW(),
        NOW()
    ) RETURNING id INTO v_employee_id;
    
    -- Log the creation
    PERFORM log_security_event(
        'employee_created',
        'employee_id:' || v_employee_id::text || ',role:' || p_role,
        true
    );
    
    -- Return success with appropriate next steps
    IF v_auth_user_id IS NOT NULL THEN
        v_result := jsonb_build_object(
            'success', true,
            'employee_id', v_employee_id,
            'auth_user_id', v_auth_user_id,
            'message', 'Employee and auth account created successfully',
            'can_login_immediately', true
        );
    ELSE
        v_result := jsonb_build_object(
            'success', true,
            'employee_id', v_employee_id,
            'message', 'Employee created successfully. Auth account will be created separately.',
            'can_login_immediately', false,
            'next_steps', jsonb_build_object(
                'action', 'create_auth_manually',
                'email', LOWER(TRIM(p_email)),
                'password', p_temp_password
            )
        );
    END IF;
    
    RETURN v_result;
    
EXCEPTION
    WHEN unique_violation THEN
        RETURN jsonb_build_object('success', false, 'error', 'Employee with this email already exists');
    WHEN OTHERS THEN
        RETURN jsonb_build_object('success', false, 'error', 'Failed to create employee: ' || SQLERRM);
END;
$$;


--
-- Name: create_notification(uuid, uuid, text, text, text, json); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_notification(p_recipient_id uuid, p_sender_id uuid, p_type text, p_title text, p_message text, p_data json DEFAULT NULL::json) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_notification_id UUID;
BEGIN
    -- Insert notification
    INSERT INTO notifications (
        recipient_id,
        sender_id,
        type,
        title,
        message,
        data,
        created_at,
        updated_at
    ) VALUES (
        p_recipient_id,
        p_sender_id,
        p_type,
        p_title,
        p_message,
        COALESCE(p_data, '{}'::json),
        NOW(),
        NOW()
    ) RETURNING id INTO v_notification_id;
    
    RETURN v_notification_id;
END;
$$;


--
-- Name: create_notification(uuid, uuid, text, text, text, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_notification(p_recipient_id uuid, p_sender_id uuid, p_type text, p_title text, p_message text, p_data jsonb DEFAULT '{}'::jsonb) RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_notification_id UUID;
BEGIN
    INSERT INTO notifications (
        recipient_id,
        sender_id,
        type,
        title,
        message,
        data,
        created_at
    ) VALUES (
        p_recipient_id,
        p_sender_id,
        p_type,
        p_title,
        p_message,
        p_data,
        NOW()
    ) RETURNING id INTO v_notification_id;
    
    RETURN v_notification_id;
END;
$$;


--
-- Name: create_simple_review_cycle(text, date, date); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.create_simple_review_cycle(p_name text, p_start_date date, p_end_date date) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    v_cycle_id BIGINT;
BEGIN
    -- Security check using new function
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Input validation
    IF p_name IS NULL OR LENGTH(TRIM(p_name)) = 0 THEN
        RETURN json_build_object('error', 'Review cycle name is required');
    END IF;
    
    IF p_start_date IS NULL OR p_end_date IS NULL THEN
        RETURN json_build_object('error', 'Start date and end date are required');
    END IF;
    
    IF p_start_date >= p_end_date THEN
        RETURN json_build_object('error', 'End date must be after start date');
    END IF;
    
    -- Create review cycle
    INSERT INTO review_cycles (name, start_date, end_date, status)
    VALUES (TRIM(p_name), p_start_date, p_end_date, 'upcoming')
    RETURNING id INTO v_cycle_id;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Review cycle created successfully',
        'cycle_id', v_cycle_id
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Database error occurred');
END;
$$;


--
-- Name: debug_auth_uid(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.debug_auth_uid() RETURNS TABLE(current_uid uuid, current_email text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT auth.uid() as current_uid, auth.email() as current_email;
$$;


--
-- Name: delete_manager_note(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.delete_manager_note(p_note_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Verify the note belongs to this manager
    IF NOT EXISTS (
        SELECT 1 FROM manager_notes 
        WHERE id = p_note_id AND manager_id = v_current_employee_id
    ) THEN
        RETURN json_build_object('error', 'Note not found or unauthorized');
    END IF;
    
    -- Delete the note
    DELETE FROM manager_notes WHERE id = p_note_id;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Note deleted successfully'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to delete note: ' || SQLERRM);
END;
$$;


--
-- Name: get_active_review_cycles_with_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_active_review_cycles_with_status() RETURNS TABLE(cycle_id bigint, cycle_name text, start_date date, end_date date, status text, total_assessments integer, completed_assessments integer, in_progress_assessments integer, not_started_assessments integer)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        rc.id,
        rc.name,
        rc.start_date,
        rc.end_date,
        rc.status,
        COUNT(a.id)::INTEGER as total_assessments,
        COUNT(CASE WHEN a.status = 'completed' THEN 1 END)::INTEGER as completed_assessments,
        COUNT(CASE WHEN a.status = 'in_progress' THEN 1 END)::INTEGER as in_progress_assessments,
        COUNT(CASE WHEN a.status = 'not_started' THEN 1 END)::INTEGER as not_started_assessments
    FROM review_cycles rc
    LEFT JOIN assessments a ON rc.id = a.review_cycle_id
    WHERE rc.status = 'active'
    GROUP BY rc.id, rc.name, rc.start_date, rc.end_date, rc.status
    ORDER BY rc.created_at DESC;
END;
$$;


--
-- Name: get_all_departments(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_departments() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN (
        SELECT json_agg(
            json_build_object(
                'id', id,
                'name', name,
                'description', description
            ) ORDER BY name
        )
        FROM departments
    );
END;
$$;


--
-- Name: get_all_employees(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_employees() RETURNS TABLE(id uuid, name text, email text, job_title text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT e.id, e.name, e.email, e.job_title
  FROM employees e
  WHERE e.is_active = true
  ORDER BY e.name;
$$;


--
-- Name: get_all_employees_for_admin(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_employees_for_admin() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result JSON;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RAISE EXCEPTION 'Unauthorized: Admin access required';
    END IF;
    
    -- Build JSON result with proper GROUP BY handling
    SELECT json_agg(employee_data) INTO result
    FROM (
        SELECT json_build_object(
            'id', e.id,
            'name', e.name,
            'email', e.email,
            'job_title', COALESCE(e.job_title, ''),
            'role', e.role,
            'manager_id', e.manager_id,
            'manager_name', COALESCE(m.name, ''),
            'is_active', e.is_active,
            'created_at', e.created_at,
            'updated_at', e.updated_at,
            'direct_reports_count', COALESCE(dr.direct_reports_count, 0)
        ) as employee_data
        FROM employees e
        LEFT JOIN employees m ON e.manager_id = m.id
        LEFT JOIN (
            SELECT 
                manager_id, 
                COUNT(*) as direct_reports_count
            FROM employees 
            WHERE is_active = true AND manager_id IS NOT NULL
            GROUP BY manager_id
        ) dr ON e.id = dr.manager_id
        ORDER BY e.name
    ) employees_with_data;
    
    RETURN COALESCE(result, '[]'::json);
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to fetch employees: %', SQLERRM;
END;
$$;


--
-- Name: get_all_employees_simple(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_employees_simple() RETURNS TABLE(id uuid, name text, email text, job_title text, manager_id uuid)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT e.id, e.name, e.email, e.job_title, e.manager_id
  FROM employees e
  WHERE e.is_active = true
  ORDER BY e.name;
$$;


--
-- Name: get_all_review_cycles_for_admin(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_all_review_cycles_for_admin() RETURNS TABLE(id bigint, name text, status text, start_date date, end_date date, created_at timestamp with time zone)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  -- Only allow admins to call this
  SELECT 
    rc.id,
    rc.name,
    rc.status,
    rc.start_date,
    rc.end_date,
    rc.created_at
  FROM review_cycles rc
  WHERE auth.email() = 'admin@lucerne.com'  -- Security check
  ORDER BY rc.created_at DESC;
$$;


--
-- Name: get_assessment_details(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_assessment_details(p_assessment_id bigint) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_assessment JSONB;
    v_user_role TEXT;
BEGIN
    -- Get the employee_id and role for the currently authenticated user
    SELECT id, role INTO v_current_employee_id, v_user_role FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '[{"error": "Employee not found for current user"}]'::jsonb;
    END IF;

    -- Get full assessment details with employee and cycle information
    SELECT jsonb_agg(assessment_data) INTO v_assessment
    FROM (
        SELECT jsonb_build_object(
            'assessment_id', a.id,
            'employee_id', a.employee_id,
            'employee_name', e.name,
            'employee_email', e.email,
            'employee_job_title', e.job_title,
            'review_cycle_id', rc.id,
            'review_cycle_name', rc.name,
            'review_cycle_status', rc.status,
            'self_assessment_status', a.self_assessment_status,
            'manager_review_status', a.manager_review_status,
            'employee_acknowledgment', COALESCE(a.employee_acknowledgment, false),
            'due_date', a.due_date,
            'created_at', a.created_at,
            'updated_at', a.updated_at,
            
            -- Employee Self-Assessment Data
            'employee_strengths', a.employee_strengths,
            'employee_improvements', a.employee_improvements,
            'value_passionate_examples', a.value_passionate_examples,
            'value_driven_examples', a.value_driven_examples,
            'value_resilient_examples', a.value_resilient_examples,
            'value_responsive_examples', a.value_responsive_examples,
            'gwc_gets_it', COALESCE(a.gwc_gets_it, false),
            'gwc_gets_it_feedback', a.gwc_gets_it_feedback,
            'gwc_wants_it', COALESCE(a.gwc_wants_it, false),
            'gwc_wants_it_feedback', a.gwc_wants_it_feedback,
            'gwc_capacity', COALESCE(a.gwc_capacity, false),
            'gwc_capacity_feedback', a.gwc_capacity_feedback,

            -- Manager Review Data
            'manager_performance_rating', a.manager_performance_rating,
            'manager_summary_comments', a.manager_summary_comments,
            'manager_core_values_feedback', a.manager_core_values_feedback,
            'manager_development_plan', a.manager_development_plan,
            'manager_action_items', a.manager_action_items,

            -- Manager Feedback for Two-Column Layout
            'manager_passionate_feedback', a.manager_passionate_feedback,
            'manager_driven_feedback', a.manager_driven_feedback,
            'manager_resilient_feedback', a.manager_resilient_feedback,
            'manager_responsive_feedback', a.manager_responsive_feedback,
            'manager_gwc_gets_it_feedback', a.manager_gwc_gets_it_feedback,
            'manager_gwc_wants_it_feedback', a.manager_gwc_wants_it_feedback,
            'manager_gwc_capacity_feedback', a.manager_gwc_capacity_feedback,
            'manager_strengths_feedback', a.manager_strengths_feedback,
            'manager_improvements_feedback', a.manager_improvements_feedback,

            -- Permission flags
            'can_edit_self_assessment', (
                (v_user_role = 'admin') OR
                (a.employee_id = v_current_employee_id AND rc.status = 'active' AND 
                 a.self_assessment_status IN ('not_started', 'in_progress'))
            ),
            'can_edit_manager_review', (
                (v_user_role = 'admin') OR
                (v_user_role = 'manager' AND e.manager_id = v_current_employee_id AND 
                 a.self_assessment_status = 'employee_complete' AND a.manager_review_status = 'pending')
            ),
            'is_manager_view', (v_user_role = 'manager' AND e.manager_id = v_current_employee_id),

            -- Rocks data (placeholder - extend if you have rocks table)
            'rocks', '[]'::jsonb
        ) as assessment_data
        FROM public.assessments a
        JOIN public.employees e ON a.employee_id = e.id
        JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
        WHERE a.id = p_assessment_id
        AND (
            -- User can see their own assessments
            a.employee_id = v_current_employee_id OR
            -- Managers can see their team's assessments  
            (v_user_role = 'manager' AND e.manager_id = v_current_employee_id) OR
            -- Admins can see all assessments
            v_user_role = 'admin'
        )
    ) assessment_query;

    -- Return the assessment array (matching the expected format)
    RETURN COALESCE(v_assessment, '[]'::jsonb);
END;
$$;


--
-- Name: get_assessment_feedback(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_assessment_feedback(p_assessment_id bigint) RETURNS TABLE(feedback_id bigint, feedback text, given_by_name text, created_at timestamp with time zone, is_author boolean)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT 
    af.id,
    af.feedback,
    e.name,
    af.created_at,
    af.given_by_id = (SELECT id FROM employees WHERE user_id = auth.uid())
  FROM assessment_feedback af
  JOIN employees e ON e.id = af.given_by_id
  WHERE af.assessment_id = p_assessment_id
    AND e.is_active = true
  ORDER BY af.created_at ASC;
$$;


--
-- Name: get_current_employee_id(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_current_employee_id() RETURNS uuid
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_id UUID;
BEGIN
    SELECT id INTO v_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    RETURN v_employee_id;
END;
$$;


--
-- Name: get_current_user_role(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_current_user_role() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    user_record employees%ROWTYPE;
    result JSON;
BEGIN
    -- Get employee record based on authenticated user
    SELECT * INTO user_record
    FROM employees 
    WHERE user_id = auth.uid() 
    AND is_active = true;
    
    -- If no record found, check by email as fallback
    IF NOT FOUND AND auth.email() IS NOT NULL THEN
        SELECT * INTO user_record
        FROM employees 
        WHERE LOWER(email) = LOWER(auth.email())
        AND is_active = true;
    END IF;
    
    -- If still no record found, return unauthorized
    IF NOT FOUND THEN
        RETURN json_build_object(
            'authorized', false,
            'role', null,
            'error', 'User not found or inactive'
        );
    END IF;
    
    -- Return secure user info
    RETURN json_build_object(
        'authorized', true,
        'role', user_record.role,
        'employee_id', user_record.id,
        'name', user_record.name,
        'permissions', CASE 
            WHEN user_record.role = 'admin' THEN json_build_array('read', 'write', 'admin', 'manage_users', 'manage_cycles')
            WHEN user_record.role = 'manager' THEN json_build_array('read', 'write', 'manage_team')
            ELSE json_build_array('read', 'write')
        END
    );
END;
$$;


--
-- Name: get_current_user_session(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_current_user_session() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    user_record employees%ROWTYPE;
    session_data JSON;
BEGIN
    -- Check if user is authenticated
    IF auth.uid() IS NULL AND auth.email() IS NULL THEN
        RETURN json_build_object(
            'authenticated', false,
            'error', 'No valid session'
        );
    END IF;
    
    -- Get employee record by user_id first
    SELECT * INTO user_record
    FROM employees 
    WHERE user_id = auth.uid() 
    AND is_active = true;
    
    -- Fallback - try by email
    IF NOT FOUND AND auth.email() IS NOT NULL THEN
        SELECT * INTO user_record
        FROM employees 
        WHERE LOWER(email) = LOWER(auth.email())
        AND is_active = true;
    END IF;
    
    IF NOT FOUND THEN
        RETURN json_build_object(
            'authenticated', false,
            'error', 'User record not found'
        );
    END IF;
    
    -- Return safe session data (no sensitive info)
    RETURN json_build_object(
        'authenticated', true,
        'user_id', user_record.id,
        'name', user_record.name,
        'role', user_record.role,
        'email', user_record.email,
        'job_title', user_record.job_title,
        'session_valid', true
    );
END;
$$;


--
-- Name: get_dashboard_stats(text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_dashboard_stats(p_role text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_stats JSONB;
BEGIN
    -- Get the employee_id for the currently authenticated user
    SELECT id INTO v_current_employee_id FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "Employee not found for current user"}'::jsonb;
    END IF;

    -- Generate stats based on the provided role
    IF p_role = 'admin' THEN
        SELECT jsonb_build_object(
            'employees', jsonb_build_object(
                'total', (SELECT COUNT(*) FROM public.employees WHERE is_active = true),
                'by_role', jsonb_build_object(
                    'admin', (SELECT COUNT(*) FROM public.employees WHERE is_active = true AND role = 'admin'),
                    'manager', (SELECT COUNT(*) FROM public.employees WHERE is_active = true AND role = 'manager'),
                    'employee', (SELECT COUNT(*) FROM public.employees WHERE is_active = true AND role = 'employee')
                )
            ),
            'review_cycles', jsonb_build_object(
                'active', (SELECT COUNT(*) FROM public.review_cycles WHERE status = 'active'),
                'total', (SELECT COUNT(*) FROM public.review_cycles)
            ),
            'assessments', jsonb_build_object(
                'pending', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE rc.status = 'active' AND a.self_assessment_status IN ('not_started', 'in_progress')
                ),
                'completed', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE rc.status = 'active' AND a.self_assessment_status = 'employee_complete'
                ),
                'manager_reviews_pending', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE rc.status = 'active' AND a.self_assessment_status = 'employee_complete' AND a.manager_review_status = 'pending'
                ),
                'total', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE rc.status = 'active'
                )
            )
        ) INTO v_stats;
        
    ELSIF p_role = 'manager' THEN
        -- FIXED: Separate subqueries to avoid GROUP BY issues
        SELECT jsonb_build_object(
            'team', jsonb_build_object(
                'total_members', (
                    SELECT COUNT(*) 
                    FROM public.employees 
                    WHERE manager_id = v_current_employee_id AND is_active = true
                ),
                'team_members', (
                    SELECT COALESCE(jsonb_agg(
                        jsonb_build_object(
                            'id', id,
                            'name', name,
                            'email', email,
                            'job_title', job_title
                        ) ORDER BY name
                    ), '[]'::jsonb)
                    FROM public.employees 
                    WHERE manager_id = v_current_employee_id AND is_active = true
                )
            ),
            'pending_reviews', (
                SELECT COUNT(*) FROM public.assessments a
                JOIN public.employees e ON a.employee_id = e.id
                JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                WHERE e.manager_id = v_current_employee_id 
                AND rc.status = 'active' 
                AND a.self_assessment_status = 'employee_complete' 
                AND a.manager_review_status = 'pending'
            ),
            'team_performance', (
                SELECT COALESCE(jsonb_agg(
                    jsonb_build_object(
                        'employee_id', e.id,
                        'employee_name', e.name,
                        'employee_job_title', e.job_title,
                        'assessment_id', a.id,
                        'cycle_name', rc.name,
                        'assessment_status', a.self_assessment_status,
                        'manager_review_status', a.manager_review_status,
                        'due_date', a.due_date
                    ) ORDER BY a.created_at DESC
                ), '[]'::jsonb)
                FROM public.assessments a
                JOIN public.employees e ON a.employee_id = e.id
                JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                WHERE e.manager_id = v_current_employee_id AND rc.status = 'active'
            ),
            'assessments', jsonb_build_object(
                'team_completion_rate', CASE 
                    WHEN (
                        SELECT COUNT(*) FROM public.assessments a 
                        JOIN public.employees e ON a.employee_id = e.id 
                        JOIN public.review_cycles rc ON a.review_cycle_id = rc.id 
                        WHERE e.manager_id = v_current_employee_id AND rc.status = 'active'
                    ) > 0 
                    THEN ROUND((
                        (SELECT COUNT(*) FROM public.assessments a 
                         JOIN public.employees e ON a.employee_id = e.id 
                         JOIN public.review_cycles rc ON a.review_cycle_id = rc.id 
                         WHERE e.manager_id = v_current_employee_id AND rc.status = 'active' 
                         AND a.self_assessment_status = 'employee_complete')::numeric / 
                        (SELECT COUNT(*) FROM public.assessments a 
                         JOIN public.employees e ON a.employee_id = e.id 
                         JOIN public.review_cycles rc ON a.review_cycle_id = rc.id 
                         WHERE e.manager_id = v_current_employee_id AND rc.status = 'active')::numeric
                    ) * 100)
                    ELSE 0 
                END
            )
        ) INTO v_stats;
        
    ELSE -- 'employee' role
        SELECT jsonb_build_object(
            'assessments', jsonb_build_object(
                'pending', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE a.employee_id = v_current_employee_id AND rc.status = 'active' 
                    AND a.self_assessment_status IN ('not_started', 'in_progress')
                ),
                'completed', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE a.employee_id = v_current_employee_id AND rc.status = 'active' 
                    AND a.self_assessment_status = 'employee_complete'
                ),
                'manager_reviews_completed', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE a.employee_id = v_current_employee_id AND rc.status = 'active' 
                    AND a.manager_review_status = 'completed'
                ),
                'total', (
                    SELECT COUNT(*) FROM public.assessments a
                    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
                    WHERE a.employee_id = v_current_employee_id AND rc.status = 'active'
                )
            )
        ) INTO v_stats;
    END IF;

    RETURN v_stats;
END;
$$;


--
-- Name: get_development_plans(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_development_plans() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    result JSON;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Get development plans for current user
    SELECT json_agg(
        json_build_object(
            'id', dp.id,
            'title', dp.title,
            'description', COALESCE(dp.description, ''),
            'goals', dp.goals,
            'skills_to_develop', dp.skills_to_develop,
            'timeline', COALESCE(dp.timeline, ''),
            'status', dp.status,
            'manager_feedback', COALESCE(dp.manager_feedback, ''),
            'manager_reviewed_at', dp.manager_reviewed_at,
            'created_at', dp.created_at,
            'updated_at', dp.updated_at,
            'days_since_submission', EXTRACT(days FROM NOW() - dp.created_at)::INTEGER
        ) ORDER BY dp.created_at DESC
    ) INTO result
    FROM development_plans dp
    WHERE dp.employee_id = v_current_employee_id;
    
    RETURN COALESCE(result, '[]'::json);
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to get development plans: ' || SQLERRM);
END;
$$;


--
-- Name: get_development_plans_for_review(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_development_plans_for_review() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    result JSON;
BEGIN
    -- Get current user's employee ID and role
    SELECT e.id, e.role INTO v_current_employee_id, v_employee_role
    FROM employees e 
    WHERE e.user_id = auth.uid() AND e.is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Get development plans for review based on role
    IF v_employee_role = 'admin' THEN
        -- Admin can see all plans
        SELECT json_agg(
            json_build_object(
                'id', dp.id,
                'employee_id', dp.employee_id,
                'employee_name', e.name,
                'employee_email', e.email,
                'manager_id', dp.manager_id,
                'manager_name', m.name,
                'goals', dp.goals,
                'objectives', dp.objectives,
                'skills_to_develop', dp.skills_to_develop,
                'resources_needed', dp.resources_needed,
                'success_metrics', dp.success_metrics,
                'target_completion_date', dp.target_completion_date,
                'status', dp.status,
                'manager_feedback', dp.manager_feedback,
                'manager_rating', dp.manager_rating,
                'submission_date', dp.submission_date,
                'review_date', dp.review_date,
                'created_at', dp.created_at,
                'updated_at', dp.updated_at
            ) ORDER BY dp.created_at DESC
        ) INTO result
        FROM development_plans dp
        JOIN employees e ON dp.employee_id = e.id
        LEFT JOIN employees m ON dp.manager_id = m.id
        WHERE dp.status IN ('submitted', 'under_review');
        
    ELSE
        -- Manager can see plans for their direct reports
        SELECT json_agg(
            json_build_object(
                'id', dp.id,
                'employee_id', dp.employee_id,
                'employee_name', e.name,
                'employee_email', e.email,
                'manager_id', dp.manager_id,
                'manager_name', m.name,
                'goals', dp.goals,
                'objectives', dp.objectives,
                'skills_to_develop', dp.skills_to_develop,
                'resources_needed', dp.resources_needed,
                'success_metrics', dp.success_metrics,
                'target_completion_date', dp.target_completion_date,
                'status', dp.status,
                'manager_feedback', dp.manager_feedback,
                'manager_rating', dp.manager_rating,
                'submission_date', dp.submission_date,
                'review_date', dp.review_date,
                'created_at', dp.created_at,
                'updated_at', dp.updated_at
            ) ORDER BY dp.created_at DESC
        ) INTO result
        FROM development_plans dp
        JOIN employees e ON dp.employee_id = e.id
        LEFT JOIN employees m ON dp.manager_id = m.id
        WHERE dp.manager_id = v_current_employee_id 
        AND dp.status IN ('submitted', 'under_review');
    END IF;
    
    RETURN COALESCE(result, '[]'::json);
END;
$$;


--
-- Name: get_employee_departments(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employee_departments(p_employee_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN (
        SELECT json_agg(
            json_build_object(
                'id', d.id,
                'name', d.name,
                'description', d.description
            )
        )
        FROM employee_departments ed
        JOIN departments d ON ed.department_id = d.id
        WHERE ed.employee_id = p_employee_id
    );
END;
$$;


--
-- Name: get_employee_notes(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employee_notes(p_employee_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    result JSON;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Verify the employee belongs to this manager or user is admin
    IF NOT EXISTS (
        SELECT 1 FROM employees e
        WHERE e.id = p_employee_id
        AND (e.manager_id = v_current_employee_id OR 
             EXISTS (SELECT 1 FROM employees WHERE id = v_current_employee_id AND role = 'admin'))
    ) THEN
        RETURN json_build_object('error', 'Unauthorized: You can only view notes for your direct reports');
    END IF;
    
    -- Get all notes for this employee by this manager
    SELECT json_agg(note_data) INTO result
    FROM (
        SELECT json_build_object(
            'id', mn.id,
            'title', mn.title,
            'content', mn.content,
            'category', mn.category,
            'priority', mn.priority,
            'created_at', mn.created_at,
            'updated_at', mn.updated_at,
            'employee_id', mn.employee_id,
            'employee_name', e.name
        ) as note_data
        FROM manager_notes mn
        JOIN employees e ON mn.employee_id = e.id
        WHERE mn.manager_id = v_current_employee_id
        AND mn.employee_id = p_employee_id
        ORDER BY mn.created_at DESC
    ) ordered_notes;
    
    RETURN COALESCE(result, '[]'::json);
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to get employee notes: %', SQLERRM;
END;
$$;


--
-- Name: get_employee_profile(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employee_profile() RETURNS TABLE(employee_id uuid, name text, email text, job_title text, manager_name text, created_at timestamp with time zone)
    LANGUAGE sql SECURITY DEFINER
    AS $$
    SELECT 
        e.id,
        e.name,
        e.email,
        e.job_title,
        m.name as manager_name,
        e.created_at
    FROM employees e
    LEFT JOIN employees m ON e.manager_id = m.id
    WHERE e.user_id = auth.uid();
$$;


--
-- Name: get_employee_with_departments(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employee_with_departments(p_employee_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    result JSON;
BEGIN
    -- Get current user's employee ID and role
    SELECT id, role INTO v_current_employee_id, v_employee_role
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Check if user is admin
    IF v_employee_role != 'admin' THEN
        RETURN json_build_object('error', 'Access denied: Admin privileges required');
    END IF;
    
    -- Get employee details with departments
    SELECT json_build_object(
        'employee', json_build_object(
            'id', e.id,
            'name', e.name,
            'email', e.email,
            'job_title', e.job_title,
            'role', e.role,
            'manager_id', e.manager_id,
            'is_active', e.is_active,
            'created_at', e.created_at,
            'updated_at', e.updated_at
        ),
        'departments', COALESCE(
            (SELECT json_agg(d.id)
             FROM employee_departments ed
             JOIN departments d ON ed.department_id = d.id
             WHERE ed.employee_id = e.id),
            '[]'::json
        ),
        'department_names', COALESCE(
            (SELECT json_agg(d.name)
             FROM employee_departments ed
             JOIN departments d ON ed.department_id = d.id
             WHERE ed.employee_id = e.id),
            '[]'::json
        )
    ) INTO result
    FROM employees e
    WHERE e.id = p_employee_id;
    
    IF result IS NULL THEN
        RETURN json_build_object('error', 'Employee not found');
    END IF;
    
    RETURN result;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to get employee details: ' || SQLERRM);
END;
$$;


--
-- Name: get_employees_for_feedback(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employees_for_feedback() RETURNS TABLE(employee_id uuid, name text, email text, job_title text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    current_emp_id UUID;
BEGIN
    -- Get current employee using existing pattern
    SELECT id INTO current_emp_id 
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    -- Fallback for development
    IF current_emp_id IS NULL THEN
        SELECT id INTO current_emp_id FROM employees WHERE is_active = true LIMIT 1;
    END IF;
    
    RETURN QUERY
    SELECT e.id, e.name, e.email, e.job_title
    FROM employees e
    WHERE e.is_active = true 
      AND e.id != COALESCE(current_emp_id, '00000000-0000-0000-0000-000000000000'::UUID)
    ORDER BY e.name;
END;
$$;


--
-- Name: get_employees_simple(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_employees_simple() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result JSON;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RAISE EXCEPTION 'Unauthorized: Admin access required';
    END IF;
    
    -- Simple query without complex joins to avoid GROUP BY issues
    SELECT json_agg(
        json_build_object(
            'id', id,
            'name', name,
            'email', email,
            'job_title', COALESCE(job_title, ''),
            'role', role,
            'manager_id', manager_id,
            'manager_name', '',  -- Will be populated by client if needed
            'is_active', is_active,
            'created_at', created_at,
            'updated_at', updated_at,
            'direct_reports_count', 0  -- Will be calculated by client if needed
        )
    ) INTO result
    FROM employees
    ORDER BY name;
    
    RETURN COALESCE(result, '[]'::json);
END;
$$;


--
-- Name: get_feedback_wall(integer, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_feedback_wall(p_limit integer DEFAULT 50, p_feedback_type text DEFAULT NULL::text) RETURNS TABLE(feedback_id bigint, giver_id uuid, giver_name text, recipient_id uuid, recipient_name text, feedback_type text, category text, message text, is_anonymous boolean, helpful_count integer, created_at timestamp with time zone, can_see_giver boolean)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    RETURN QUERY
    SELECT 
        pf.feedback_id,
        pf.giver_id,
        CASE WHEN pf.is_anonymous THEN 'Anonymous' ELSE giver.name END,
        pf.recipient_id,
        recipient.name,
        pf.feedback_type,
        pf.category,
        pf.message,
        pf.is_anonymous,
        pf.helpful_count,
        pf.created_at,
        NOT pf.is_anonymous
    FROM peer_feedback pf
    JOIN employees giver ON pf.giver_id = giver.id
    JOIN employees recipient ON pf.recipient_id = recipient.id
    WHERE (p_feedback_type IS NULL OR pf.feedback_type = p_feedback_type)
      AND giver.is_active = true
      AND recipient.is_active = true
    ORDER BY pf.created_at DESC
    LIMIT p_limit;
END;
$$;


--
-- Name: get_kudos_wall(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_kudos_wall() RETURNS TABLE(kudo_id bigint, giver_name text, recipient_name text, core_value text, message text, created_at timestamp with time zone)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT 
    k.id,
    giver.name,
    receiver.name,
    k.core_value,
    k.message,
    k.created_at
  FROM kudos k
  JOIN employees giver ON giver.id = k.giver_id
  JOIN employees receiver ON receiver.id = k.receiver_id
  WHERE giver.is_active = true AND receiver.is_active = true
  ORDER BY k.created_at DESC
  LIMIT 50;
$$;


--
-- Name: get_manager_employees(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_manager_employees() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    result JSON;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Check if user is manager or admin
    IF NOT EXISTS (
        SELECT 1 FROM employees 
        WHERE id = v_current_employee_id 
        AND role IN ('manager', 'admin')
    ) THEN
        RETURN '[]'::json;    END IF;
    
    -- Get all employees under this manager
    SELECT json_agg(employee_data) INTO result
    FROM (
        SELECT json_build_object(
            'employee_id', e.id,
            'name', e.name,
            'email', e.email,
            'job_title', COALESCE(e.job_title, ''),
            'role', e.role,
            'is_active', e.is_active,
            'notes_count', COALESCE(note_count.count, 0)
        ) as employee_data
        FROM employees e
        LEFT JOIN (
            SELECT employee_id, COUNT(*) as count
            FROM manager_notes
            WHERE manager_id = v_current_employee_id
            GROUP BY employee_id
        ) note_count ON e.id = note_count.employee_id
        WHERE e.manager_id = v_current_employee_id
        AND e.is_active = true
        ORDER BY e.name
    ) ordered_employees;
    
    RETURN COALESCE(result, '[]'::json);
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to get manager employees: %', SQLERRM;
END;
$$;


--
-- Name: get_my_assessments(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_assessments() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_active_assessments JSONB;
    v_recent_closed_assessments JSONB;
    v_final_result JSONB;
BEGIN
    -- Get the employee_id for the currently authenticated user
    SELECT id INTO v_current_employee_id FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "Employee not found for current user"}'::jsonb;
    END IF;

    -- First, get ACTIVE assessments (these should show first and be the main focus)
    SELECT COALESCE(jsonb_agg(assessment_data ORDER BY created_at_sort DESC), '[]'::jsonb) INTO v_active_assessments
    FROM (
        SELECT jsonb_build_object(
            'assessment_id', a.id,
            'review_cycle_name', rc.name,
            'review_cycle_status', rc.status,
            'self_assessment_status', a.self_assessment_status,
            'manager_review_status', a.manager_review_status,
            'employee_acknowledgment', COALESCE(a.employee_acknowledgment, false),
            'due_date', a.due_date,
            'created_at', a.created_at,
            'updated_at', a.updated_at,
            'can_edit_self_assessment', (
                rc.status = 'active' AND 
                a.self_assessment_status IN ('not_started', 'in_progress')
            ),
            'is_manager_view', false
        ) as assessment_data,
        a.created_at as created_at_sort
        FROM public.assessments a
        JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
        WHERE a.employee_id = v_current_employee_id 
        AND rc.status = 'active'  -- ONLY ACTIVE CYCLES
    ) active_data;

    -- If no active assessments, get the most recent closed ones (max 3) as fallback
    IF jsonb_array_length(v_active_assessments) = 0 THEN
        SELECT COALESCE(jsonb_agg(assessment_data ORDER BY created_at_sort DESC), '[]'::jsonb) INTO v_recent_closed_assessments
        FROM (
            SELECT jsonb_build_object(
                'assessment_id', a.id,
                'review_cycle_name', rc.name,
                'review_cycle_status', rc.status,
                'self_assessment_status', a.self_assessment_status,
                'manager_review_status', a.manager_review_status,
                'employee_acknowledgment', COALESCE(a.employee_acknowledgment, false),
                'due_date', a.due_date,
                'created_at', a.created_at,
                'updated_at', a.updated_at,
                'can_edit_self_assessment', false,  -- Never editable if cycle is closed
                'is_manager_view', false
            ) as assessment_data,
            a.created_at as created_at_sort
            FROM public.assessments a
            JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
            WHERE a.employee_id = v_current_employee_id 
            AND rc.status != 'active'  -- ONLY CLOSED CYCLES
            ORDER BY a.created_at DESC
            LIMIT 3  -- Maximum 3 recent closed assessments
        ) closed_data;
        
        RETURN v_recent_closed_assessments;
    END IF;

    -- Return active assessments (this is the normal case)
    RETURN v_active_assessments;
END;
$$;


--
-- Name: get_my_development_goals(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_development_goals() RETURNS TABLE(goal_id uuid, goal_type text, title text, description text, target_date date, status text, priority text, created_at timestamp with time zone, days_until_target integer)
    LANGUAGE sql SECURITY DEFINER
    AS $$
    SELECT 
        g.goal_id,
        g.goal_type,
        g.title,
        g.description,
        g.target_date,
        g.status,
        g.priority,
        g.created_at,
        CASE 
            WHEN g.target_date IS NOT NULL 
            THEN (g.target_date - CURRENT_DATE)::integer
            ELSE NULL
        END as days_until_target
    FROM employee_development_goals g
    WHERE g.employee_id = (SELECT id FROM employees WHERE user_id = auth.uid())
    ORDER BY g.created_at DESC;
$$;


--
-- Name: get_my_development_plans(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_development_plans() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    result JSON;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Get development plans for current employee
    SELECT json_agg(
        json_build_object(
            'id', dp.id,
            'goals', dp.goals,
            'objectives', dp.objectives,
            'skills_to_develop', dp.skills_to_develop,
            'resources_needed', dp.resources_needed,
            'success_metrics', dp.success_metrics,
            'target_completion_date', dp.target_completion_date,
            'status', dp.status,
            'manager_feedback', dp.manager_feedback,
            'manager_rating', dp.manager_rating,
            'submission_date', dp.submission_date,
            'review_date', dp.review_date,
            'created_at', dp.created_at,
            'updated_at', dp.updated_at,
            'manager_name', m.name
        ) ORDER BY dp.created_at DESC
    ) INTO result
    FROM development_plans dp
    LEFT JOIN employees m ON dp.manager_id = m.id
    WHERE dp.employee_id = v_current_employee_id;
    
    RETURN COALESCE(result, '[]'::json);
END;
$$;


--
-- Name: get_my_feedback_received(integer); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_feedback_received(p_limit integer DEFAULT 20) RETURNS TABLE(feedback_id bigint, giver_name text, feedback_type text, category text, message text, is_anonymous boolean, helpful_count integer, created_at timestamp with time zone)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    current_emp_id UUID;
BEGIN
    SELECT id INTO current_emp_id 
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF current_emp_id IS NULL THEN
        SELECT id INTO current_emp_id FROM employees WHERE is_active = true LIMIT 1;
    END IF;
    
    RETURN QUERY
    SELECT 
        pf.feedback_id,
        CASE WHEN pf.is_anonymous THEN 'Anonymous' ELSE giver.name END,
        pf.feedback_type,
        pf.category,
        pf.message,
        pf.is_anonymous,
        pf.helpful_count,
        pf.created_at
    FROM peer_feedback pf
    JOIN employees giver ON pf.giver_id = giver.id
    WHERE pf.recipient_id = current_emp_id
    ORDER BY pf.created_at DESC
    LIMIT p_limit;
END;
$$;


--
-- Name: get_my_name(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_name() RETURNS text
    LANGUAGE sql SECURITY DEFINER
    AS $$
  SELECT 
    CASE 
      WHEN auth.email() = 'admin@lucerne.com' THEN 'Admin'
      WHEN auth.email() = 'manager@lucerne.com' THEN 'Manager'
      WHEN auth.email() = 'employee1@lucerne.com' THEN 'Employee 1'
      -- For others, try to get from database with explicit query (no RLS issues with SECURITY DEFINER)
      ELSE COALESCE(
        (SELECT name FROM employees WHERE user_id = auth.uid() LIMIT 1),
        split_part(auth.email(), '@', 1)
      )
    END;
$$;


--
-- Name: get_my_role(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_role() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO 'public'
    AS $$
DECLARE
    user_role TEXT;
BEGIN
    -- Try to get role by user_id first
    SELECT role INTO user_role
    FROM employees 
    WHERE user_id = auth.uid() 
    AND is_active = true;
    
    -- Fallback - check by email
    IF user_role IS NULL AND auth.email() IS NOT NULL THEN
        SELECT role INTO user_role
        FROM employees 
        WHERE LOWER(email) = LOWER(auth.email())
        AND is_active = true;
    END IF;
    
    -- Return role or default to employee
    RETURN COALESCE(user_role, 'employee');
END;
$$;


--
-- Name: get_my_team(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_team() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_team JSONB;
BEGIN
    -- Get the employee_id for the currently authenticated user
    SELECT id INTO v_current_employee_id FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "Employee not found for current user"}'::jsonb;
    END IF;

    -- Get team members
    SELECT COALESCE(jsonb_agg(jsonb_build_object(
        'id', id,
        'name', name,
        'email', email,
        'job_title', job_title,
        'role', role,
        'is_active', is_active,
        'created_at', created_at
    ) ORDER BY name), '[]'::jsonb) INTO v_team
    FROM public.employees
    WHERE manager_id = v_current_employee_id AND is_active = true;

    RETURN v_team;
END;
$$;


--
-- Name: get_my_training_requests(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_my_training_requests() RETURNS TABLE(request_id uuid, request_type text, title text, description text, provider text, estimated_cost numeric, preferred_date date, business_justification text, status text, manager_notes text, created_at timestamp with time zone, days_since_request integer)
    LANGUAGE sql SECURITY DEFINER
    AS $$
    SELECT 
        tr.request_id,
        tr.request_type,
        tr.title,
        tr.description,
        tr.provider,
        tr.estimated_cost,
        tr.preferred_date,
        tr.business_justification,
        tr.status,
        tr.manager_notes,
        tr.created_at,
        (CURRENT_DATE - tr.created_at::date)::integer as days_since_request
    FROM training_requests tr
    WHERE tr.employee_id = (SELECT id FROM employees WHERE user_id = auth.uid())
    ORDER BY tr.created_at DESC;
$$;


--
-- Name: get_potential_managers(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_potential_managers() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result JSON;
    manager_count INTEGER;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RAISE EXCEPTION 'Unauthorized: Admin access required';
    END IF;
    
    -- Check if we have any potential managers
    SELECT COUNT(*) INTO manager_count
    FROM employees
    WHERE is_active = true 
    AND role IN ('manager', 'admin');
    
    -- If no managers, return empty array
    IF manager_count = 0 THEN
        RETURN '[]'::json;
    END IF;
    
    -- Build manager list (removed the problematic ORDER BY in json_agg)
    SELECT json_agg(manager_data) INTO result
    FROM (
        SELECT json_build_object(
            'id', id,
            'name', name,
            'email', email,
            'job_title', COALESCE(job_title, ''),
            'role', role
        ) as manager_data
        FROM employees
        WHERE is_active = true 
        AND role IN ('manager', 'admin')
        ORDER BY name
    ) ordered_managers;
    
    RETURN COALESCE(result, '[]'::json);
    
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to fetch potential managers: %', SQLERRM;
END;
$$;


--
-- Name: get_review_cycle_details(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_review_cycle_details(p_cycle_id bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_cycle_record review_cycles%ROWTYPE;
    v_result JSON;
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Get the review cycle
    SELECT * INTO v_cycle_record
    FROM review_cycles 
    WHERE id = p_cycle_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object('error', 'Review cycle not found');
    END IF;
    
    -- Build detailed response with assessment statistics
    SELECT json_build_object(
        'cycle_id', rc.id,
        'cycle_name', rc.name,
        'status', rc.status,
        'start_date', rc.start_date,
        'end_date', rc.end_date,
        'created_at', rc.created_at,
        'total_assessments', COUNT(a.id),
        'not_started', COUNT(CASE WHEN a.status = 'not_started' THEN 1 END),
        'in_progress', COUNT(CASE WHEN a.status = 'in_progress' THEN 1 END),
        'employee_complete', COUNT(CASE WHEN a.self_assessment_status = 'employee_complete' THEN 1 END),
        'manager_complete', COUNT(CASE WHEN a.self_assessment_status = 'manager_complete' THEN 1 END),
        'completed', COUNT(CASE WHEN a.status = 'completed' THEN 1 END),
        'closed', COUNT(CASE WHEN a.status = 'closed' THEN 1 END)
    ) INTO v_result
    FROM review_cycles rc
    LEFT JOIN assessments a ON rc.id = a.review_cycle_id
    WHERE rc.id = p_cycle_id
    GROUP BY rc.id, rc.name, rc.status, rc.start_date, rc.end_date, rc.created_at;
    
    RETURN v_result;
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to get review cycle details: ' || SQLERRM);
END;
$$;


--
-- Name: get_team_assessments(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_team_assessments() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_assessments JSONB;
BEGIN
    -- Get the employee_id for the currently authenticated user
    SELECT id INTO v_current_employee_id FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "Employee not found for current user"}'::jsonb;
    END IF;

    -- Get assessments for team members with all necessary data
    SELECT COALESCE(jsonb_agg(jsonb_build_object(
        'assessment_id', a.id,
        'employee_id', e.id,
        'employee_name', e.name,
        'employee_email', e.email,
        'employee_job_title', e.job_title,
        'cycle_id', rc.id,
        'cycle_name', rc.name,
        'cycle_status', rc.status,
        'self_assessment_status', a.self_assessment_status,
        'manager_review_status', a.manager_review_status,
        'employee_acknowledgment', COALESCE(a.employee_acknowledgment, false),
        'due_date', a.due_date,
        'created_at', a.created_at,
        'updated_at', a.updated_at
    ) ORDER BY a.created_at DESC), '[]'::jsonb) INTO v_assessments
    FROM public.assessments a
    JOIN public.employees e ON a.employee_id = e.id
    JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
    WHERE e.manager_id = v_current_employee_id;

    RETURN v_assessments;
END;
$$;


--
-- Name: get_team_status(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_team_status() RETURNS TABLE(employee_id uuid, employee_name text, job_title text, assessment_id bigint, assessment_status text)
    LANGUAGE sql SECURITY DEFINER
    AS $$
  WITH latest_cycle AS (
    SELECT id FROM public.review_cycles WHERE status = 'active' ORDER BY start_date DESC LIMIT 1
  )
  SELECT
    e.id,
    e.name,
    e.job_title,
    a.id,
    a.status
  FROM employees e
  LEFT JOIN assessments a ON e.id = a.employee_id AND a.review_cycle_id = (SELECT id FROM latest_cycle)
  WHERE e.manager_id = (SELECT id FROM employees WHERE user_id = auth.uid());
$$;


--
-- Name: get_unread_notification_count(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_unread_notification_count() RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_count INTEGER;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN 0;
    END IF;
    
    -- Count unread notifications
    SELECT COUNT(*) INTO v_count
    FROM notifications 
    WHERE recipient_id = v_current_employee_id 
    AND read_at IS NULL;
    
    RETURN COALESCE(v_count, 0);
END;
$$;


--
-- Name: get_user_notifications(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.get_user_notifications() RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    result JSON;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '[]'::json;
    END IF;
    
    -- Get notifications for current user
    SELECT json_agg(
        json_build_object(
            'id', n.id,
            'recipient_id', n.recipient_id,
            'sender_id', n.sender_id,
            'sender_name', COALESCE(sender.name, 'System'),
            'type', n.type,
            'title', n.title,
            'message', n.message,
            'data', COALESCE(n.data, '{}'::json),
            'read_at', n.read_at,
            'is_read', (n.read_at IS NOT NULL),
            'created_at', COALESCE(n.created_at, NOW()),
            'updated_at', COALESCE(n.updated_at, NOW())
        ) ORDER BY COALESCE(n.created_at, NOW()) DESC
    ) INTO result
    FROM notifications n
    LEFT JOIN employees sender ON n.sender_id = sender.id
    WHERE n.recipient_id = v_current_employee_id;
    
    RETURN COALESCE(result, '[]'::json);
END;
$$;


--
-- Name: give_kudo(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.give_kudo(p_receiver_id uuid, p_core_value text, p_comment text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  giver_id uuid;
BEGIN
  -- Get the giver's employee ID
  SELECT id INTO giver_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF giver_id IS NULL THEN
    RETURN json_build_object('error', 'Employee record not found');
  END IF;
  
  -- Check if receiver exists and is active
  IF NOT EXISTS(SELECT 1 FROM employees WHERE id = p_receiver_id AND is_active = true) THEN
    RETURN json_build_object('error', 'Recipient not found or inactive');
  END IF;
  
  -- Insert the kudo
  INSERT INTO kudos (giver_id, receiver_id, core_value, message)
  VALUES (giver_id, p_receiver_id, p_core_value, p_comment);
  
  RETURN json_build_object(
    'success', true,
    'message', 'Kudo sent successfully!'
  );
EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object('error', 'Failed to send kudo: ' || SQLERRM);
END;
$$;


--
-- Name: give_peer_feedback(uuid, text, text, text, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.give_peer_feedback(p_recipient_id uuid, p_feedback_type text, p_message text, p_category text DEFAULT 'general'::text, p_is_anonymous boolean DEFAULT false) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    current_emp_id UUID;
    v_feedback_id BIGINT;
BEGIN
    -- Get current employee
    SELECT id INTO current_emp_id 
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    -- Fallback for development
    IF current_emp_id IS NULL THEN
        SELECT id INTO current_emp_id FROM employees WHERE is_active = true LIMIT 1;
    END IF;
    
    -- Basic validation
    IF current_emp_id = p_recipient_id THEN
        RAISE EXCEPTION 'Cannot give feedback to yourself';
    END IF;
    
    -- Insert feedback
    INSERT INTO peer_feedback (
        giver_id, recipient_id, feedback_type, category, message, is_anonymous
    ) VALUES (
        current_emp_id, p_recipient_id, p_feedback_type, p_category, p_message, p_is_anonymous
    ) RETURNING feedback_id INTO v_feedback_id;
    
    RETURN v_feedback_id;
END;
$$;


--
-- Name: link_auth_user_to_employee(uuid, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.link_auth_user_to_employee(p_employee_id uuid, p_auth_user_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('success', false, 'error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Update employee record with auth user ID
    UPDATE employees 
    SET user_id = p_auth_user_id, updated_at = NOW()
    WHERE id = p_employee_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object('success', false, 'error', 'Employee not found');
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Employee linked to auth user successfully'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('success', false, 'error', 'Failed to link employee: ' || SQLERRM);
END;
$$;


--
-- Name: link_current_user_to_employee(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.link_current_user_to_employee() RETURNS text
    LANGUAGE sql SECURITY DEFINER
    AS $$
  UPDATE employees 
  SET user_id = auth.uid()
  WHERE email = auth.email() AND user_id IS NULL;
  
  SELECT 'User linked successfully' as result;
$$;


--
-- Name: link_employee_to_auth_user(uuid, uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.link_employee_to_auth_user(p_employee_id uuid, p_auth_user_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Update employee record with auth user ID
    UPDATE employees 
    SET user_id = p_auth_user_id, updated_at = NOW()
    WHERE id = p_employee_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object('error', 'Employee not found');
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Employee linked to auth user successfully'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to link employee: ' || SQLERRM);
END;
$$;


--
-- Name: log_security_event(text, text, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.log_security_event(p_action text, p_resource text DEFAULT NULL::text, p_success boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_id UUID;
BEGIN
    -- Get employee ID for current user
    SELECT id INTO v_employee_id
    FROM employees 
    WHERE user_id = auth.uid() OR (auth.email() IS NOT NULL AND LOWER(email) = LOWER(auth.email()));
    
    -- Insert audit record
    INSERT INTO security_audit (user_id, employee_id, action, resource, success)
    VALUES (auth.uid(), v_employee_id, p_action, p_resource, p_success);
EXCEPTION
    WHEN OTHERS THEN
        -- Don't fail if audit logging fails
        NULL;
END;
$$;


--
-- Name: mark_feedback_helpful(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.mark_feedback_helpful(p_feedback_id bigint) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    UPDATE peer_feedback 
    SET helpful_count = helpful_count + 1,
        updated_at = NOW()
    WHERE feedback_id = p_feedback_id;
    RETURN FOUND;
END;
$$;


--
-- Name: mark_notification_read(uuid); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.mark_notification_read(p_notification_id uuid) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_affected_rows INTEGER;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Update notification read status
    UPDATE notifications 
    SET 
        read_at = NOW(),
        updated_at = NOW()
    WHERE id = p_notification_id 
    AND recipient_id = v_current_employee_id
    AND read_at IS NULL;
    
    GET DIAGNOSTICS v_affected_rows = ROW_COUNT;
    
    IF v_affected_rows = 0 THEN
        RETURN json_build_object('error', 'Notification not found or already read');
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Notification marked as read',
        'notification_id', p_notification_id
    );
END;
$$;


--
-- Name: notify_employee_manager_review_completed(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.notify_employee_manager_review_completed() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_name TEXT;
    v_manager_name TEXT;
    v_cycle_name TEXT;
BEGIN
    -- Only trigger when manager review status changes to completed
    IF NEW.manager_review_status = 'completed' AND 
       (OLD.manager_review_status IS NULL OR OLD.manager_review_status != 'completed') THEN
        
        -- Get employee and manager info
        SELECT e.name INTO v_employee_name
        FROM employees e
        WHERE e.id = NEW.employee_id;
        
        SELECT m.name INTO v_manager_name
        FROM employees e
        JOIN employees m ON e.manager_id = m.id
        WHERE e.id = NEW.employee_id;
        
        -- Get cycle name
        SELECT rc.name INTO v_cycle_name
        FROM review_cycles rc
        WHERE rc.id = NEW.review_cycle_id;
        
        -- Create notification for employee
        PERFORM create_notification(
            NEW.employee_id,
            (SELECT manager_id FROM employees WHERE id = NEW.employee_id),
            'manager_review_completed',
            'Your Manager Review is Complete',
            v_manager_name || ' has completed your performance review for ' || v_cycle_name || '. You can now view their feedback.',
            json_build_object(
                'assessment_id', NEW.id,
                'employee_id', NEW.employee_id,
                'cycle_id', NEW.review_cycle_id,
                'manager_name', v_manager_name,
                'cycle_name', v_cycle_name
            )
        );
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: notify_manager_assessment_submitted(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.notify_manager_assessment_submitted() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_manager_id UUID;
    v_employee_name TEXT;
    v_cycle_name TEXT;
BEGIN
    -- Only trigger when status changes to submitted
    IF NEW.self_assessment_status = 'submitted' AND 
       (OLD.self_assessment_status IS NULL OR OLD.self_assessment_status != 'submitted') THEN
        
        -- Get manager and employee info
        SELECT e.manager_id, e.name INTO v_manager_id, v_employee_name
        FROM employees e
        WHERE e.id = NEW.employee_id;
        
        -- Get cycle name
        SELECT rc.name INTO v_cycle_name
        FROM review_cycles rc
        WHERE rc.id = NEW.review_cycle_id;
        
        -- Create notification for manager
        IF v_manager_id IS NOT NULL THEN
            PERFORM create_notification(
                v_manager_id,
                NEW.employee_id,
                'assessment_submitted',
                'Employee Assessment Ready for Review',
                v_employee_name || ' has completed their self-assessment for ' || v_cycle_name || ' and is ready for your review.',
                json_build_object(
                    'assessment_id', NEW.id,
                    'employee_id', NEW.employee_id,
                    'cycle_id', NEW.review_cycle_id,
                    'employee_name', v_employee_name,
                    'cycle_name', v_cycle_name
                )
            );
        END IF;
    END IF;
    
    RETURN NEW;
END;
$$;


--
-- Name: review_development_plan(uuid, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.review_development_plan(p_plan_id uuid, p_status text, p_manager_feedback text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    v_employee_id UUID;
    v_employee_name TEXT;
    v_plan_title TEXT;
BEGIN
    -- Get current user's employee ID and role
    SELECT id, role INTO v_current_employee_id, v_employee_role
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Check if user is manager or admin
    IF v_employee_role NOT IN ('manager', 'admin') THEN
        RETURN json_build_object('error', 'Access denied: Manager privileges required');
    END IF;
    
    -- Validate status
    IF p_status NOT IN ('approved', 'needs_revision', 'under_review') THEN
        RETURN json_build_object('error', 'Invalid status. Must be: approved, needs_revision, or under_review');
    END IF;
    
    -- Get plan details and verify access - FIXED: Separate the SELECT statements
    SELECT dp.employee_id, dp.title INTO v_employee_id, v_plan_title
    FROM development_plans dp
    JOIN employees e ON dp.employee_id = e.id
    WHERE dp.id = p_plan_id
    AND (e.manager_id = v_current_employee_id OR v_employee_role = 'admin')
    AND e.is_active = true;
    
    IF v_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Development plan not found or access denied');
    END IF;
    
    -- Get employee name
    SELECT name INTO v_employee_name FROM employees WHERE id = v_employee_id;
    
    -- Update the development plan
    UPDATE development_plans 
    SET 
        status = p_status,
        manager_feedback = TRIM(p_manager_feedback),
        manager_reviewed_at = NOW(),
        manager_reviewed_by = v_current_employee_id,
        updated_at = NOW()
    WHERE id = p_plan_id;
    
    -- Create notification for employee (if create_notification function exists)
    BEGIN
        PERFORM create_notification(
            v_employee_id,
            v_current_employee_id,
            'development_plan_reviewed',
            'Development Plan Review Complete',
            'Your development plan "' || v_plan_title || '" has been reviewed with status: ' || p_status,
            json_build_object(
                'plan_id', p_plan_id,
                'plan_title', v_plan_title,
                'status', p_status,
                'has_feedback', (p_manager_feedback IS NOT NULL AND TRIM(p_manager_feedback) != '')
            )
        );
    EXCEPTION
        WHEN undefined_function THEN
            -- Ignore if notification function doesn't exist
            NULL;
    END;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Development plan reviewed successfully',
        'plan_id', p_plan_id,
        'status', p_status,
        'employee_name', v_employee_name
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to review development plan: ' || SQLERRM);
END;
$$;


--
-- Name: review_development_plan(uuid, text, text, integer, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.review_development_plan(p_plan_id uuid, p_status text, p_feedback text DEFAULT NULL::text, p_rating integer DEFAULT NULL::integer, _csrf_token text DEFAULT NULL::text, _nonce text DEFAULT NULL::text, _timestamp text DEFAULT NULL::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    v_plan_record development_plans%ROWTYPE;
    v_employee_name TEXT;
BEGIN
    -- Get current user's employee ID and role
    SELECT e.id, e.role INTO v_current_employee_id, v_employee_role
    FROM employees e 
    WHERE e.user_id = auth.uid() AND e.is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Get development plan record - FIXED: Use separate SELECT statement
    SELECT * INTO v_plan_record
    FROM development_plans 
    WHERE id = p_plan_id;
    
    IF v_plan_record.id IS NULL THEN
        RETURN json_build_object('error', 'Development plan not found');
    END IF;
    
    -- Check permissions
    IF v_employee_role != 'admin' AND v_plan_record.manager_id != v_current_employee_id THEN
        RETURN json_build_object('error', 'Access denied: You can only review plans for your direct reports');
    END IF;
    
    -- Validate status
    IF p_status NOT IN ('approved', 'rejected', 'under_review') THEN
        RETURN json_build_object('error', 'Invalid status. Must be: approved, rejected, or under_review');
    END IF;
    
    -- Update development plan
    UPDATE development_plans 
    SET 
        status = p_status,
        manager_feedback = p_feedback,
        manager_rating = p_rating,
        review_date = NOW(),
        updated_at = NOW()
    WHERE id = p_plan_id;
    
    -- Get employee name for notification - FIXED: Use separate SELECT statement
    SELECT name INTO v_employee_name
    FROM employees 
    WHERE id = v_plan_record.employee_id;
    
    -- Create notification for employee
    BEGIN
        PERFORM create_notification(
            v_plan_record.employee_id,
            v_current_employee_id,
            'development_plan_reviewed',
            'Development Plan ' || INITCAP(p_status),
            'Your development plan has been ' || p_status || 
            CASE WHEN p_feedback IS NOT NULL THEN '. Manager feedback: ' || p_feedback ELSE '.' END
        );
    EXCEPTION
        WHEN undefined_function THEN
            NULL; -- Ignore if notification function doesn't exist
    END;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Development plan reviewed successfully',
        'plan_id', p_plan_id,
        'status', p_status
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to review development plan: ' || SQLERRM);
END;
$$;


--
-- Name: save_manager_note(uuid, text, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.save_manager_note(p_employee_id uuid, p_title text, p_content text, p_category text DEFAULT 'general'::text, p_priority text DEFAULT 'medium'::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_note_id UUID;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Verify the employee belongs to this manager or user is admin
    IF NOT EXISTS (
        SELECT 1 FROM employees e
        WHERE e.id = p_employee_id
        AND (e.manager_id = v_current_employee_id OR 
             EXISTS (SELECT 1 FROM employees WHERE id = v_current_employee_id AND role = 'admin'))
    ) THEN
        RETURN json_build_object('error', 'Unauthorized: You can only add notes for your direct reports');
    END IF;
    
    -- Validate inputs
    IF p_title IS NULL OR TRIM(p_title) = '' THEN
        RETURN json_build_object('error', 'Note title is required');
    END IF;
    
    IF p_content IS NULL OR TRIM(p_content) = '' THEN
        RETURN json_build_object('error', 'Note content is required');
    END IF;
    
    IF p_category NOT IN ('general', 'performance', 'development', 'personal', 'goals') THEN
        RETURN json_build_object('error', 'Invalid category');
    END IF;
    
    IF p_priority NOT IN ('low', 'medium', 'high', 'urgent') THEN
        RETURN json_build_object('error', 'Invalid priority');
    END IF;
    
    -- Insert the note
    INSERT INTO manager_notes (
        manager_id,
        employee_id,
        title,
        content,
        category,
        priority,
        created_at,
        updated_at
    ) VALUES (
        v_current_employee_id,
        p_employee_id,
        TRIM(p_title),
        TRIM(p_content),
        p_category,
        p_priority,
        NOW(),
        NOW()
    ) RETURNING id INTO v_note_id;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Note saved successfully',
        'note_id', v_note_id
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to save note: ' || SQLERRM);
END;
$$;


--
-- Name: set_employee_departments(uuid, integer[]); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.set_employee_departments(p_employee_id uuid, p_department_ids integer[]) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_employee_role TEXT;
    dept_id INTEGER;
BEGIN
    -- Get current user's employee ID and role
    SELECT id, role INTO v_current_employee_id, v_employee_role
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Check if user is admin
    IF v_employee_role != 'admin' THEN
        RETURN json_build_object('error', 'Access denied: Admin privileges required');
    END IF;
    
    -- Remove existing department associations
    DELETE FROM employee_departments WHERE employee_id = p_employee_id;
    
    -- Add new department associations
    IF p_department_ids IS NOT NULL THEN
        FOREACH dept_id IN ARRAY p_department_ids
        LOOP
            INSERT INTO employee_departments (employee_id, department_id)
            VALUES (p_employee_id, dept_id)
            ON CONFLICT (employee_id, department_id) DO NOTHING;
        END LOOP;
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Employee departments updated successfully'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to update employee departments: ' || SQLERRM);
END;
$$;


--
-- Name: start_review_cycle_for_my_team(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.start_review_cycle_for_my_team(cycle_id_to_start bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  manager_employee_id UUID;
  cycle_exists BOOLEAN;
  assessments_created INTEGER := 0;
BEGIN
  -- Get the manager's employee ID
  SELECT id INTO manager_employee_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF manager_employee_id IS NULL THEN
    RETURN json_build_object('error', 'Manager not found');
  END IF;
  
  -- Check if cycle exists and is active
  SELECT EXISTS(
    SELECT 1 FROM review_cycles 
    WHERE id = cycle_id_to_start AND status = 'active'
  ) INTO cycle_exists;
  
  IF NOT cycle_exists THEN
    RETURN json_build_object('error', 'Review cycle not found or not active');
  END IF;
  
  -- Create assessments for all direct reports
  INSERT INTO assessments (employee_id, review_cycle_id, status)
  SELECT e.id, cycle_id_to_start, 'not_started'
  FROM employees e
  WHERE e.manager_id = manager_employee_id 
    AND e.is_active = true
    AND NOT EXISTS (
      SELECT 1 FROM assessments a 
      WHERE a.employee_id = e.id AND a.review_cycle_id = cycle_id_to_start
    );
  
  GET DIAGNOSTICS assessments_created = ROW_COUNT;
  
  RETURN json_build_object(
    'success', true,
    'message', 'Review cycle started successfully',
    'assessments_created', assessments_created
  );
END;
$$;


--
-- Name: submit_development_plan(text, text, jsonb, jsonb, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_development_plan(p_title text, p_description text, p_goals jsonb, p_skills_to_develop jsonb, p_timeline text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_manager_id UUID;
    v_plan_id UUID;
    v_employee_name TEXT;
BEGIN
    -- Get current user's employee ID
    SELECT id, manager_id, name INTO v_current_employee_id, v_manager_id, v_employee_name
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Insert development plan
    INSERT INTO development_plans (
        employee_id,
        title,
        description,
        goals,
        skills_to_develop,
        timeline,
        status,
        created_at,
        updated_at
    ) VALUES (
        v_current_employee_id,
        p_title,
        p_description,
        p_goals,
        p_skills_to_develop,
        p_timeline,
        'submitted',
        NOW(),
        NOW()
    ) RETURNING id INTO v_plan_id;
    
    -- Notify manager if exists
    IF v_manager_id IS NOT NULL THEN
        PERFORM create_notification(
            v_manager_id,
            v_current_employee_id,
            'development_plan_submitted',
            'Development Plan Submitted for Review',
            v_employee_name || ' has submitted a new development plan titled "' || p_title || '" for your review.',
            json_build_object(
                'plan_id', v_plan_id,
                'employee_id', v_current_employee_id,
                'employee_name', v_employee_name,
                'plan_title', p_title
            )
        );
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Development plan submitted successfully',
        'plan_id', v_plan_id
    );
END;
$$;


--
-- Name: submit_development_plan(text, text, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_development_plan(p_title text, p_description text DEFAULT ''::text, p_goals text DEFAULT '[]'::text, p_skills_to_develop text DEFAULT '[]'::text, p_timeline text DEFAULT ''::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_plan_id UUID;
    v_manager_id UUID;
BEGIN
    -- Get current user's employee ID
    SELECT id, manager_id INTO v_current_employee_id, v_manager_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Validate required fields
    IF TRIM(p_title) = '' THEN
        RETURN json_build_object('error', 'Plan title is required');
    END IF;
    
    -- Insert development plan
    INSERT INTO development_plans (
        employee_id,
        title,
        description,
        goals,
        skills_to_develop,
        timeline,
        status,
        created_at,
        updated_at
    ) VALUES (
        v_current_employee_id,
        TRIM(p_title),
        TRIM(p_description),
        p_goals::TEXT,
        p_skills_to_develop::TEXT,
        TRIM(p_timeline),
        'submitted',
        NOW(),
        NOW()
    ) RETURNING id INTO v_plan_id;
    
    -- Create notification for manager (if create_notification function exists and manager exists)
    IF v_manager_id IS NOT NULL THEN
        BEGIN
            PERFORM create_notification(
                v_manager_id,
                v_current_employee_id,
                'development_plan_submitted',
                'New Development Plan Submitted',
                'A team member has submitted a development plan for your review: ' || TRIM(p_title),
                json_build_object(
                    'plan_id', v_plan_id,
                    'plan_title', TRIM(p_title)
                )
            );
        EXCEPTION
            WHEN undefined_function THEN
                -- Ignore if notification function doesn't exist
                NULL;
        END;
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Development plan submitted successfully',
        'plan_id', v_plan_id
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to submit development plan: ' || SQLERRM);
END;
$$;


--
-- Name: submit_development_plan(text, text, text, text, text, date, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_development_plan(p_goals text, p_objectives text DEFAULT NULL::text, p_skills_to_develop text DEFAULT NULL::text, p_resources_needed text DEFAULT NULL::text, p_success_metrics text DEFAULT NULL::text, p_target_completion_date date DEFAULT NULL::date, _csrf_token text DEFAULT NULL::text, _nonce text DEFAULT NULL::text, _timestamp text DEFAULT NULL::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_manager_id UUID;
    v_plan_id UUID;
BEGIN
    -- Get current user's employee ID and manager
    SELECT e.id, e.manager_id INTO v_current_employee_id, v_manager_id
    FROM employees e 
    WHERE e.user_id = auth.uid() AND e.is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Insert development plan
    INSERT INTO development_plans (
        employee_id,
        manager_id,
        goals,
        objectives,
        skills_to_develop,
        resources_needed,
        success_metrics,
        target_completion_date,
        status,
        submission_date,
        created_at,
        updated_at
    ) VALUES (
        v_current_employee_id,
        v_manager_id,
        p_goals,
        p_objectives,
        p_skills_to_develop,
        p_resources_needed,
        p_success_metrics,
        p_target_completion_date,
        'submitted',
        NOW(),
        NOW(),
        NOW()
    ) RETURNING id INTO v_plan_id;
    
    -- Create notification for manager if exists
    IF v_manager_id IS NOT NULL THEN
        BEGIN
            PERFORM create_notification(
                v_manager_id,
                v_current_employee_id,
                'development_plan_submitted',
                'New Development Plan Submitted',
                'A team member has submitted a development plan for your review.'
            );
        EXCEPTION
            WHEN undefined_function THEN
                NULL; -- Ignore if notification function doesn't exist
        END;
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Development plan submitted successfully',
        'plan_id', v_plan_id
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to submit development plan: ' || SQLERRM);
END;
$$;


--
-- Name: submit_manager_review(bigint, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_manager_review(p_assessment_id bigint, p_feedback jsonb) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_user_role TEXT;
    v_assessment_employee_id UUID;
    v_can_review BOOLEAN := false;
BEGIN
    -- Get current user's role and employee ID
    SELECT id, role INTO v_current_employee_id, v_user_role 
    FROM public.employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "User not found or inactive"}'::jsonb;
    END IF;

    -- Get the assessment's employee to verify permissions
    SELECT employee_id INTO v_assessment_employee_id 
    FROM public.assessments 
    WHERE id = p_assessment_id;
    
    IF v_assessment_employee_id IS NULL THEN
        RETURN '{"error": "Assessment not found"}'::jsonb;
    END IF;

    -- Check permissions: User must be an admin or the employee's manager
    IF v_user_role = 'admin' THEN
        v_can_review := true;
    ELSIF v_user_role = 'manager' THEN
        SELECT COUNT(*) > 0 INTO v_can_review 
        FROM public.employees 
        WHERE id = v_assessment_employee_id AND manager_id = v_current_employee_id;
    END IF;

    IF NOT v_can_review THEN
        RETURN '{"error": "Permission denied to review this assessment"}'::jsonb;
    END IF;

    -- ATOMIC UPDATE: All manager feedback fields and status in one transaction
    UPDATE public.assessments
    SET
        -- Overall Performance & Summary Fields
        manager_performance_rating = COALESCE((p_feedback->>'manager_performance_rating'), manager_performance_rating),
        manager_summary_comments = COALESCE((p_feedback->>'manager_summary_comments'), manager_summary_comments),
        manager_core_values_feedback = COALESCE((p_feedback->>'manager_core_values_feedback'), manager_core_values_feedback),
        manager_development_plan = COALESCE((p_feedback->>'manager_development_plan'), manager_development_plan),
        manager_action_items = COALESCE((p_feedback->>'manager_action_items'), manager_action_items),
        
        -- Detailed Two-Column Feedback Fields
        manager_passionate_feedback = COALESCE((p_feedback->>'manager_passionate_feedback'), manager_passionate_feedback),
        manager_driven_feedback = COALESCE((p_feedback->>'manager_driven_feedback'), manager_driven_feedback),
        manager_resilient_feedback = COALESCE((p_feedback->>'manager_resilient_feedback'), manager_resilient_feedback),
        manager_responsive_feedback = COALESCE((p_feedback->>'manager_responsive_feedback'), manager_responsive_feedback),
        manager_gwc_gets_it_feedback = COALESCE((p_feedback->>'manager_gwc_gets_it_feedback'), manager_gwc_gets_it_feedback),
        manager_gwc_wants_it_feedback = COALESCE((p_feedback->>'manager_gwc_wants_it_feedback'), manager_gwc_wants_it_feedback),
        manager_gwc_capacity_feedback = COALESCE((p_feedback->>'manager_gwc_capacity_feedback'), manager_gwc_capacity_feedback),
        manager_strengths_feedback = COALESCE((p_feedback->>'manager_strengths_feedback'), manager_strengths_feedback),
        manager_improvements_feedback = COALESCE((p_feedback->>'manager_improvements_feedback'), manager_improvements_feedback),
        
        -- Update status and timestamp
        manager_review_status = 'completed',
        updated_at = NOW()
    WHERE id = p_assessment_id;

    -- Verify the update was successful
    IF NOT FOUND THEN
        RETURN '{"error": "Failed to update assessment"}'::jsonb;
    END IF;

    RETURN '{"success": true, "message": "Manager review submitted successfully"}'::jsonb;
END;
$$;


--
-- Name: submit_self_assessment(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_self_assessment(p_assessment_id bigint) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  user_employee_id uuid;
  assessment_employee_id uuid;
  required_fields_complete boolean;
BEGIN
  -- Get current user's employee ID
  SELECT id INTO user_employee_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF user_employee_id IS NULL THEN
    RETURN json_build_object('error', 'Employee record not found');
  END IF;
  
  -- Verify this is the employee's own assessment
  SELECT employee_id INTO assessment_employee_id
  FROM assessments 
  WHERE id = p_assessment_id;
  
  IF assessment_employee_id != user_employee_id THEN
    RETURN json_build_object('error', 'Can only submit your own assessment');
  END IF;
  
  -- Check if required fields are completed
  SELECT (
    employee_strengths IS NOT NULL AND employee_strengths != '' AND
    employee_improvements IS NOT NULL AND employee_improvements != '' AND
    value_passionate_examples IS NOT NULL AND value_passionate_examples != '' AND
    value_driven_examples IS NOT NULL AND value_driven_examples != '' AND
    value_resilient_examples IS NOT NULL AND value_resilient_examples != '' AND
    value_responsive_examples IS NOT NULL AND value_responsive_examples != ''
  )
  INTO required_fields_complete
  FROM assessments 
  WHERE id = p_assessment_id;
  
  IF NOT required_fields_complete THEN
    RETURN json_build_object('error', 'Please complete all required sections before submitting');
  END IF;
  
  -- Update status and timestamp
  UPDATE assessments 
  SET 
    self_assessment_status = 'employee_complete',
    employee_submitted_at = now()
  WHERE id = p_assessment_id;
  
  RETURN json_build_object(
    'success', true, 
    'message', 'Self-assessment submitted successfully! Your manager has been notified.'
  );
EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object('error', 'Submission failed: ' || SQLERRM);
END;
$$;


--
-- Name: submit_training_request(text, text, text, text, numeric, date, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.submit_training_request(p_request_type text, p_title text, p_description text DEFAULT NULL::text, p_provider text DEFAULT NULL::text, p_estimated_cost numeric DEFAULT NULL::numeric, p_preferred_date date DEFAULT NULL::date, p_business_justification text DEFAULT ''::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_employee_id uuid;
    result_request_id uuid;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO user_employee_id 
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF user_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Validate required fields
    IF p_title IS NULL OR p_title = '' THEN
        RETURN json_build_object('error', 'Training title is required');
    END IF;
    
    IF p_business_justification IS NULL OR p_business_justification = '' THEN
        RETURN json_build_object('error', 'Business justification is required');
    END IF;
    
    -- Insert training request
    INSERT INTO training_requests (
        employee_id, request_type, title, description, provider, 
        estimated_cost, preferred_date, business_justification, status
    ) VALUES (
        user_employee_id, p_request_type, p_title, p_description, p_provider,
        p_estimated_cost, p_preferred_date, p_business_justification, 'requested'
    ) RETURNING request_id INTO result_request_id;
    
    RETURN json_build_object(
        'success', true,
        'request_id', result_request_id,
        'message', 'Training request submitted successfully'
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Submission failed: ' || SQLERRM);
END;
$$;


--
-- Name: test_get_assessment_details(bigint); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.test_get_assessment_details(p_assessment_id bigint) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_assessment JSONB;
BEGIN
    -- Get full assessment details WITHOUT authentication (for testing)
    SELECT jsonb_agg(assessment_data) INTO v_assessment
    FROM (
        SELECT jsonb_build_object(
            'assessment_id', a.id,
            'employee_id', a.employee_id,
            'employee_name', e.name,
            'employee_email', e.email,
            'employee_job_title', e.job_title,
            'review_cycle_id', rc.id,
            'review_cycle_name', rc.name,
            'review_cycle_status', rc.status,
            'self_assessment_status', a.self_assessment_status,
            'manager_review_status', a.manager_review_status,
            'employee_acknowledgment', COALESCE(a.employee_acknowledgment, false),
            'due_date', a.due_date,
            'created_at', a.created_at,
            'updated_at', a.updated_at,
            
            -- Employee Self-Assessment Data
            'employee_strengths', a.employee_strengths,
            'employee_improvements', a.employee_improvements,
            'value_passionate_examples', a.value_passionate_examples,
            'value_driven_examples', a.value_driven_examples,
            'value_resilient_examples', a.value_resilient_examples,
            'value_responsive_examples', a.value_responsive_examples,
            'gwc_gets_it', COALESCE(a.gwc_gets_it, false),
            'gwc_gets_it_feedback', a.gwc_gets_it_feedback,
            'gwc_wants_it', COALESCE(a.gwc_wants_it, false),
            'gwc_wants_it_feedback', a.gwc_wants_it_feedback,
            'gwc_capacity', COALESCE(a.gwc_capacity, false),
            'gwc_capacity_feedback', a.gwc_capacity_feedback,

            -- Manager Review Data
            'manager_performance_rating', a.manager_performance_rating,
            'manager_summary_comments', a.manager_summary_comments,
            'manager_core_values_feedback', a.manager_core_values_feedback,
            'manager_development_plan', a.manager_development_plan,
            'manager_action_items', a.manager_action_items,

            -- Permission flags (set as true for testing)
            'can_edit_self_assessment', true,
            'can_edit_manager_review', true,
            'is_manager_view', false,

            -- Rocks data (placeholder)
            'rocks', '[]'::jsonb
        ) as assessment_data
        FROM public.assessments a
        JOIN public.employees e ON a.employee_id = e.id
        JOIN public.review_cycles rc ON a.review_cycle_id = rc.id
        WHERE a.id = p_assessment_id
    ) assessment_query;

    -- Return the assessment array
    RETURN COALESCE(v_assessment, '[]'::jsonb);
END;
$$;


--
-- Name: update_assessment(bigint, jsonb); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_assessment(p_assessment_id bigint, p_updates jsonb) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
    v_user_role TEXT;
    v_assessment_employee_id UUID;
    v_can_update BOOLEAN := false;
BEGIN
    -- Get the employee_id and role for the currently authenticated user
    SELECT id, role INTO v_current_employee_id, v_user_role FROM public.employees WHERE user_id = auth.uid() AND is_active = true;

    IF v_current_employee_id IS NULL THEN
        RETURN '{"error": "Employee not found for current user"}'::jsonb;
    END IF;

    -- Get the assessment's employee_id to check permissions
    SELECT a.employee_id INTO v_assessment_employee_id 
    FROM public.assessments a
    JOIN public.employees e ON a.employee_id = e.id
    WHERE a.id = p_assessment_id;

    IF v_assessment_employee_id IS NULL THEN
        RETURN '{"error": "Assessment not found"}'::jsonb;
    END IF;

    -- Check update permissions
    IF v_user_role = 'admin' THEN
        v_can_update := true;
    ELSIF v_assessment_employee_id = v_current_employee_id THEN
        -- Employee can update their own assessment
        v_can_update := true;
    ELSIF v_user_role = 'manager' THEN
        -- Manager can update assessments of their direct reports
        SELECT COUNT(*) > 0 INTO v_can_update
        FROM public.employees e
        WHERE e.id = v_assessment_employee_id AND e.manager_id = v_current_employee_id;
    END IF;

    IF NOT v_can_update THEN
        RETURN '{"error": "Permission denied to update this assessment"}'::jsonb;
    END IF;

    -- Build dynamic update query based on provided fields
    UPDATE public.assessments SET
        -- Employee fields
        employee_strengths = COALESCE((p_updates->>'employee_strengths'), employee_strengths),
        employee_improvements = COALESCE((p_updates->>'employee_improvements'), employee_improvements),
        value_passionate_examples = COALESCE((p_updates->>'value_passionate_examples'), value_passionate_examples),
        value_driven_examples = COALESCE((p_updates->>'value_driven_examples'), value_driven_examples),
        value_resilient_examples = COALESCE((p_updates->>'value_resilient_examples'), value_resilient_examples),
        value_responsive_examples = COALESCE((p_updates->>'value_responsive_examples'), value_responsive_examples),
        gwc_gets_it = COALESCE((p_updates->>'gwc_gets_it')::boolean, gwc_gets_it),
        gwc_gets_it_feedback = COALESCE((p_updates->>'gwc_gets_it_feedback'), gwc_gets_it_feedback),
        gwc_wants_it = COALESCE((p_updates->>'gwc_wants_it')::boolean, gwc_wants_it),
        gwc_wants_it_feedback = COALESCE((p_updates->>'gwc_wants_it_feedback'), gwc_wants_it_feedback),
        gwc_capacity = COALESCE((p_updates->>'gwc_capacity')::boolean, gwc_capacity),
        gwc_capacity_feedback = COALESCE((p_updates->>'gwc_capacity_feedback'), gwc_capacity_feedback),
        
        -- Manager fields
        manager_performance_rating = COALESCE((p_updates->>'manager_performance_rating'), manager_performance_rating),
        manager_summary_comments = COALESCE((p_updates->>'manager_summary_comments'), manager_summary_comments),
        manager_core_values_feedback = COALESCE((p_updates->>'manager_core_values_feedback'), manager_core_values_feedback),
        manager_development_plan = COALESCE((p_updates->>'manager_development_plan'), manager_development_plan),
        manager_action_items = COALESCE((p_updates->>'manager_action_items'), manager_action_items),

        -- Manager feedback fields for two-column layout
        manager_passionate_feedback = COALESCE((p_updates->>'manager_passionate_feedback'), manager_passionate_feedback),
        manager_driven_feedback = COALESCE((p_updates->>'manager_driven_feedback'), manager_driven_feedback),
        manager_resilient_feedback = COALESCE((p_updates->>'manager_resilient_feedback'), manager_resilient_feedback),
        manager_responsive_feedback = COALESCE((p_updates->>'manager_responsive_feedback'), manager_responsive_feedback),
        manager_gwc_gets_it_feedback = COALESCE((p_updates->>'manager_gwc_gets_it_feedback'), manager_gwc_gets_it_feedback),
        manager_gwc_wants_it_feedback = COALESCE((p_updates->>'manager_gwc_wants_it_feedback'), manager_gwc_wants_it_feedback),
        manager_gwc_capacity_feedback = COALESCE((p_updates->>'manager_gwc_capacity_feedback'), manager_gwc_capacity_feedback),
        manager_strengths_feedback = COALESCE((p_updates->>'manager_strengths_feedback'), manager_strengths_feedback),
        manager_improvements_feedback = COALESCE((p_updates->>'manager_improvements_feedback'), manager_improvements_feedback),
        
        -- Update timestamp
        updated_at = NOW()
    WHERE id = p_assessment_id;

    RETURN '{"success": true, "message": "Assessment updated successfully"}'::jsonb;
END;
$$;


--
-- Name: update_assessment_field(bigint, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_assessment_field(p_assessment_id bigint, p_field_name text, p_field_value text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  user_employee_id uuid;
  assessment_employee_id uuid;
  current_status text;
BEGIN
  -- Get current user's employee ID
  SELECT id INTO user_employee_id 
  FROM employees 
  WHERE user_id = auth.uid() AND is_active = true;
  
  IF user_employee_id IS NULL THEN
    RETURN json_build_object('error', 'Employee record not found');
  END IF;
  
  -- Get assessment details and verify permissions
  SELECT 
    a.employee_id,
    COALESCE(a.self_assessment_status, 'not_started')
  INTO assessment_employee_id, current_status
  FROM assessments a
  WHERE a.id = p_assessment_id;
  
  -- Check if user can edit this assessment
  IF assessment_employee_id != user_employee_id 
     AND NOT EXISTS(SELECT 1 FROM employees WHERE id = assessment_employee_id AND manager_id = user_employee_id)
     AND auth.email() != 'admin@lucerne.com' THEN
    RETURN json_build_object('error', 'Permission denied');
  END IF;
  
  -- Update the field (using dynamic SQL safely for specific allowed fields)
  IF p_field_name = 'employee_strengths' THEN
    UPDATE assessments SET employee_strengths = p_field_value WHERE id = p_assessment_id;
  ELSIF p_field_name = 'employee_improvements' THEN
    UPDATE assessments SET employee_improvements = p_field_value WHERE id = p_assessment_id;
  ELSIF p_field_name = 'value_passionate_examples' THEN
    UPDATE assessments SET value_passionate_examples = p_field_value WHERE id = p_assessment_id;
  ELSIF p_field_name = 'value_driven_examples' THEN
    UPDATE assessments SET value_driven_examples = p_field_value WHERE id = p_assessment_id;
  ELSIF p_field_name = 'value_resilient_examples' THEN
    UPDATE assessments SET value_resilient_examples = p_field_value WHERE id = p_assessment_id;
  ELSIF p_field_name = 'value_responsive_examples' THEN
    UPDATE assessments SET value_responsive_examples = p_field_value WHERE id = p_assessment_id;
  ELSE
    RETURN json_build_object('error', 'Invalid field name');
  END IF;
  
  -- Update status to in_progress if it was not_started and this is employee editing
  IF current_status = 'not_started' AND assessment_employee_id = user_employee_id THEN
    UPDATE assessments 
    SET self_assessment_status = 'in_progress' 
    WHERE id = p_assessment_id;
  END IF;
  
  RETURN json_build_object('success', true, 'message', 'Field updated successfully');
EXCEPTION
  WHEN OTHERS THEN
    RETURN json_build_object('error', 'Update failed: ' || SQLERRM);
END;
$$;


--
-- Name: update_employee(uuid, text, text, text, text, uuid, boolean); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_employee(p_employee_id uuid, p_name text DEFAULT NULL::text, p_email text DEFAULT NULL::text, p_job_title text DEFAULT NULL::text, p_role text DEFAULT NULL::text, p_manager_id uuid DEFAULT NULL::uuid, p_is_active boolean DEFAULT NULL::boolean) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_employee_record employees%ROWTYPE;
    v_changes_made BOOLEAN := FALSE;
    v_change_list TEXT := '';
BEGIN
    -- Security check
    IF NOT check_user_permission('admin') THEN
        RETURN json_build_object('error', 'Unauthorized: Admin access required');
    END IF;
    
    -- Get existing employee record
    SELECT * INTO v_employee_record
    FROM employees 
    WHERE id = p_employee_id;
    
    IF NOT FOUND THEN
        RETURN json_build_object('error', 'Employee not found');
    END IF;
    
    -- Update name (simple string comparison)
    IF p_name IS NOT NULL AND TRIM(p_name) != '' THEN
        IF TRIM(p_name) != TRIM(COALESCE(v_employee_record.name, '')) THEN
            UPDATE employees SET name = TRIM(p_name) WHERE id = p_employee_id;
            v_changes_made := TRUE;
            v_change_list := v_change_list || 'name,';
        END IF;
    END IF;
    
    -- Update email (simple string comparison)
    IF p_email IS NOT NULL AND TRIM(p_email) != '' THEN
        IF TRIM(p_email) != TRIM(COALESCE(v_employee_record.email, '')) THEN
            -- Check if email is already in use by another employee
            IF EXISTS (SELECT 1 FROM employees WHERE email = TRIM(p_email) AND id != p_employee_id) THEN
                RETURN json_build_object('error', 'Email already in use by another employee');
            END IF;
            UPDATE employees SET email = TRIM(p_email) WHERE id = p_employee_id;
            v_changes_made := TRUE;
            v_change_list := v_change_list || 'email,';
        END IF;
    END IF;
    
    -- Update job title (simple string comparison)
    IF p_job_title IS NOT NULL THEN
        IF TRIM(COALESCE(p_job_title, '')) != TRIM(COALESCE(v_employee_record.job_title, '')) THEN
            UPDATE employees SET job_title = NULLIF(TRIM(p_job_title), '') WHERE id = p_employee_id;
            v_changes_made := TRUE;
            v_change_list := v_change_list || 'job_title,';
        END IF;
    END IF;
    
    -- Update role (simple string comparison)
    IF p_role IS NOT NULL AND TRIM(p_role) != '' THEN
        IF TRIM(p_role) != TRIM(COALESCE(v_employee_record.role, '')) THEN
            -- Validate role
            IF p_role NOT IN ('employee', 'manager', 'admin') THEN
                RETURN json_build_object('error', 'Invalid role. Must be employee, manager, or admin');
            END IF;
            UPDATE employees SET role = TRIM(p_role) WHERE id = p_employee_id;
            v_changes_made := TRUE;
            v_change_list := v_change_list || 'role,';
        END IF;
    END IF;
    
    -- Update manager_id (careful UUID comparison)
    IF p_manager_id IS NOT NULL THEN
        DECLARE
            v_new_manager_id UUID := NULL;
            v_manager_changed BOOLEAN := FALSE;
        BEGIN
            -- Convert empty string or special null UUID to actual NULL
            IF p_manager_id::text = '' OR p_manager_id::text = '00000000-0000-0000-0000-000000000000' THEN
                v_new_manager_id := NULL;
            ELSE
                v_new_manager_id := p_manager_id;
            END IF;
            
            -- Check if manager changed (handle NULL safely)
            IF (v_employee_record.manager_id IS NULL AND v_new_manager_id IS NOT NULL) THEN
                v_manager_changed := TRUE;
            ELSIF (v_employee_record.manager_id IS NOT NULL AND v_new_manager_id IS NULL) THEN
                v_manager_changed := TRUE;
            ELSIF (v_employee_record.manager_id IS NOT NULL AND v_new_manager_id IS NOT NULL) THEN
                IF v_employee_record.manager_id::text != v_new_manager_id::text THEN
                    v_manager_changed := TRUE;
                END IF;
            END IF;
            
            -- Apply manager change if needed
            IF v_manager_changed THEN
                -- Validate new manager if not NULL
                IF v_new_manager_id IS NOT NULL THEN
                    -- Prevent self-management
                    IF v_new_manager_id = p_employee_id THEN
                        RETURN json_build_object('error', 'Employee cannot be their own manager');
                    END IF;
                    -- Ensure manager exists and is active
                    IF NOT EXISTS (SELECT 1 FROM employees WHERE id = v_new_manager_id AND is_active = true) THEN
                        RETURN json_build_object('error', 'Manager not found or inactive');
                    END IF;
                END IF;
                
                -- Update manager
                UPDATE employees SET manager_id = v_new_manager_id WHERE id = p_employee_id;
                v_changes_made := TRUE;
                v_change_list := v_change_list || 'manager_id,';
            END IF;
        END;
    END IF;
    
    -- Update is_active (simple boolean comparison)
    IF p_is_active IS NOT NULL THEN
        IF p_is_active != COALESCE(v_employee_record.is_active, TRUE) THEN
            UPDATE employees SET is_active = p_is_active WHERE id = p_employee_id;
            v_changes_made := TRUE;
            v_change_list := v_change_list || 'is_active,';
        END IF;
    END IF;
    
    -- Update timestamp if any changes were made
    IF v_changes_made THEN
        UPDATE employees SET updated_at = NOW() WHERE id = p_employee_id;
        
        -- Log the update
        PERFORM log_security_event(
            'employee_updated',
            'employee_id:' || p_employee_id::text || ',changes:' || v_change_list,
            true
        );
    END IF;
    
    RETURN json_build_object(
        'success', true,
        'message', CASE 
            WHEN v_changes_made THEN 'Employee updated successfully'
            ELSE 'No changes detected'
        END,
        'employee_id', p_employee_id,
        'changes_made', v_changes_made,
        'changes', v_change_list
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object(
            'error', 'Failed to update employee: ' || SQLERRM,
            'sqlstate', SQLSTATE
        );
END;
$$;


--
-- Name: update_manager_note(uuid, text, text, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_manager_note(p_note_id uuid, p_title text, p_content text, p_category text DEFAULT 'general'::text, p_priority text DEFAULT 'medium'::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    v_current_employee_id UUID;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO v_current_employee_id
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF v_current_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Verify the note belongs to this manager
    IF NOT EXISTS (
        SELECT 1 FROM manager_notes 
        WHERE id = p_note_id AND manager_id = v_current_employee_id
    ) THEN
        RETURN json_build_object('error', 'Note not found or unauthorized');
    END IF;
    
    -- Validate inputs
    IF p_title IS NULL OR TRIM(p_title) = '' THEN
        RETURN json_build_object('error', 'Note title is required');
    END IF;
    
    IF p_content IS NULL OR TRIM(p_content) = '' THEN
        RETURN json_build_object('error', 'Note content is required');
    END IF;
    
    -- Update the note
    UPDATE manager_notes SET
        title = TRIM(p_title),
        content = TRIM(p_content),
        category = p_category,
        priority = p_priority,
        updated_at = NOW()
    WHERE id = p_note_id;
    
    RETURN json_build_object(
        'success', true,
        'message', 'Note updated successfully'
    );
    
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Failed to update note: ' || SQLERRM);
END;
$$;


--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = NOW();
    RETURN NEW;
END;
$$;


--
-- Name: upsert_development_goal(uuid, text, text, text, date, text, text); Type: FUNCTION; Schema: public; Owner: -
--

CREATE FUNCTION public.upsert_development_goal(p_goal_id uuid DEFAULT NULL::uuid, p_goal_type text DEFAULT 'skill_development'::text, p_title text DEFAULT ''::text, p_description text DEFAULT NULL::text, p_target_date date DEFAULT NULL::date, p_priority text DEFAULT 'medium'::text, p_status text DEFAULT 'active'::text) RETURNS json
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_employee_id uuid;
    result_goal_id uuid;
BEGIN
    -- Get current user's employee ID
    SELECT id INTO user_employee_id 
    FROM employees 
    WHERE user_id = auth.uid() AND is_active = true;
    
    IF user_employee_id IS NULL THEN
        RETURN json_build_object('error', 'Employee record not found');
    END IF;
    
    -- Validate required fields
    IF p_title IS NULL OR p_title = '' THEN
        RETURN json_build_object('error', 'Goal title is required');
    END IF;
    
    -- Insert or update
    IF p_goal_id IS NULL THEN
        -- Insert new goal
        INSERT INTO employee_development_goals (
            employee_id, goal_type, title, description, target_date, priority, status
        ) VALUES (
            user_employee_id, p_goal_type, p_title, p_description, p_target_date, p_priority, p_status
        ) RETURNING goal_id INTO result_goal_id;
        
        RETURN json_build_object(
            'success', true,
            'goal_id', result_goal_id,
            'message', 'Development goal created successfully'
        );
    ELSE
        -- Update existing goal (only if user owns it)
        UPDATE employee_development_goals SET
            goal_type = p_goal_type,
            title = p_title,
            description = p_description,
            target_date = p_target_date,
            priority = p_priority,
            status = p_status,
            updated_at = now()
        WHERE goal_id = p_goal_id 
        AND employee_id = user_employee_id;
        
        IF NOT FOUND THEN
            RETURN json_build_object('error', 'Goal not found or access denied');
        END IF;
        
        RETURN json_build_object(
            'success', true,
            'goal_id', p_goal_id,
            'message', 'Development goal updated successfully'
        );
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RETURN json_build_object('error', 'Operation failed: ' || SQLERRM);
END;
$$;


SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: assessment_feedback; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessment_feedback (
    id bigint NOT NULL,
    assessment_id bigint NOT NULL,
    given_by_id uuid NOT NULL,
    feedback text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: assessment_feedback_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessment_feedback ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessment_feedback_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: assessment_rocks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessment_rocks (
    id bigint NOT NULL,
    assessment_id bigint NOT NULL,
    description text NOT NULL,
    status text NOT NULL,
    feedback text
);


--
-- Name: assessment_rocks_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessment_rocks ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessment_rocks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: assessment_scorecard_metrics; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessment_scorecard_metrics (
    id bigint NOT NULL,
    assessment_id bigint NOT NULL,
    metric_name text NOT NULL,
    target text,
    actual text,
    status text
);


--
-- Name: assessment_scorecard_metrics_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessment_scorecard_metrics ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessment_scorecard_metrics_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: assessments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.assessments (
    id bigint NOT NULL,
    employee_id uuid NOT NULL,
    review_cycle_id bigint NOT NULL,
    status text DEFAULT 'not_started'::text NOT NULL,
    value_passionate_rating smallint,
    value_passionate_examples text,
    value_driven_rating smallint,
    value_driven_examples text,
    value_resilient_rating smallint,
    value_resilient_examples text,
    value_responsive_rating smallint,
    value_responsive_examples text,
    gwc_gets_it boolean,
    gwc_gets_it_feedback text,
    gwc_wants_it boolean,
    gwc_wants_it_feedback text,
    gwc_capacity boolean,
    gwc_capacity_feedback text,
    employee_strengths text,
    employee_improvements text,
    manager_summary_comments text,
    manager_development_plan text,
    submitted_by_employee_at timestamp with time zone,
    finalized_by_manager_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    self_assessment_status text DEFAULT 'not_started'::text,
    employee_submitted_at timestamp with time zone,
    manager_reviewed_at timestamp with time zone,
    updated_at timestamp with time zone DEFAULT now(),
    manager_review_status text DEFAULT 'pending'::text,
    manager_feedback jsonb DEFAULT '{}'::jsonb,
    employee_notified boolean DEFAULT false,
    manager_notified boolean DEFAULT false,
    due_date date,
    self_assessment_data jsonb,
    manager_review_data jsonb,
    manager_notes text,
    overall_rating integer,
    employee_acknowledgment boolean DEFAULT false,
    manager_passionate_feedback text,
    manager_driven_feedback text,
    manager_resilient_feedback text,
    manager_responsive_feedback text,
    manager_gwc_gets_it_feedback text,
    manager_gwc_wants_it_feedback text,
    manager_gwc_capacity_feedback text,
    manager_strengths_feedback text,
    manager_improvements_feedback text,
    manager_performance_rating text,
    manager_core_values_feedback text,
    manager_action_items text,
    CONSTRAINT assessments_overall_rating_check CHECK (((overall_rating >= 1) AND (overall_rating <= 5))),
    CONSTRAINT valid_manager_review_status CHECK ((manager_review_status = ANY (ARRAY['pending'::text, 'in_progress'::text, 'completed'::text])))
);


--
-- Name: assessments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.assessments ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.assessments_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: company_rocks; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.company_rocks (
    id bigint NOT NULL,
    review_cycle_id bigint NOT NULL,
    description text NOT NULL,
    owner_name text,
    target_date date,
    status text DEFAULT 'not_started'::text,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: company_rocks_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.company_rocks ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.company_rocks_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: departments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.departments (
    id integer NOT NULL,
    name text NOT NULL,
    description text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: departments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.departments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: departments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.departments_id_seq OWNED BY public.departments.id;


--
-- Name: development_plans; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.development_plans (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    title text NOT NULL,
    description text,
    goals jsonb DEFAULT '[]'::jsonb,
    skills_to_develop jsonb DEFAULT '[]'::jsonb,
    timeline text,
    status text DEFAULT 'submitted'::text,
    manager_feedback text,
    manager_reviewed_at timestamp with time zone,
    manager_reviewed_by uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    manager_id uuid,
    objectives text,
    resources_needed text,
    success_metrics text,
    target_completion_date date,
    manager_rating integer,
    submission_date timestamp with time zone,
    review_date timestamp with time zone,
    CONSTRAINT development_plans_manager_rating_check CHECK (((manager_rating >= 1) AND (manager_rating <= 5))),
    CONSTRAINT valid_plan_status CHECK ((status = ANY (ARRAY['draft'::text, 'submitted'::text, 'under_review'::text, 'approved'::text, 'needs_revision'::text])))
);


--
-- Name: employee_departments; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.employee_departments (
    id integer NOT NULL,
    employee_id uuid,
    department_id integer,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: employee_departments_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.employee_departments_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: employee_departments_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.employee_departments_id_seq OWNED BY public.employee_departments.id;


--
-- Name: employee_development_goals; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.employee_development_goals (
    goal_id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    goal_type text NOT NULL,
    title text NOT NULL,
    description text,
    target_date date,
    status text DEFAULT 'active'::text,
    priority text DEFAULT 'medium'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT employee_development_goals_goal_type_check CHECK ((goal_type = ANY (ARRAY['career_aspiration'::text, 'skill_development'::text, 'stretch_goal'::text]))),
    CONSTRAINT employee_development_goals_priority_check CHECK ((priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text]))),
    CONSTRAINT employee_development_goals_status_check CHECK ((status = ANY (ARRAY['active'::text, 'completed'::text, 'on_hold'::text, 'cancelled'::text])))
);


--
-- Name: employees; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.employees (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid,
    name text NOT NULL,
    email text NOT NULL,
    job_title text,
    manager_id uuid,
    is_active boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    role text DEFAULT 'employee'::text,
    updated_at timestamp with time zone DEFAULT now(),
    temp_password text,
    must_change_password boolean DEFAULT false,
    CONSTRAINT employees_role_check CHECK ((role = ANY (ARRAY['employee'::text, 'manager'::text, 'admin'::text])))
);


--
-- Name: kudos; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.kudos (
    id bigint NOT NULL,
    giver_id uuid NOT NULL,
    receiver_id uuid NOT NULL,
    core_value text NOT NULL,
    message text NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


--
-- Name: kudos_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.kudos ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.kudos_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: manager_employee_messages; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.manager_employee_messages (
    message_id uuid DEFAULT gen_random_uuid() NOT NULL,
    from_employee_id uuid NOT NULL,
    to_employee_id uuid NOT NULL,
    subject text NOT NULL,
    message text NOT NULL,
    message_type text DEFAULT 'development'::text,
    read_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    CONSTRAINT manager_employee_messages_message_type_check CHECK ((message_type = ANY (ARRAY['development'::text, 'goal_update'::text, 'training_request'::text, 'general'::text])))
);


--
-- Name: manager_notes; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.manager_notes (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    manager_id uuid NOT NULL,
    employee_id uuid NOT NULL,
    title text NOT NULL,
    content text NOT NULL,
    category text DEFAULT 'general'::text,
    priority text DEFAULT 'medium'::text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT valid_category CHECK ((category = ANY (ARRAY['general'::text, 'performance'::text, 'development'::text, 'personal'::text, 'goals'::text]))),
    CONSTRAINT valid_priority CHECK ((priority = ANY (ARRAY['low'::text, 'medium'::text, 'high'::text, 'urgent'::text])))
);


--
-- Name: notifications; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.notifications (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    recipient_id uuid NOT NULL,
    sender_id uuid,
    type text NOT NULL,
    title text NOT NULL,
    message text NOT NULL,
    data jsonb DEFAULT '{}'::jsonb,
    read_at timestamp with time zone,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    CONSTRAINT valid_notification_type CHECK ((type = ANY (ARRAY['review_cycle_opened'::text, 'assessment_submitted'::text, 'manager_review_ready'::text, 'manager_review_completed'::text, 'development_plan_submitted'::text, 'development_plan_reviewed'::text, 'assessment_overdue'::text, 'review_reminder'::text])))
);


--
-- Name: peer_feedback; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.peer_feedback (
    feedback_id bigint NOT NULL,
    giver_id uuid NOT NULL,
    recipient_id uuid NOT NULL,
    feedback_type text NOT NULL,
    feedback_timestamp timestamp with time zone DEFAULT now(),
    category text DEFAULT 'general'::text,
    message text DEFAULT ''::text,
    is_anonymous boolean DEFAULT false,
    helpful_count integer DEFAULT 0,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: peer_feedback_feedback_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.peer_feedback_feedback_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: peer_feedback_feedback_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.peer_feedback_feedback_id_seq OWNED BY public.peer_feedback.feedback_id;


--
-- Name: review_cycles; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.review_cycles (
    id bigint NOT NULL,
    name text NOT NULL,
    start_date date NOT NULL,
    end_date date NOT NULL,
    status text DEFAULT 'upcoming'::text NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    cycle_type text DEFAULT 'quarterly'::text,
    description text,
    updated_at timestamp with time zone DEFAULT now()
);


--
-- Name: review_cycles_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

ALTER TABLE public.review_cycles ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME public.review_cycles_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: security_audit; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.security_audit (
    id bigint NOT NULL,
    user_id uuid,
    employee_id uuid,
    action text NOT NULL,
    resource text,
    success boolean NOT NULL,
    ip_address inet,
    user_agent text,
    "timestamp" timestamp with time zone DEFAULT now()
);


--
-- Name: security_audit_id_seq; Type: SEQUENCE; Schema: public; Owner: -
--

CREATE SEQUENCE public.security_audit_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


--
-- Name: security_audit_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: -
--

ALTER SEQUENCE public.security_audit_id_seq OWNED BY public.security_audit.id;


--
-- Name: training_requests; Type: TABLE; Schema: public; Owner: -
--

CREATE TABLE public.training_requests (
    request_id uuid DEFAULT gen_random_uuid() NOT NULL,
    employee_id uuid NOT NULL,
    request_type text NOT NULL,
    title text NOT NULL,
    description text,
    provider text,
    estimated_cost numeric(10,2),
    preferred_date date,
    business_justification text NOT NULL,
    status text DEFAULT 'requested'::text,
    manager_notes text,
    created_at timestamp with time zone DEFAULT now(),
    reviewed_at timestamp with time zone,
    CONSTRAINT training_requests_request_type_check CHECK ((request_type = ANY (ARRAY['course'::text, 'certification'::text, 'conference'::text, 'workshop'::text, 'mentoring'::text]))),
    CONSTRAINT training_requests_status_check CHECK ((status = ANY (ARRAY['requested'::text, 'approved'::text, 'denied'::text, 'completed'::text])))
);


--
-- Name: departments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.departments ALTER COLUMN id SET DEFAULT nextval('public.departments_id_seq'::regclass);


--
-- Name: employee_departments id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_departments ALTER COLUMN id SET DEFAULT nextval('public.employee_departments_id_seq'::regclass);


--
-- Name: peer_feedback feedback_id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.peer_feedback ALTER COLUMN feedback_id SET DEFAULT nextval('public.peer_feedback_feedback_id_seq'::regclass);


--
-- Name: security_audit id; Type: DEFAULT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_audit ALTER COLUMN id SET DEFAULT nextval('public.security_audit_id_seq'::regclass);


--
-- Data for Name: assessment_feedback; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessment_feedback (id, assessment_id, given_by_id, feedback, created_at) FROM stdin;
\.


--
-- Data for Name: assessment_rocks; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessment_rocks (id, assessment_id, description, status, feedback) FROM stdin;
\.


--
-- Data for Name: assessment_scorecard_metrics; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessment_scorecard_metrics (id, assessment_id, metric_name, target, actual, status) FROM stdin;
\.


--
-- Data for Name: assessments; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.assessments (id, employee_id, review_cycle_id, status, value_passionate_rating, value_passionate_examples, value_driven_rating, value_driven_examples, value_resilient_rating, value_resilient_examples, value_responsive_rating, value_responsive_examples, gwc_gets_it, gwc_gets_it_feedback, gwc_wants_it, gwc_wants_it_feedback, gwc_capacity, gwc_capacity_feedback, employee_strengths, employee_improvements, manager_summary_comments, manager_development_plan, submitted_by_employee_at, finalized_by_manager_at, created_at, self_assessment_status, employee_submitted_at, manager_reviewed_at, updated_at, manager_review_status, manager_feedback, employee_notified, manager_notified, due_date, self_assessment_data, manager_review_data, manager_notes, overall_rating, employee_acknowledgment, manager_passionate_feedback, manager_driven_feedback, manager_resilient_feedback, manager_responsive_feedback, manager_gwc_gets_it_feedback, manager_gwc_wants_it_feedback, manager_gwc_capacity_feedback, manager_strengths_feedback, manager_improvements_feedback, manager_performance_rating, manager_core_values_feedback, manager_action_items) FROM stdin;
1	f07fc797-2849-4b8c-befe-c633732f18e9	1	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 12:47:33.829379+00	not_started	\N	\N	2025-07-28 12:47:33.829379+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
2	0595b6e2-aae7-41be-90d8-4a2051cd32da	1	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 12:47:33.829379+00	not_started	\N	\N	2025-07-28 12:47:33.829379+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
3	d8dfa847-2caa-4408-9434-8e25fcfadcd0	1	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 12:47:33.829379+00	not_started	\N	\N	2025-07-28 12:47:33.829379+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
4	3f2c6e27-8191-4bf1-9687-ba314598f39d	1	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 12:47:33.829379+00	employee_complete	\N	\N	2025-07-28 13:20:46.9021+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
5	f07fc797-2849-4b8c-befe-c633732f18e9	2	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 14:31:45.44387+00	not_started	\N	\N	2025-07-28 14:31:45.44387+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
6	0595b6e2-aae7-41be-90d8-4a2051cd32da	2	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 14:31:45.44387+00	not_started	\N	\N	2025-07-28 14:31:45.44387+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
7	d8dfa847-2caa-4408-9434-8e25fcfadcd0	2	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 14:31:45.44387+00	not_started	\N	\N	2025-07-28 14:31:45.44387+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
8	3f2c6e27-8191-4bf1-9687-ba314598f39d	2	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 14:31:45.44387+00	employee_complete	\N	\N	2025-07-28 14:32:31.189269+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
9	f07fc797-2849-4b8c-befe-c633732f18e9	3	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 16:36:10.77234+00	not_started	\N	\N	2025-07-28 16:36:10.77234+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
10	0595b6e2-aae7-41be-90d8-4a2051cd32da	3	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 16:36:10.77234+00	not_started	\N	\N	2025-07-28 16:36:10.77234+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
11	d8dfa847-2caa-4408-9434-8e25fcfadcd0	3	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 16:36:10.77234+00	employee_complete	\N	\N	2025-07-28 17:05:39.223529+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
14	f07fc797-2849-4b8c-befe-c633732f18e9	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
15	0595b6e2-aae7-41be-90d8-4a2051cd32da	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
16	d8dfa847-2caa-4408-9434-8e25fcfadcd0	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
17	3f2c6e27-8191-4bf1-9687-ba314598f39d	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
18	26e3ed38-ad4d-4f1b-9229-4d992bdb1e32	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
19	9d7ec341-5c0c-4e73-a223-56a2950055b6	5	not_started	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	2025-07-28 19:35:38.151631+00	not_started	\N	\N	2025-07-28 19:35:38.151631+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N	\N
13	26e3ed38-ad4d-4f1b-9229-4d992bdb1e32	3	not_started	\N	Test: I stayed late to help resolve a critical client issue.	\N	Test: I consistently exceed my quarterly targets.	\N	Test: I adapted quickly when our system changed.	\N	Test: I always respond to emails within 2 hours.	t	Test: I understand my role responsibilities clearly.	t	Test: I am passionate about this position.	t	Test: I have the time and skills needed.	Test: My key strengths include problem-solving and teamwork.	Test: I would like to improve my presentation skills.	asdf	asdf	\N	\N	2025-07-28 19:10:26.896763+00	employee_complete	\N	\N	2025-07-28 20:13:56.075289+00	pending	{}	f	f	\N	\N	\N	\N	\N	f	dfsgh	sdfgh	sdfh	sdfh	sdfh	sdfh	sdfh	sdfh	sdfh	exceeds		asdf
12	3f2c6e27-8191-4bf1-9687-ba314598f39d	3	not_started	\N		\N		\N		\N		f		f		f				fg	sgf	\N	\N	2025-07-28 16:36:10.77234+00	employee_complete	\N	\N	2025-07-28 20:19:30.47094+00	pending	{}	f	f	2025-09-30	\N	\N	\N	\N	f	sfg	sg	sg	\N	sfg	sg	sfg	sg	sg	exceeds		sfg
20	caad3baa-7ae8-4241-9654-80ca6ffd578d	5	not_started	\N	sfg	\N	sg	\N	sg	\N	sg	t	sg	f	sg	f	sg	sg	sg	asddfgh	asddfgh	\N	\N	2025-07-28 19:35:38.151631+00	employee_complete	\N	\N	2025-07-28 20:29:22.589426+00	completed	{}	f	f	\N	\N	\N	\N	\N	f	czfgb	zdf	adfg	asdg	asdg	asdg	asdg	asdg	dfgh	exceeds		asddfgh
\.


--
-- Data for Name: company_rocks; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.company_rocks (id, review_cycle_id, description, owner_name, target_date, status, created_at) FROM stdin;
\.


--
-- Data for Name: departments; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.departments (id, name, description, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: development_plans; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.development_plans (id, employee_id, title, description, goals, skills_to_develop, timeline, status, manager_feedback, manager_reviewed_at, manager_reviewed_by, created_at, updated_at, manager_id, objectives, resources_needed, success_metrics, target_completion_date, manager_rating, submission_date, review_date) FROM stdin;
\.


--
-- Data for Name: employee_departments; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.employee_departments (id, employee_id, department_id, created_at) FROM stdin;
\.


--
-- Data for Name: employee_development_goals; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.employee_development_goals (goal_id, employee_id, goal_type, title, description, target_date, status, priority, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: employees; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.employees (id, user_id, name, email, job_title, manager_id, is_active, created_at, role, updated_at, temp_password, must_change_password) FROM stdin;
f07fc797-2849-4b8c-befe-c633732f18e9	34e47cd9-1b10-4114-b5f3-708309644924	Administrator	admin@lucerne.com	System Administrator	\N	t	2025-07-28 02:33:17.191444+00	admin	2025-07-28 02:33:17.191444+00	\N	f
0595b6e2-aae7-41be-90d8-4a2051cd32da	b9909671-586d-4b70-9486-0919e4645b12	Test Manager	testmanager@lucerne.com	Department Manager	\N	t	2025-07-28 12:11:18.210966+00	manager	2025-07-28 12:11:18.210966+00	TempPass123!	t
d8dfa847-2caa-4408-9434-8e25fcfadcd0	9a6b509f-9e0a-4b2d-b17e-af32abfc91f8	Manager1	manager1@lucerne.com	Manager1	f07fc797-2849-4b8c-befe-c633732f18e9	t	2025-07-28 12:38:47.540613+00	manager	2025-07-28 12:38:47.540613+00	Manager1	t
3f2c6e27-8191-4bf1-9687-ba314598f39d	a01ffcdb-c09d-4e61-b5c0-a0c5a076cd96	Employee1	employee1@lucerne.com	Employee1	d8dfa847-2caa-4408-9434-8e25fcfadcd0	t	2025-07-28 12:45:18.769366+00	employee	2025-07-28 12:45:18.769366+00	Employee1	t
26e3ed38-ad4d-4f1b-9229-4d992bdb1e32	9f4ad8f1-50c8-4250-a0e9-11dc6ab5517c	Employee2	employee2@lucerne.com	Employee2	d8dfa847-2caa-4408-9434-8e25fcfadcd0	t	2025-07-28 16:44:38.768388+00	employee	2025-07-28 16:44:38.768388+00	Employee2	t
9d7ec341-5c0c-4e73-a223-56a2950055b6	2a565fe5-7b9a-45e5-912a-84a9f97aaabd	Manager2	manager2@lucerne.com	Manager2	f07fc797-2849-4b8c-befe-c633732f18e9	t	2025-07-28 19:34:31.402883+00	manager	2025-07-28 19:34:31.402883+00	Manager2	t
caad3baa-7ae8-4241-9654-80ca6ffd578d	4c5e75d7-feb2-45fa-b6a9-5c8b5ecbc942	Employee3	employee3@lucerne.com	Employee3	9d7ec341-5c0c-4e73-a223-56a2950055b6	t	2025-07-28 17:37:04.432691+00	employee	2025-07-28 19:34:58.104608+00	Employee3	t
\.


--
-- Data for Name: kudos; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.kudos (id, giver_id, receiver_id, core_value, message, created_at) FROM stdin;
\.


--
-- Data for Name: manager_employee_messages; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.manager_employee_messages (message_id, from_employee_id, to_employee_id, subject, message, message_type, read_at, created_at) FROM stdin;
\.


--
-- Data for Name: manager_notes; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.manager_notes (id, manager_id, employee_id, title, content, category, priority, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: notifications; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.notifications (id, recipient_id, sender_id, type, title, message, data, read_at, created_at, updated_at) FROM stdin;
328f9632-3f71-41d1-8f3c-4ad2c589ac19	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "TestRevCycle1" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
85909be6-d990-4372-999d-5a364f685ac0	0595b6e2-aae7-41be-90d8-4a2051cd32da	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "TestRevCycle1" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
b01812b7-5eeb-47de-bda3-0d6a5afebc7d	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "TestRevCycle1" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
5e9de031-85fa-41d7-8755-56ffc971b26c	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "TestRevCycle1" activated. Your team member Manager1 will need manager review.	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
090283cd-09e3-401e-a587-b6d98700696e	3f2c6e27-8191-4bf1-9687-ba314598f39d	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "TestRevCycle1" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
a04ced07-c0c9-46b9-b267-e4cc868189be	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "TestRevCycle1" activated. Your team member Employee1 will need manager review.	{}	\N	2025-07-28 12:47:33.829379+00	2025-07-28 12:47:33.829379+00
3f2737ab-35f3-4b3f-9e91-9f06e7cd51a5	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q3TestReview" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
1b042203-dd9a-46f9-b843-55fbeb62223c	0595b6e2-aae7-41be-90d8-4a2051cd32da	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q3TestReview" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
5367e270-8988-4094-89c4-0be63c643e3d	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q3TestReview" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
7353e4ed-4f2f-4912-895a-ccb35806e98f	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "Q3TestReview" activated. Your team member Manager1 will need manager review.	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
82af47af-7f73-4549-9279-8a991d91d1a1	3f2c6e27-8191-4bf1-9687-ba314598f39d	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q3TestReview" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
1f9c05b0-c9ff-4ba6-86f4-3cb88fb25534	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "Q3TestReview" activated. Your team member Employee1 will need manager review.	{}	\N	2025-07-28 14:31:45.44387+00	2025-07-28 14:31:45.44387+00
a81af109-e496-4e9f-a43f-965c70f920f8	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q12026Test" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
933a9777-7219-48ce-967c-5e8c3faec83a	0595b6e2-aae7-41be-90d8-4a2051cd32da	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q12026Test" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
2bda5255-7dd5-4f2f-9d5d-ec2c1936d481	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q12026Test" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
adf2bd23-4428-4850-960d-eeb6f42910df	f07fc797-2849-4b8c-befe-c633732f18e9	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "Q12026Test" activated. Your team member Manager1 will need manager review.	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
ec81cceb-d7af-4828-bd2c-4f222532b160	3f2c6e27-8191-4bf1-9687-ba314598f39d	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle Started	A new review cycle "Q12026Test" has been activated. Please complete your self-assessment by 2025-09-30	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
992d3ec9-759f-44c3-a8ef-d627932f67e1	d8dfa847-2caa-4408-9434-8e25fcfadcd0	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_opened	New Review Cycle - Team Member Assessment	Review cycle "Q12026Test" activated. Your team member Employee1 will need manager review.	{}	\N	2025-07-28 16:36:10.77234+00	2025-07-28 16:36:10.77234+00
ecabed87-70ce-4d9b-8399-10c9fc388f24	caad3baa-7ae8-4241-9654-80ca6ffd578d	9d7ec341-5c0c-4e73-a223-56a2950055b6	manager_review_completed	Your Manager Review is Complete	Manager2 has completed your performance review for Q1 2020 Test. You can now view their feedback.	{"cycle_id": 5, "cycle_name": "Q1 2020 Test", "employee_id": "caad3baa-7ae8-4241-9654-80ca6ffd578d", "manager_name": "Manager2", "assessment_id": 20}	\N	2025-07-28 20:29:22.589426+00	2025-07-28 20:29:22.589426+00
\.


--
-- Data for Name: peer_feedback; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.peer_feedback (feedback_id, giver_id, recipient_id, feedback_type, feedback_timestamp, category, message, is_anonymous, helpful_count, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: review_cycles; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.review_cycles (id, name, start_date, end_date, status, created_at, cycle_type, description, updated_at) FROM stdin;
1	TestRevCycle1	2025-07-01	2025-09-30	closed	2025-07-28 12:46:30.126696+00	quarterly	\N	2025-07-28 13:44:52.538884+00
2	Q3TestReview	2025-07-01	2025-09-30	closed	2025-07-28 13:45:19.51082+00	quarterly	\N	2025-07-28 15:24:18.394628+00
3	Q12026Test	2025-07-01	2025-09-30	active	2025-07-28 15:24:37.000472+00	quarterly	\N	2025-07-28 16:36:10.77234+00
4	Q22026Test	2025-07-01	2025-09-30	closed	2025-07-28 16:35:49.500278+00	quarterly	\N	2025-07-28 16:36:16.071196+00
5	Q1 2020 Test	2025-07-01	2025-09-30	active	2025-07-28 19:35:37.780369+00	quarterly	\N	2025-07-28 19:35:38.151631+00
\.


--
-- Data for Name: security_audit; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.security_audit (id, user_id, employee_id, action, resource, success, ip_address, user_agent, "timestamp") FROM stdin;
1	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	employee_created	employee_id:36556956-ac4d-4cf3-9868-78ed84dc6a82,role:manager	t	\N	\N	2025-07-28 03:03:57.62216+00
2	\N	\N	employee_created	employee_id:0595b6e2-aae7-41be-90d8-4a2051cd32da,role:manager	t	\N	\N	2025-07-28 12:11:18.210966+00
3	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	employee_created	employee_id:8f8228db-4312-4358-b2d4-d396f021af20,role:manager	t	\N	\N	2025-07-28 12:13:32.027337+00
4	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	employee_created	employee_id:43738820-153a-4947-aad9-45d12513dfc9,role:manager	t	\N	\N	2025-07-28 12:36:15.640576+00
5	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_closed	cycle_id:1,name:TestRevCycle1	t	\N	\N	2025-07-28 13:44:52.538884+00
6	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_closed	cycle_id:2,name:Q3TestReview	t	\N	\N	2025-07-28 15:24:18.394628+00
7	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	review_cycle_closed	cycle_id:4,name:Q22026Test	t	\N	\N	2025-07-28 16:36:16.071196+00
8	34e47cd9-1b10-4114-b5f3-708309644924	f07fc797-2849-4b8c-befe-c633732f18e9	employee_updated	employee_id:caad3baa-7ae8-4241-9654-80ca6ffd578d,changes:role,manager_id,	t	\N	\N	2025-07-28 19:34:58.104608+00
\.


--
-- Data for Name: training_requests; Type: TABLE DATA; Schema: public; Owner: -
--

COPY public.training_requests (request_id, employee_id, request_type, title, description, provider, estimated_cost, preferred_date, business_justification, status, manager_notes, created_at, reviewed_at) FROM stdin;
\.


--
-- Name: assessment_feedback_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessment_feedback_id_seq', 1, false);


--
-- Name: assessment_rocks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessment_rocks_id_seq', 1, false);


--
-- Name: assessment_scorecard_metrics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessment_scorecard_metrics_id_seq', 1, false);


--
-- Name: assessments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.assessments_id_seq', 20, true);


--
-- Name: company_rocks_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.company_rocks_id_seq', 1, false);


--
-- Name: departments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.departments_id_seq', 1, false);


--
-- Name: employee_departments_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.employee_departments_id_seq', 1, false);


--
-- Name: kudos_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.kudos_id_seq', 1, false);


--
-- Name: peer_feedback_feedback_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.peer_feedback_feedback_id_seq', 1, false);


--
-- Name: review_cycles_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.review_cycles_id_seq', 5, true);


--
-- Name: security_audit_id_seq; Type: SEQUENCE SET; Schema: public; Owner: -
--

SELECT pg_catalog.setval('public.security_audit_id_seq', 8, true);


--
-- Name: assessment_feedback assessment_feedback_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_feedback
    ADD CONSTRAINT assessment_feedback_pkey PRIMARY KEY (id);


--
-- Name: assessment_rocks assessment_rocks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_rocks
    ADD CONSTRAINT assessment_rocks_pkey PRIMARY KEY (id);


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_scorecard_metrics
    ADD CONSTRAINT assessment_scorecard_metrics_pkey PRIMARY KEY (id);


--
-- Name: assessments assessments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_pkey PRIMARY KEY (id);


--
-- Name: company_rocks company_rocks_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.company_rocks
    ADD CONSTRAINT company_rocks_pkey PRIMARY KEY (id);


--
-- Name: departments departments_name_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_name_key UNIQUE (name);


--
-- Name: departments departments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.departments
    ADD CONSTRAINT departments_pkey PRIMARY KEY (id);


--
-- Name: development_plans development_plans_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.development_plans
    ADD CONSTRAINT development_plans_pkey PRIMARY KEY (id);


--
-- Name: employee_departments employee_departments_employee_id_department_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_departments
    ADD CONSTRAINT employee_departments_employee_id_department_id_key UNIQUE (employee_id, department_id);


--
-- Name: employee_departments employee_departments_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_departments
    ADD CONSTRAINT employee_departments_pkey PRIMARY KEY (id);


--
-- Name: employee_development_goals employee_development_goals_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_development_goals
    ADD CONSTRAINT employee_development_goals_pkey PRIMARY KEY (goal_id);


--
-- Name: employees employees_email_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_email_key UNIQUE (email);


--
-- Name: employees employees_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_pkey PRIMARY KEY (id);


--
-- Name: employees employees_user_id_key; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_user_id_key UNIQUE (user_id);


--
-- Name: kudos kudos_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.kudos
    ADD CONSTRAINT kudos_pkey PRIMARY KEY (id);


--
-- Name: manager_employee_messages manager_employee_messages_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_employee_messages
    ADD CONSTRAINT manager_employee_messages_pkey PRIMARY KEY (message_id);


--
-- Name: manager_notes manager_notes_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_notes
    ADD CONSTRAINT manager_notes_pkey PRIMARY KEY (id);


--
-- Name: notifications notifications_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_pkey PRIMARY KEY (id);


--
-- Name: peer_feedback peer_feedback_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.peer_feedback
    ADD CONSTRAINT peer_feedback_pkey PRIMARY KEY (feedback_id);


--
-- Name: review_cycles review_cycles_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.review_cycles
    ADD CONSTRAINT review_cycles_pkey PRIMARY KEY (id);


--
-- Name: security_audit security_audit_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_audit
    ADD CONSTRAINT security_audit_pkey PRIMARY KEY (id);


--
-- Name: training_requests training_requests_pkey; Type: CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.training_requests
    ADD CONSTRAINT training_requests_pkey PRIMARY KEY (request_id);


--
-- Name: idx_assessments_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_assessments_created_at ON public.assessments USING btree (created_at);


--
-- Name: idx_assessments_employee_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_assessments_employee_id ON public.assessments USING btree (employee_id);


--
-- Name: idx_assessments_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_assessments_status ON public.assessments USING btree (self_assessment_status, manager_review_status);


--
-- Name: idx_assessments_updated_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_assessments_updated_at ON public.assessments USING btree (updated_at);


--
-- Name: idx_development_goals_employee; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_goals_employee ON public.employee_development_goals USING btree (employee_id);


--
-- Name: idx_development_goals_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_goals_status ON public.employee_development_goals USING btree (status);


--
-- Name: idx_development_plans_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_plans_created_at ON public.development_plans USING btree (created_at DESC);


--
-- Name: idx_development_plans_employee_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_plans_employee_id ON public.development_plans USING btree (employee_id);


--
-- Name: idx_development_plans_manager_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_plans_manager_id ON public.development_plans USING btree (manager_id);


--
-- Name: idx_development_plans_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_development_plans_status ON public.development_plans USING btree (status);


--
-- Name: idx_employee_departments_department_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_employee_departments_department_id ON public.employee_departments USING btree (department_id);


--
-- Name: idx_employee_departments_employee_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_employee_departments_employee_id ON public.employee_departments USING btree (employee_id);


--
-- Name: idx_manager_notes_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_manager_notes_created_at ON public.manager_notes USING btree (created_at DESC);


--
-- Name: idx_manager_notes_employee_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_manager_notes_employee_id ON public.manager_notes USING btree (employee_id);


--
-- Name: idx_manager_notes_manager_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_manager_notes_manager_id ON public.manager_notes USING btree (manager_id);


--
-- Name: idx_messages_from_employee; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_from_employee ON public.manager_employee_messages USING btree (from_employee_id);


--
-- Name: idx_messages_to_employee; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_messages_to_employee ON public.manager_employee_messages USING btree (to_employee_id);


--
-- Name: idx_notifications_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notifications_created_at ON public.notifications USING btree (created_at DESC);


--
-- Name: idx_notifications_read_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notifications_read_at ON public.notifications USING btree (read_at);


--
-- Name: idx_notifications_recipient_id; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notifications_recipient_id ON public.notifications USING btree (recipient_id);


--
-- Name: idx_notifications_type; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notifications_type ON public.notifications USING btree (type);


--
-- Name: idx_notifications_unread; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_notifications_unread ON public.notifications USING btree (recipient_id, read_at) WHERE (read_at IS NULL);


--
-- Name: idx_review_cycles_created_at; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_review_cycles_created_at ON public.review_cycles USING btree (created_at);


--
-- Name: idx_review_cycles_dates; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_review_cycles_dates ON public.review_cycles USING btree (start_date, end_date);


--
-- Name: idx_review_cycles_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_review_cycles_status ON public.review_cycles USING btree (status);


--
-- Name: idx_training_requests_employee; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_training_requests_employee ON public.training_requests USING btree (employee_id);


--
-- Name: idx_training_requests_status; Type: INDEX; Schema: public; Owner: -
--

CREATE INDEX idx_training_requests_status ON public.training_requests USING btree (status);


--
-- Name: assessments trg_assessment_submitted; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trg_assessment_submitted AFTER UPDATE ON public.assessments FOR EACH ROW EXECUTE FUNCTION public.notify_manager_assessment_submitted();


--
-- Name: assessments trg_manager_review_completed; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER trg_manager_review_completed AFTER UPDATE ON public.assessments FOR EACH ROW EXECUTE FUNCTION public.notify_employee_manager_review_completed();


--
-- Name: assessments update_assessments_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_assessments_updated_at BEFORE UPDATE ON public.assessments FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: review_cycles update_review_cycles_updated_at; Type: TRIGGER; Schema: public; Owner: -
--

CREATE TRIGGER update_review_cycles_updated_at BEFORE UPDATE ON public.review_cycles FOR EACH ROW EXECUTE FUNCTION public.update_updated_at_column();


--
-- Name: assessment_feedback assessment_feedback_assessment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_feedback
    ADD CONSTRAINT assessment_feedback_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES public.assessments(id) ON DELETE CASCADE;


--
-- Name: assessment_feedback assessment_feedback_given_by_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_feedback
    ADD CONSTRAINT assessment_feedback_given_by_id_fkey FOREIGN KEY (given_by_id) REFERENCES public.employees(id);


--
-- Name: assessment_rocks assessment_rocks_assessment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_rocks
    ADD CONSTRAINT assessment_rocks_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES public.assessments(id);


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_assessment_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessment_scorecard_metrics
    ADD CONSTRAINT assessment_scorecard_metrics_assessment_id_fkey FOREIGN KEY (assessment_id) REFERENCES public.assessments(id);


--
-- Name: assessments assessments_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- Name: assessments assessments_review_cycle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.assessments
    ADD CONSTRAINT assessments_review_cycle_id_fkey FOREIGN KEY (review_cycle_id) REFERENCES public.review_cycles(id);


--
-- Name: company_rocks company_rocks_review_cycle_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.company_rocks
    ADD CONSTRAINT company_rocks_review_cycle_id_fkey FOREIGN KEY (review_cycle_id) REFERENCES public.review_cycles(id) ON DELETE CASCADE;


--
-- Name: development_plans development_plans_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.development_plans
    ADD CONSTRAINT development_plans_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: development_plans development_plans_manager_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.development_plans
    ADD CONSTRAINT development_plans_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.employees(id) ON DELETE SET NULL;


--
-- Name: development_plans development_plans_manager_reviewed_by_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.development_plans
    ADD CONSTRAINT development_plans_manager_reviewed_by_fkey FOREIGN KEY (manager_reviewed_by) REFERENCES public.employees(id) ON DELETE SET NULL;


--
-- Name: employee_departments employee_departments_department_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_departments
    ADD CONSTRAINT employee_departments_department_id_fkey FOREIGN KEY (department_id) REFERENCES public.departments(id) ON DELETE CASCADE;


--
-- Name: employee_departments employee_departments_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_departments
    ADD CONSTRAINT employee_departments_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employee_development_goals employee_development_goals_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employee_development_goals
    ADD CONSTRAINT employee_development_goals_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: employees employees_manager_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.employees
    ADD CONSTRAINT employees_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.employees(id);


--
-- Name: kudos kudos_giver_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.kudos
    ADD CONSTRAINT kudos_giver_id_fkey FOREIGN KEY (giver_id) REFERENCES public.employees(id);


--
-- Name: kudos kudos_receiver_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.kudos
    ADD CONSTRAINT kudos_receiver_id_fkey FOREIGN KEY (receiver_id) REFERENCES public.employees(id);


--
-- Name: manager_employee_messages manager_employee_messages_from_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_employee_messages
    ADD CONSTRAINT manager_employee_messages_from_employee_id_fkey FOREIGN KEY (from_employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: manager_employee_messages manager_employee_messages_to_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_employee_messages
    ADD CONSTRAINT manager_employee_messages_to_employee_id_fkey FOREIGN KEY (to_employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: manager_notes manager_notes_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_notes
    ADD CONSTRAINT manager_notes_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: manager_notes manager_notes_manager_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.manager_notes
    ADD CONSTRAINT manager_notes_manager_id_fkey FOREIGN KEY (manager_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: notifications notifications_recipient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_recipient_id_fkey FOREIGN KEY (recipient_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: notifications notifications_sender_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.notifications
    ADD CONSTRAINT notifications_sender_id_fkey FOREIGN KEY (sender_id) REFERENCES public.employees(id) ON DELETE SET NULL;


--
-- Name: peer_feedback peer_feedback_giver_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.peer_feedback
    ADD CONSTRAINT peer_feedback_giver_id_fkey FOREIGN KEY (giver_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: peer_feedback peer_feedback_recipient_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.peer_feedback
    ADD CONSTRAINT peer_feedback_recipient_id_fkey FOREIGN KEY (recipient_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: security_audit security_audit_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_audit
    ADD CONSTRAINT security_audit_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id);


--
-- Name: security_audit security_audit_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.security_audit
    ADD CONSTRAINT security_audit_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id);


--
-- Name: training_requests training_requests_employee_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: -
--

ALTER TABLE ONLY public.training_requests
    ADD CONSTRAINT training_requests_employee_id_fkey FOREIGN KEY (employee_id) REFERENCES public.employees(id) ON DELETE CASCADE;


--
-- Name: assessment_rocks assessment_rocks_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_rocks_access ON public.assessment_rocks TO authenticated USING ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid()))))))))) WITH CHECK ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())))))))));


--
-- Name: assessment_rocks assessment_rocks_all_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_rocks_all_policy ON public.assessment_rocks USING ((assessment_id IN ( SELECT assessments.id
   FROM public.assessments
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (assessments.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid())
         LIMIT 1)) OR (assessments.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())
                 LIMIT 1))))))));


--
-- Name: assessment_scorecard_metrics; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.assessment_scorecard_metrics ENABLE ROW LEVEL SECURITY;

--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_scorecard_metrics_access ON public.assessment_scorecard_metrics TO authenticated USING ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid()))))))))) WITH CHECK ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id IN ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())))))))));


--
-- Name: assessment_scorecard_metrics assessment_scorecard_metrics_all_policy; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessment_scorecard_metrics_all_policy ON public.assessment_scorecard_metrics USING ((assessment_id IN ( SELECT assessments.id
   FROM public.assessments
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (assessments.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid())
         LIMIT 1)) OR (assessments.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())
                 LIMIT 1))))))));


--
-- Name: assessments; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.assessments ENABLE ROW LEVEL SECURITY;

--
-- Name: assessments assessments_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_admin_access ON public.assessments TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: assessments assessments_employee_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_employee_own ON public.assessments TO authenticated USING ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid())))) WITH CHECK ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))));


--
-- Name: assessments assessments_insert_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_insert_own ON public.assessments FOR INSERT TO authenticated WITH CHECK (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: assessments assessments_manager_team; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_manager_team ON public.assessments TO authenticated USING ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.manager_id IN ( SELECT employees_1.id
           FROM public.employees employees_1
          WHERE (employees_1.user_id = auth.uid())))))) WITH CHECK ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.manager_id IN ( SELECT employees_1.id
           FROM public.employees employees_1
          WHERE (employees_1.user_id = auth.uid()))))));


--
-- Name: assessments assessments_select_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_select_own ON public.assessments FOR SELECT TO authenticated USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (employee_id IN ( SELECT e.id
   FROM public.employees e
  WHERE (e.manager_id IN ( SELECT employees.id
           FROM public.employees
          WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: assessments assessments_update_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY assessments_update_own ON public.assessments FOR UPDATE TO authenticated USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (employee_id IN ( SELECT e.id
   FROM public.employees e
  WHERE (e.manager_id IN ( SELECT employees.id
           FROM public.employees
          WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: company_rocks; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.company_rocks ENABLE ROW LEVEL SECURITY;

--
-- Name: company_rocks company_rocks_admin; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY company_rocks_admin ON public.company_rocks TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: company_rocks company_rocks_read; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY company_rocks_read ON public.company_rocks FOR SELECT TO authenticated USING (true);


--
-- Name: departments; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.departments ENABLE ROW LEVEL SECURITY;

--
-- Name: departments departments_select_all; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY departments_select_all ON public.departments FOR SELECT TO authenticated USING (true);


--
-- Name: development_plans; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.development_plans ENABLE ROW LEVEL SECURITY;

--
-- Name: development_plans development_plans_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY development_plans_access ON public.development_plans USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (employee_id IN ( SELECT e.id
   FROM public.employees e
  WHERE (e.manager_id IN ( SELECT employees.id
           FROM public.employees
          WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true))))))));


--
-- Name: development_plans development_plans_insert_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY development_plans_insert_own ON public.development_plans FOR INSERT TO authenticated WITH CHECK ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))));


--
-- Name: development_plans development_plans_select_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY development_plans_select_own ON public.development_plans FOR SELECT TO authenticated USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (manager_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: development_plans development_plans_update_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY development_plans_update_own ON public.development_plans FOR UPDATE TO authenticated USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (manager_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: employee_departments; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.employee_departments ENABLE ROW LEVEL SECURITY;

--
-- Name: employee_departments employee_departments_select_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employee_departments_select_own ON public.employee_departments FOR SELECT TO authenticated USING (((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (employee_id IN ( SELECT e.id
   FROM public.employees e
  WHERE (e.manager_id IN ( SELECT employees.id
           FROM public.employees
          WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))))) OR (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true))))));


--
-- Name: employee_development_goals; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.employee_development_goals ENABLE ROW LEVEL SECURITY;

--
-- Name: employee_development_goals employee_goals_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employee_goals_admin_access ON public.employee_development_goals TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: employee_development_goals employee_goals_manager_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employee_goals_manager_access ON public.employee_development_goals FOR SELECT TO authenticated USING ((employee_id IN ( SELECT employees.id
   FROM public.employees
  WHERE (employees.manager_id = ( SELECT employees_1.id
           FROM public.employees employees_1
          WHERE (employees_1.user_id = auth.uid()))))));


--
-- Name: employee_development_goals employee_goals_own_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employee_goals_own_access ON public.employee_development_goals TO authenticated USING ((employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid())))) WITH CHECK ((employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))));


--
-- Name: employees; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.employees ENABLE ROW LEVEL SECURITY;

--
-- Name: employees employees_admin_all_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_admin_all_access ON public.employees TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: employees employees_own_record; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_own_record ON public.employees FOR SELECT TO authenticated USING ((user_id = auth.uid()));


--
-- Name: employees employees_own_update; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY employees_own_update ON public.employees FOR UPDATE TO authenticated USING ((user_id = auth.uid())) WITH CHECK ((user_id = auth.uid()));


--
-- Name: assessment_feedback feedback_assessment_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY feedback_assessment_access ON public.assessment_feedback TO authenticated USING ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid()))))))))) WITH CHECK ((assessment_id IN ( SELECT a.id
   FROM public.assessments a
  WHERE ((auth.email() = 'admin@lucerne.com'::text) OR (a.employee_id = ( SELECT employees.id
           FROM public.employees
          WHERE (employees.user_id = auth.uid()))) OR (a.employee_id IN ( SELECT employees.id
           FROM public.employees
          WHERE (employees.manager_id = ( SELECT employees_1.id
                   FROM public.employees employees_1
                  WHERE (employees_1.user_id = auth.uid())))))))));


--
-- Name: kudos; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.kudos ENABLE ROW LEVEL SECURITY;

--
-- Name: kudos kudos_own_insert; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY kudos_own_insert ON public.kudos FOR INSERT TO authenticated WITH CHECK ((giver_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))));


--
-- Name: kudos kudos_public_read; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY kudos_public_read ON public.kudos FOR SELECT TO authenticated USING (true);


--
-- Name: manager_employee_messages; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.manager_employee_messages ENABLE ROW LEVEL SECURITY;

--
-- Name: manager_notes; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.manager_notes ENABLE ROW LEVEL SECURITY;

--
-- Name: manager_notes manager_notes_own_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY manager_notes_own_access ON public.manager_notes USING ((manager_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))));


--
-- Name: manager_employee_messages messages_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY messages_admin_access ON public.manager_employee_messages TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: manager_employee_messages messages_participant_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY messages_participant_access ON public.manager_employee_messages TO authenticated USING (((from_employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))) OR (to_employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))))) WITH CHECK (((from_employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid()))) OR (to_employee_id = ( SELECT employees.id
   FROM public.employees
  WHERE (employees.user_id = auth.uid())))));


--
-- Name: notifications; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.notifications ENABLE ROW LEVEL SECURITY;

--
-- Name: notifications notifications_insert_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY notifications_insert_own ON public.notifications FOR INSERT TO authenticated WITH CHECK (((recipient_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))) OR (sender_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true))))));


--
-- Name: notifications notifications_own_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY notifications_own_access ON public.notifications USING ((recipient_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))));


--
-- Name: notifications notifications_select_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY notifications_select_own ON public.notifications FOR SELECT TO authenticated USING ((recipient_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))));


--
-- Name: notifications notifications_update_own; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY notifications_update_own ON public.notifications FOR UPDATE TO authenticated USING ((recipient_id IN ( SELECT employees.id
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.is_active = true)))));


--
-- Name: review_cycles; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.review_cycles ENABLE ROW LEVEL SECURITY;

--
-- Name: review_cycles review_cycles_admin_access; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_admin_access ON public.review_cycles TO authenticated USING ((auth.email() = 'admin@lucerne.com'::text)) WITH CHECK ((auth.email() = 'admin@lucerne.com'::text));


--
-- Name: review_cycles review_cycles_insert_admin; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_insert_admin ON public.review_cycles FOR INSERT TO authenticated WITH CHECK ((EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true)))));


--
-- Name: review_cycles review_cycles_manager_read; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_manager_read ON public.review_cycles FOR SELECT TO authenticated USING (((status = ANY (ARRAY['active'::text, 'upcoming'::text])) AND (EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.id IN ( SELECT DISTINCT employees_1.manager_id
           FROM public.employees employees_1
          WHERE (employees_1.manager_id IS NOT NULL))))))));


--
-- Name: review_cycles review_cycles_select_all; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_select_all ON public.review_cycles FOR SELECT TO authenticated USING (true);


--
-- Name: review_cycles review_cycles_update_admin; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY review_cycles_update_admin ON public.review_cycles FOR UPDATE TO authenticated USING ((EXISTS ( SELECT 1
   FROM public.employees
  WHERE ((employees.user_id = auth.uid()) AND (employees.role = 'admin'::text) AND (employees.is_active = true)))));


--
-- Name: security_audit; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.security_audit ENABLE ROW LEVEL SECURITY;

--
-- Name: security_audit security_audit_admin_read; Type: POLICY; Schema: public; Owner: -
--

CREATE POLICY security_audit_admin_read ON public.security_audit FOR SELECT TO authenticated USING (public.check_user_permission('admin'::text));


--
-- Name: training_requests; Type: ROW SECURITY; Schema: public; Owner: -
--

ALTER TABLE public.training_requests ENABLE ROW LEVEL SECURITY;

--
-- PostgreSQL database dump complete
--




--- FILE: package.json ---

{
  "name": "edge-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@supabase/auth-ui-react": "^0.4.6",
    "@supabase/auth-ui-shared": "^0.1.8",
    "@supabase/supabase-js": "^2.39.0",
    "lucide-react": "^0.294.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-scripts": "5.0.1"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  },
  "devDependencies": {
    "@testing-library/dom": "^10.4.1",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@types/jest": "^30.0.0",
    "@types/react": "^19.1.8",
    "@types/react-dom": "^19.1.6",
    "autoprefixer": "^10.4.21",
    "postcss": "^8.5.6",
    "tailwindcss": "^3.4.17",
    "typescript": "^5.8.3"
  }
}



--- FILE: postcss.config.js ---

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}


--- FILE: README.md ---

# EDGE - Employee Development & Growth Engine

**Document Version: 4.0**  
**Date: July 28, 2025**  
**Status: MVP Stable, Vision Defined**

EDGE is a revolutionary web application designed to transform Lucerne International's quarterly employee review process from a dreaded corporate ritual into a catalyst for meaningful, forward-looking development.

## ðŸŽ¯ The EDGE Philosophy

Traditional performance reviews are fundamentally flawed in the modern workplace. Research and real-world experience have shown them to be backward-looking, anxiety-inducing, and largely ineffective at inspiring genuine growth. Our approach with EDGE is to discard this outdated model entirely and build a tool grounded in modern organizational psychology, behavioral science, and the principles of servant leadership.

### Combating the "4Ps" of Employee Disengagement

EDGE is engineered to directly counteract employee disengagement through:

- **Purpose**: Connecting daily tasks to company mission by tying feedback and goals to Core Values and strategic objectives (Rocks)
- **People**: Building trust through continuous, constructive dialogue instead of high-stakes annual events
- **Process**: Streamlining feedback into simple, intuitive, and transparent digital experiences
- **Power**: Empowering employees to drive their own "Guided Reflection" and growth narrative

By digitally embedding the Entrepreneurial Operating System (EOS), we are creating more than just software. We are building a tool that empowers employees to own their development and equips managers with a clear, objective framework (like the GWC) to become better coaches.

## ðŸ The Vision: What 'Done' Looks Like

The MVP we have built is the foundation. The true destination for EDGE is to evolve from a quarterly review tool into the central, "always-on" nervous system for Lucerne's growth culture. "Done" means achieving these four pillars:

### A. From Quarterly Event to Continuous Dialogue
The formal quarterly review becomes a simple summary of an ongoing conversation that happens inside EDGE, not the start of one.
- **Real-Time Feedback Module**: Any employee can give or request feedback from anyone else at any time
- **"Kudos Wall" Feature**: Public recognition for living Core Values âœ… *Implemented*
- **Gamification Elements**: Points and badges for growth activities

### B. From Subjective Opinion to Data-Enabled Coaching
Managers are empowered with data and insights to evolve from evaluators into world-class coaches.
- **Manager's Playbook**: Private digital notebook for each direct report
- **AI-Powered Coaching Tips**: Integration with personality profiles and coaching guidance

### C. From Static Form to Dynamic Growth Plan
The "review" becomes a living document tracking an employee's journey over time.
- **Individual Development Plan (IDP)**: Dynamic goal setting and tracking âœ… *Implemented*
- **Historical Trend Analysis**: Multi-quarter progress visualization

### D. From HR Tool to Business Intelligence Engine
Aggregated, anonymized data becomes a powerful organizational health tool.
- **Leadership Dashboard**: Real-time view of Core Value alignment, skill gaps, and engagement
- **Predictive Analytics**: Early warning systems for retention and performance issues

## ðŸš€ Current Features (MVP Stable)

### âœ… **Implemented Core Features**
- **Secure Authentication**: Email/password with Supabase Auth
- **Role-Based Access Control**: Employee, Manager, Admin permissions
- **Personalized Dashboards**: User-specific views with active review summaries
- **"Give a Kudo" Feature**: Public recognition tied to Core Values
- **My Reviews History**: Complete assessment timeline for employees
- **My Team Management**: Manager dashboard for direct reports
- **Admin Panel**: Employee management with "Add New Employee" functionality
- **Unified Assessment View**: Intelligent review interface with feedback system
- **Department Assignment**: Multi-department selection for employees

### ðŸ”§ **Technical Architecture**

#### **Frontend**
- **React 18** with functional components and hooks
- **JavaScript ES6+** for rapid development and flexibility
- **Tailwind CSS** for responsive, utility-first styling
- **Lucide React** for consistent iconography

#### **Backend**
- **Supabase** (Backend-as-a-Service) for authentication, database, and real-time features
- **PostgreSQL** with Row Level Security (RLS), triggers, and functions
- **RESTful API** design with RPC functions for complex operations

#### **Security**
- **Enterprise-grade authentication** with Supabase Auth
- **Row Level Security (RLS)** on all database operations
- **CSRF protection** and comprehensive input validation
- **Audit logging** for all critical operations

### ðŸ“Š **Database Schema**
- **employees**: User profiles with role-based permissions
- **review_cycles**: Configurable assessment periods
- **assessments**: Core review data with GWC framework
- **assessment_rocks**: Quarterly objectives tracking
- **assessment_feedback**: Continuous dialogue system
- **kudos**: Recognition and Core Values alignment

## ðŸ› ï¸ Installation & Setup

### Prerequisites
- Node.js 18+ and npm
- Supabase account and project
- Git for version control

### Quick Start

1. **Clone the repository**
   ```bash
   git clone https://github.com/lucerne/edge-app.git
   cd edge-app
   ```

2. **Install dependencies**
   ```bash
   npm install
   ```

3. **Environment setup**
   Create `.env` file with:
   ```env
   REACT_APP_SUPABASE_URL=your_supabase_url
   REACT_APP_SUPABASE_ANON_KEY=your_supabase_anon_key
   REACT_APP_SUPABASE_SERVICE_ROLE_KEY=your_service_role_key
   REACT_APP_ENV=development
   ```

4. **Database setup**
   - Import database schema from backup
   - Configure Row Level Security policies
   - Set up authentication providers

5. **Start development server**
   ```bash
   npm start
   ```

## ðŸ“ Project Structure

```
src/
â”œâ”€â”€ components/
â”‚   â”œâ”€â”€ modals/          # Modal dialogs (CreateEmployee, GiveKudo, etc.)
â”‚   â”œâ”€â”€ pages/           # Main page components (Dashboard, Admin, Assessment)
â”‚   â”œâ”€â”€ shared/          # Shared components (Sidebar)
â”‚   â””â”€â”€ ui/              # Reusable UI components (Button, LoadingSpinner)
â”œâ”€â”€ contexts/            # React Context providers (AppContext)
â”œâ”€â”€ hooks/               # Custom React hooks (useAdmin, useTeam)
â”œâ”€â”€ services/            # API services and data layer
â”œâ”€â”€ types/               # TypeScript type definitions
â””â”€â”€ utils/               # Utility functions (validation, logging)
```

## ðŸ—ºï¸ Development Roadmap

### **Phase 1: Core Stability** âœ… *Complete*
- âœ… Authentication and role-based access
- âœ… Employee management system
- âœ… Basic assessment workflow
- âœ… Kudos and recognition system

### **Phase 2: Enhanced Functionality** ðŸš§ *In Progress*
- [ ] Complete manager review workflow
- [ ] Manager's Playbook implementation
- [ ] Advanced admin CRUD operations
- [ ] Real-time notification system

### **Phase 3: Intelligence Layer** ðŸ“‹ *Planned*
- [ ] AI-powered coaching recommendations
- [ ] Predictive analytics dashboard
- [ ] Advanced reporting and insights
- [ ] Integration with external HR tools

### **Phase 4: Ecosystem Integration** ðŸ”® *Vision*
- [ ] Acumax profile integration
- [ ] Third-party API integrations
- [ ] Mobile application
- [ ] Advanced gamification

## ðŸ”’ Security & Compliance

### **Authentication & Authorization**
- **Supabase Auth** for secure user management
- **JWT tokens** with automatic refresh
- **Role-based permissions** enforced at database level
- **Service role key** for admin operations

### **Data Protection**
- **Input validation** on all user inputs
- **SQL injection protection** via parameterized queries
- **XSS prevention** through proper output encoding
- **CSRF protection** with token validation
- **GDPR-compliant** data handling

## ðŸ§ª Available Scripts

- `npm start` - Start development server
- `npm run build` - Build for production
- `npm test` - Run test suite
- `npm run lint` - Code linting and formatting

## ðŸ¤ Contributing

We welcome contributions! Please follow these guidelines:

1. Fork the repository
2. Create a feature branch: `git checkout -b feature/amazing-feature`
3. Make your changes with proper testing
4. Run linting: `npm run lint`
5. Submit a pull request

## ðŸ“Š Current Status

**Version: MVP 4.0** (Production-Ready)

### âœ… **Strengths**
- **Security**: Enterprise-grade authentication and data protection (9/10)
- **Architecture**: Clean separation of concerns and scalable design (8.5/10)
- **User Experience**: Intuitive interface with role-based workflows (8/10)
- **Core Values Integration**: Built-in EOS framework support (9/10)

### ðŸ”„ **Recent Enhancements**
- **Fixed Sidebar**: Always-visible navigation that doesn't scroll
- **Department Management**: Multi-select department assignment for employees
- **Enhanced Authentication**: Database-driven role assignment
- **Responsive Modals**: Proper scrolling and mobile-friendly design
- **Admin Capabilities**: Full employee creation with password assignment

### ðŸŽ¯ **Next Milestones**
1. **Manager Workflow Completion**: Full review and approval process
2. **Manager's Playbook**: Private notes and coaching tools
3. **Advanced Analytics**: Trend analysis and reporting dashboard
4. **AI Integration**: Smart coaching recommendations and insights

## ðŸ“ž Support

- **Issues**: Report bugs via GitHub Issues
- **Email**: support@lucerne.com
- **Documentation**: See `/docs` folder for detailed guides

---

**Built with â¤ï¸ for Lucerne International by the EDGE Development Team**

*"Transforming performance reviews from corporate ritual to growth catalyst"*


--- FILE: tailwind.config.js ---

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/**/*.{js,jsx,ts,tsx}",
    "./public/index.html"
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}


--- FILE: tsconfig.json ---

{
  "compilerOptions": {
    "target": "es5",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "esModuleInterop": true,
    "allowSyntheticDefaultImports": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noFallthroughCasesInSwitch": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx"
  },
  "include": [
    "src/**/*"
  ],
  "exclude": [
    "node_modules",
    "src/**/*.test.ts",
    "src/**/*.test.tsx"
  ]
}


--- FILE: .claude\settings.local.json ---

{
  "permissions": {
    "allow": [
      "Bash(npm start)",
      "Bash(npx kill-port:*)",
      "Bash(rm:*)",
      "Bash(del database-*.sql)",
      "Bash(touch:*)",
      "Bash(ls:*)",
      "Bash(git add:*)",
      "Bash(git push:*)",
      "Bash(supabase db reset:*)",
      "Bash(psql:*)",
      "Bash(supabase db push:*)",
      "Bash(del:*)",
      "Bash(find:*)",
      "Bash(npm install:*)",
      "Bash(npm run build:*)",
      "Bash(mkdir:*)",
      "Bash(mv:*)",
      "Bash(node:*)",
      "Bash(npm:*)",
      "Bash(npx tsc:*)",
      "Bash(npx tailwindcss:*)",
      "Bash(python:*)",
      "Bash(powershell:*)",
      "Bash(sed:*)",
      "Bash(dir:*)",
      "Bash(npx supabase:*)",
      "Bash(cat:*)",
      "Bash(cp:*)"
    ],
    "deny": []
  }
}


--- FILE: public\favicon.ico ---

         ã  F          )         9  5  @@     °  n  ‰PNG

   IHDR         (-S   äPLTE""""""""""""""""""2PX=r€)7;*:>H¤-BGEˆš8do5Xb6[eK™®Kš¯1MU9gs3S\I“§:gt'03@{‹V¹ÔT´ÏA}V»Ö@y‰6\fH’¦-CII”¨Eˆ›+;@7_i7_jFŠJ–«K›°H£-BHaÚû,@FCƒ”L³&.0W½ÙN£ºI“¨$)+B‘J•ªR¯È?v†>s>u„S±Ê=qP©ÁP¨ÀP§¿,?D4U^%+-M ¶K˜®%+,2OX+<ALœ²#&&D†˜%,.I•©vôTö   tRNSIæçJäeÀe¦   ©IDATxMŽµZEA„ÿÙ³	îî%R¡ïßáTThÇG…»,Á®Å=²Òîmífímnf’A–$â‡>!¦gºôHg½EßÜµ}	Ý»ý‡º¼kdú§¯Jo—™Î3æL"J¹ ›ÌÕüQ‡$âçÄ¼ffµ,é€5i9ÌŸ¯H¨/mB†‡wÍÜw;DØ+&‚W«ª¹¨Dôo@Ê´RI©ÐB¡om.Û³À    IEND®B`‚‰PNG

   IHDR         ×©ÍÊ  ePLTE""""""""""""""""""""""""2RZN¢¹J–«3R[J—¬)59YÁÞ0KS4W`Q«ÄLœ²%+-0JR)6::gtC‚“"##?v†U·Ñ?w†<n{&-/YÂß=q:iuBA}A{ŒB‘/IPP§¿=q€K™®_ÔóL³$();lzR¯ÉaÚûI“¨ZÆã3U^1MU3T]ZÅâI“§X¿ÜF‹ž-BGP¨À6[e,@E5ZdO§¿-BHX¿Û+=AW¾Ú,@FW¼ØQªÃ?v…W¼×+<A@yˆ"#$\Ìê4Wa\ÌëS²Ì$(*.EL^ÑñVºÕ6]h#$%GŽ¡#&';jwV¹Ô-CIL›±ZÄá^Ðï>u„S°Ê/HNM ·_Õõ\ËéM ¶8doD…—D†˜>tƒ+=B[Èæ,>C>t‚<o}@y‰0LS.EKT´Î$'(%,.A~ŽW½ÙC’%+,\ÊèC!ä   tRNS‘íîˆ‰œG¾Ö  OIDATxl‰ÃB¶Q…Ÿu´ß_È³<Ë¦Ýveê²óa6AÎ¾Œûv¢{@Î E' Þd IÕ!çží  ðC—ÔT‹þg  1ÂE(ÏñSQsâiÄ…Zÿ·V¹ Ð)ég!‰ªhÎùtéº-i}˜µµ<Õ?¶lBZaÄ´4{DÓâŒ»_e8¥yÇ­À3ž)Ÿ¥?°f;8.ã¤tÌ=å;	:ã52fKZìlù¨ØšÍ9.ž#ƒÒAÁqÌúÛ®£Vÿ`=$¬Â?_¶¾®ÔqMç.ïJ$
?^q÷ñíÛï.},‚ìsæÝ_TttÔ¾ 1#‰/(ì—-[è`è`ÌÚïÅðZd5’Ž™›?ÎebZ¿Þˆi.Ûæ™ìqÎ„+1°}ÂŒ5ù  ïçd¨G•Ïø    IEND®B`‚‰PNG

   IHDR           D¤ŠÆ  APLTE   """""""""""""""""""""""""""2RZVºÖ_ÔôU·Ñ=r€$()'25]ÎíCƒ•0LS<o}XÀÜX¿Û0JQ=p~D„–<n{VºÕE‡™8do_ÔóEˆšF‹žH‘¥9dp_ÕõH¤I“¨FŒŸ6[e`Ö÷`×øL³/GM_ÓòU¸Ó'02P©Á/IPPªÂX¿Ü&/1;ly3R[`ØøGŽ¡T³Í\ÌêaÚû1OW"##Q«ÄaÙúR®Ç=q€`Öö.EL+=ATµÐ-CIK˜®#&'C‚“^ÐïI”¨&.04U^^Ñð@yˆZÇä$(*[Éç^Ññ,?DR¯É"#$1NV1MTD…—>u„;kxG R¯È/HN&-/@y‰>s>t‚@zŠ]ÍìP¨À$'(D†—]Ïî<n|0JRU·Ò×\¼   	tRNS %­ñ'ïó(ò~ÑÝè  žIDATx“šC1F_Ý¿MmÛ¶4¶m{ÿ˜¤n†çáÓ	®A$–à$b‘ Heø™TãWÄÂh•šh´:PtZQ«0@.`€Þ`4™-V`³Zì&‡A#ÁébkÝÄãñúØ>.''ø`C$FØÏ	‘(±x"6Xác”TÚéL§@Iù;d d-¹|¾P,È”9¡R­ÕÍf3¢¿F½VmMíX§ÚíÍç@Y˜7ÎõºÕN¬=—ŽåÈÊªu}Ö¬«+‘e‡aiq ¤Ö76­íÝ=hûZìíîl›ë‡}á¨Ê±¥[F«I9A¹k9¥ÖëäŒ3¢Ã9Î¡óžqB~Øáb¸ÃåU_¸^Ü [·ôw†ý{z‡v‡z‡Ù(Š£(Š£(þ›†Šfòq”ÉG–Éïkñ”ÏçŠY¾ÿªfäòÇ~à:*4ÓQ\O>Ÿ‘ ‡¼<×“úW£éÍZ|Þ‹Å7“ñ•ïjTÔäãn”½»¢®`$Hð+ò¿GOñûð*èx‹•ø¥X*|”^ÿd    IEND®B`‚‰PNG

   IHDR   @   @   ·ì  :PLTE   """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""%+-@y‰W¼×`×ø^ÑñS²ÌC‚“,>C*8<XÁÝaÚûaÙùMŸµ+<AaÙúXÀÜ#%%TµÐLž´=q>u„K›°`ÖöA}L›±8do=r€%+,@yˆ^ÐïS²Ë)59=q€P©ÁU·Ò"#$PªÂ\Êè0JQQªÃ"##U·Ñ#&&_Ôô>t‚>s`Øø_Ôó5Yc1OW5Zd1NV+=B1MU+;@/GM\Ìê*;?3S\)8<2RZ_Õõ+=A]Ïî,@F,@E&-/0KS7alO¦¾9dp8amB~EˆšP¨ÀN¢¹'023T]]Îí?x‡3U^Cƒ•6\gU¸Ó&.0D„–7_iR­ÆH‘¥I”¨M ¶$(*?v…ZÆãX¿Ü-AG#$%[Éç8co[ÈæW½ÙC’'25?v†8bn%*+Lœ²N£º2PX)7;=p~(58^ÒòP§¿4WaQ«ÄT´Ï0JRQ¬ÅT´ÎI“¨6]hR¯ÉT³Í0LSF‹9eqEˆ›E‰œ9gsFŠCƒ”#&'\Ëé`Ö÷&/16\fB‘A{ŒR®Ç]Íì(47%,.*:>*9=9fr:gt7^iU¶Ð?w†ZÇäX¿Û^ÑðQ­ÅH£)6:V¹Ô'034U^E‡™.EL.FMK™®@zŠS×   tRNS *Ž×øÖ”ý˜	»½•+üùóÔ,ØúôÀ=V  IDATx¤ËµC! ÐïŠ–‡C|ÿãÚ^yR]ÕMÛáO]ßÔÕÝ0NÈ2ÍËí¿"ªª¢(0Vã(ÀY%PDT-~(m¬ó!âKÞY£~´•üIÒf{³ÛÞáa¼§§ô3—ÕOp&”Ð¤‰¡ xŽ÷#Ÿj­ôÚ¶mméòc)]m¤’‡É)Æ§gfçhk²ñÎÒ ægg¦Ç™šìÐ+X€ÅêuiyV×ª·k«°²\[ü:,Ø6ØÜjÄ²;»"»;°×XùþÛfÁáÇÍûý“SÎÎÏÏ8=Þo¾;æèÐ(ƒ‹öÓ¥BkÔeûÍ\7p+mîîáþNÚ<ÀQðOÒæùô³´y‚g»ttÐëo•ý½£ŸìVð»Òäsýü¬™ø”&_ðaüïV~à·Ö?­*8àQ ;8¥Á,¸¤‚f¥“1Üx¤†×§ñŸ*œøÑA¯Ôð°a#±³¶¦#ŠnP‘i+¼¶CÈ,ˆÆèäÍ_áNbÑá‚Ã¸ç •HŽB*ÚÒ¦ L( ^<ñÃ‚L6pJ¾P”É¥Ž©¢%"“R,ä9Èe3eRËa1(
¢ßqÇ8ÙŽ´ŠmKË±mÆ¶mÛü·yi!èÎªYÏuë ÀÏ_Àï?i÷ˆý+òŠÄA|ù{‘˜´?¿_En).JËD¤<€
©¬¢Z\Ts©R*(	¯©JŠ…uX/4J9š¡5·DEµ4kÇ4‡&i¥V4Ú¡®Ð¯†vsf:àg,¢èBC»î$¶ºÍùî‡á–@ôŠI_?<‘!^ŠÈàÓ½ÇöäõB‘%Làw±FD1ŠÁ¨(F€±øH˜%0Æ±¿ÅØ„(¢0ˆÅÄ'Åæ—N.0u„@íY‡PWìIüaNâKš™Ä?ðÓµŒ=Žeœv/c—±ŒÓ0c0÷2Êë:ˆ06R-uÒÄ­\QÌ¶ää´¼µ6R#ÆFš³6Òñ·rÕ­ìu˜æmâðÂž‡Iñi~ –Åü ÃsPþ"± óŸ¼eiyå£ËPšàãÊò’§¡œÝÒ,S]U¦ºV…ªÖ”©®Z¦êoëë·xzã™âÆSnm¬{ÚºwaÙ„Ï…Å»´Ýõ(mg/®þå½À¿¼ûŒ[§b³µq¶Å&Õ¯¹$ñzÈŠ‹H>aÌKT1/æø1O‚‰0¾.hÍ‡YþAÓö£
-ê>Û‹º«¢XÕ¢î}ß¨ëÛÑ;ÃöN´ØvÅýÎ¸ÿ1 ë×ÄO@&v/Äþ_—ö\ôÇ\í.™½+0”;!fÊ¦´Ó%Â JY·O”ÂŽ'/Å]_Š;ßÀ'"&Nªn	aQ^ ”cx¦AáÒ    IEND®B`‚


--- FILE: public\index.html ---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <meta name="theme-color" content="#000000" />
    <meta name="description" content="EDGE - Employee Development & Growth Engine" />
    <title>EDGE | Lucerne International</title>
  </head>
  <body class="bg-gray-900 text-white">
    <noscript>You need to enable JavaScript to run this app.</noscript>
    <div id="root"></div>
  </body>
</html>


--- FILE: public\manifest.json ---

{
  "short_name": "React App",
  "name": "Create React App Sample",
  "icons": [
    {
      "src": "favicon.ico",
      "sizes": "64x64 32x32 24x24 16x16",
      "type": "image/x-icon"
    },
    {
      "src": "logo192.png",
      "type": "image/png",
      "sizes": "192x192"
    },
    {
      "src": "logo512.png",
      "type": "image/png",
      "sizes": "512x512"
    }
  ],
  "start_url": ".",
  "display": "standalone",
  "theme_color": "#000000",
  "background_color": "#ffffff"
}



--- FILE: public\robots.txt ---

# https://www.robotstxt.org/robotstxt.html
User-agent: *
Disallow:



--- FILE: src\App.js ---

// src/App.js - Working Full Version V2.5
// Built on the successful minimal version

import React from 'react';
import { Auth } from '@supabase/auth-ui-react';
import { ThemeSupa } from '@supabase/auth-ui-shared';
import { supabase } from './services';
import { AppProvider, useApp } from './contexts';

// Import components one by one to ensure they work
import Sidebar from './components/shared/Sidebar';
import EnhancedDashboard from './components/pages/EnhancedDashboard';
import MyTeamEnhanced from './components/pages/MyTeamEnhanced';
import ManagerReview from './components/pages/ManagerReview';
import MyReviews from './components/pages/MyReviews';
import MyDevelopmentCenterEnhanced from './components/pages/MyDevelopmentCenterEnhanced';
import Assessment from './components/pages/Assessment';
import Admin from './components/pages/Admin';
import FeedbackWall from './components/pages/FeedbackWall';
import ManagerPlaybook from './components/pages/ManagerPlaybook';

// Import modals
import StartReviewCycleModal from './components/modals/StartReviewCycleModal';
import CreateReviewCycleModal from './components/modals/CreateReviewCycleModal';
import CreateEmployeeModal from './components/modals/CreateEmployeeModal';
import EditEmployeeModal from './components/modals/EditEmployeeModal';
import GiveKudoModal from './components/modals/GiveKudoModal';
import GiveFeedbackModal from './components/modals/GiveFeedbackModal';


// Main App Component
const MainApp = () => {
  const { 
    user, 
    userRole, 
    userName, 
    userDataLoading, 
    activePage, 
    modal, 
    setActivePage, 
    openModal, 
    closeModal, 
    signOut 
  } = useApp();

  // Show loading screen while checking authentication
  if (userDataLoading && user) {
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="text-center">
          <h1 className="text-3xl font-bold text-cyan-400 mb-4">EDGE</h1>
          <p className="text-gray-400">Loading your profile...</p>
          <div className="mt-4 w-8 h-8 border-2 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto"></div>
        </div>
      </div>
    );
  }

  // Show login screen if not authenticated
  if (!user) {
    if (process.env.NODE_ENV === 'development') {
      console.log('ðŸšª Showing login screen');
    }
    return (
      <div className="min-h-screen flex items-center justify-center bg-gray-900">
        <div className="w-full max-w-sm">
          <div className="text-center mb-6">
            <h1 className="text-3xl font-bold text-cyan-400">EDGE</h1>
            <p className="text-gray-400 text-sm">Employee Development & Growth Engine</p>
            <p className="text-xs text-gray-500 mt-2">Version 2.5 - Enhanced with Kudos</p>
          </div>
          <div className="bg-gray-800 p-6 rounded-lg">
            <Auth
              supabaseClient={supabase}
              appearance={{ 
                theme: ThemeSupa,
                style: {
                  button: { 
                    background: '#0891b2', 
                    color: 'white',
                    borderRadius: '0.5rem'
                  },
                  anchor: { color: '#67e8f9' },
                  input: { 
                    background: '#374151',
                    border: '1px solid #4b5563',
                    borderRadius: '0.5rem',
                    color: 'white'
                  }
                }
              }}
              providers={[]}
              view="sign_in"
            />
            
            {/* Test Users Helper */}
            <div className="mt-6 p-4 bg-gray-700 rounded-lg">
              <p className="text-xs text-gray-400 mb-2">Test Users:</p>
              <div className="text-xs text-gray-300 space-y-1">
                <div>â€¢ admin@lucerne.com (Admin)</div>
                <div>â€¢ manager@lucerne.com (Manager)</div>
                <div>â€¢ employee1@lucerne.com (Employee)</div>
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  }

  // Page renderer function
  const PageRenderer = ({ page }) => {
  try {
    switch (page.name) {
      case 'Dashboard':
        return <EnhancedDashboard />;
      case 'My Team':
        return <MyTeamEnhanced />;
      case 'Manager Review':
        return <ManagerReview pageProps={page.props} />;
      case 'My Reviews':
        return <MyReviews />;
      case 'My Development':
        return <MyDevelopmentCenterEnhanced />;
      case 'Admin':
        return <Admin />;
      case 'Assessment':
        return <Assessment pageProps={page.props} />;
      case 'Feedback Wall':
        return <FeedbackWall />;
      case 'Manager Playbook':
        return <ManagerPlaybook />;
      default:
        return <Dashboard />;
    }
  } catch (error) {
    console.error('ðŸ’¥ Error rendering page:', error);
    return (
      <div className="p-8">
        <div className="bg-red-900 border border-red-700 rounded-lg p-4">
          <h2 className="text-red-200 font-bold mb-2">Page Error</h2>
          <p className="text-red-300">Error loading {page.name}: {error.message}</p>
          <button 
            onClick={() => setActivePage({ name: 'Dashboard', props: {} })}
            className="mt-4 bg-red-700 hover:bg-red-600 text-white px-4 py-2 rounded"
          >
            Return to Dashboard
          </button>
        </div>
      </div>
    );
  }
};

  // Secure logging - no sensitive data exposed
  if (process.env.NODE_ENV === 'development') {
    console.log('ðŸ  Main app loaded - Page:', activePage.name, 'User authenticated:', !!user);
  }

  // MAIN APP STRUCTURE
  return (
    <div className="min-h-screen bg-gray-900 text-gray-100">
      {/* SIDEBAR - Fixed positioned */}
      <Sidebar />
      
      {/* MAIN CONTENT - With left margin to account for fixed sidebar */}
      <main className="ml-64 min-h-screen">
        <PageRenderer page={activePage} />
      </main>

      {/* MODALS - Only render when modal.isOpen is true and modal.name matches */}
      {modal.isOpen && modal.name === 'startReviewCycle' && (
        <StartReviewCycleModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Review cycle modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {modal.isOpen && modal.name === 'createReviewCycle' && (
        <CreateReviewCycleModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Create review cycle modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {modal.isOpen && modal.name === 'createEmployee' && (
        <CreateEmployeeModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Create employee modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {modal.isOpen && modal.name === 'editEmployee' && (
        <EditEmployeeModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Edit employee modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {modal.isOpen && modal.name === 'giveKudo' && (
        <GiveKudoModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Give kudo modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {modal.isOpen && modal.name === 'giveFeedback' && (
        <GiveFeedbackModal 
          supabase={supabase} 
          closeModal={closeModal} 
          modalProps={{
            ...modal.props,
            onComplete: () => {
              console.log('âœ… Give feedback modal completed');
              if (modal.props?.onComplete) {
                modal.props.onComplete();
              }
              closeModal();
            }
          }} 
        />
      )}

      {/* DEBUG INFO (only in development) */}
      {process.env.NODE_ENV === 'development' && (
        <div className="fixed bottom-0 left-0 right-0 bg-black bg-opacity-75 text-xs text-gray-400 p-2 border-t border-gray-700">
          Debug: User: {user?.email} | Role: {userRole} | Page: {activePage.name} | Modal: {modal.isOpen ? modal.name : 'none'}
        </div>
      )}
    </div>
  );
};

// App wrapper with provider
export default function App() {
  return (
    <AppProvider>
      <MainApp />
    </AppProvider>
  );
}


--- FILE: src\index.css ---

@tailwind base;
@tailwind components;
@tailwind utilities;


--- FILE: src\index.js ---

import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);


--- FILE: src\setupTests.ts ---

// setupTests.ts - Test environment configuration
import '@testing-library/jest-dom';

// Mock Supabase client for tests
jest.mock('./services/supabaseClient', () => ({
  supabase: {
    auth: {
      getUser: jest.fn(),
      signOut: jest.fn(),
      onAuthStateChange: jest.fn(() => ({
        data: { subscription: { unsubscribe: jest.fn() } }
      }))
    },
    rpc: jest.fn(),
    from: jest.fn(() => ({
      select: jest.fn(() => ({
        order: jest.fn(() => ({ data: [], error: null }))
      }))
    }))
  }
}));

// Mock crypto for CSRF tokens
Object.defineProperty(global, 'crypto', {
  value: {
    randomUUID: () => 'test-uuid-' + Math.random().toString(36).substr(2, 9)
  }
});

// Suppress console.log in tests unless explicitly needed
const originalConsoleLog = console.log;
beforeEach(() => {
  console.log = jest.fn();
});

afterEach(() => {
  console.log = originalConsoleLog;
});


--- FILE: src\components\modals\CreateEmployeeModal.js ---

import React, { useState, useEffect } from 'react';
import { X, User, Mail, Briefcase, Shield, Users, Copy, Check } from 'lucide-react';
import { Button, LoadingSpinner } from '../ui';
import { AdminService } from '../../services';

const CreateEmployeeModal = ({ supabase, closeModal, modalProps }) => {
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    jobTitle: '',
    role: 'employee',
    managerId: '',
    departmentIds: [],
    password: ''
  });
  const [managers, setManagers] = useState([]);
  // Predefined department choices
  const [departments] = useState([
    { id: 'accounting', name: 'Accounting' },
    { id: 'purchasing', name: 'Purchasing' },
    { id: 'engineering', name: 'Engineering' },
    { id: 'executive', name: 'Executive' },
    { id: 'quality', name: 'Quality' },
    { id: 'production', name: 'Production' },
    { id: 'machining', name: 'Machining' },
    { id: 'program-management', name: 'Program Management' },
    { id: 'sales', name: 'Sales' }
  ]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(null);
  const [copied, setCopied] = useState(false);

  useEffect(() => {
    fetchManagers();
  }, []);

  const fetchManagers = async () => {
    try {
      const managersData = await AdminService.getPotentialManagers();
      setManagers(managersData);
    } catch (err) {
      console.error('Error fetching managers:', err);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (error) setError('');
  };

  const handleDepartmentToggle = (departmentId) => {
    setFormData(prev => ({
      ...prev,
      departmentIds: prev.departmentIds.includes(departmentId)
        ? prev.departmentIds.filter(id => id !== departmentId)
        : [...prev.departmentIds, departmentId]
    }));
    if (error) setError('');
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      setError('Employee name is required');
      return false;
    }
    if (!formData.email.trim()) {
      setError('Email is required');
      return false;
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(formData.email)) {
      setError('Please enter a valid email address');
      return false;
    }
    if (!formData.jobTitle.trim()) {
      setError('Job title is required');
      return false;
    }
    if (!formData.password.trim()) {
      setError('Password is required');
      return false;
    }
    if (formData.password.length < 6) {
      setError('Password must be at least 6 characters');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      setLoading(true);
      setError('');

      const result = await AdminService.createEmployee({
        name: formData.name,
        email: formData.email,
        jobTitle: formData.jobTitle,
        role: formData.role,
        managerId: formData.managerId || null,
        password: formData.password
      });

      if (result.success) {
        // Store selected departments for display (since they're predefined choices)
        // Department assignment can be handled later if needed
        setSuccess({
          ...result,
          selectedDepartments: formData.departmentIds.map(id => 
            departments.find(d => d.id === id)?.name
          ).filter(Boolean)
        });
      } else {
        setError(result.error || 'Failed to create employee');
      }
    } catch (err) {
      console.error('Error creating employee:', err);
      setError(err.message || 'Failed to create employee');
    } finally {
      setLoading(false);
    }
  };

  const copyInstructions = () => {
    if (success) {
      const instructions = AdminService.generateInvitationInstructions(
        { ...formData, role: formData.role },
        success.next_steps
      );
      navigator.clipboard.writeText(instructions.copyText);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    }
  };

  const handleFinish = () => {
    if (modalProps?.onComplete) {
      modalProps.onComplete();
    }
    closeModal();
  };

  // Success view
  if (success) {
    const instructions = AdminService.generateInvitationInstructions(
      { ...formData, role: formData.role },
      success.next_steps
    );

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] flex flex-col">
          {/* Header */}
          <div className="flex items-center justify-between p-6 border-b border-gray-700 flex-shrink-0">
            <div className="flex items-center space-x-3">
              <Check className="text-green-400" size={24} />
              <div>
                <h2 className="text-xl font-bold text-white">Employee Created Successfully!</h2>
                <p className="text-gray-400 text-sm">Send invitation instructions to the new employee</p>
              </div>
            </div>
            <button
              onClick={handleFinish}
              className="text-gray-400 hover:text-white transition-colors"
            >
              <X size={24} />
            </button>
          </div>

          {/* Content - Scrollable */}
          <div className="flex-1 overflow-y-auto p-6 space-y-6">
            {/* Employee Summary */}
            <div className="bg-gray-700 rounded-lg p-4">
              <h3 className="text-white font-medium mb-2">New Employee Details</h3>
              <div className="grid grid-cols-2 gap-4 text-sm">
                <div>
                  <span className="text-gray-400">Name:</span>
                  <span className="text-white ml-2">{formData.name}</span>
                </div>
                <div>
                  <span className="text-gray-400">Email:</span>
                  <span className="text-white ml-2">{formData.email}</span>
                </div>
                <div>
                  <span className="text-gray-400">Role:</span>
                  <span className="text-white ml-2 capitalize">{formData.role}</span>
                </div>
                <div>
                  <span className="text-gray-400">Job Title:</span>
                  <span className="text-white ml-2">{formData.jobTitle}</span>
                </div>
                {success.selectedDepartments && success.selectedDepartments.length > 0 && (
                  <div className="col-span-2">
                    <span className="text-gray-400">Departments:</span>
                    <span className="text-white ml-2">
                      {success.selectedDepartments.join(', ')}
                    </span>
                  </div>
                )}
              </div>
            </div>

            {/* Instructions */}
            <div className="space-y-4">
              <h3 className="text-white font-medium">Next Steps:</h3>
              
              <div className="bg-blue-900 bg-opacity-50 rounded-lg p-4 border border-blue-700">
                <h4 className="text-blue-200 font-medium mb-2">ðŸ“§ Email Template</h4>
                <div className="text-blue-300 text-sm space-y-2">
                  <div><strong>Subject:</strong> {instructions.subject}</div>
                  <div className="bg-blue-800 bg-opacity-50 p-3 rounded text-xs whitespace-pre-line">
                    {instructions.body}
                  </div>
                </div>
              </div>

              <div className="bg-gray-700 rounded-lg p-4">
                <h4 className="text-gray-200 font-medium mb-2">Quick Copy</h4>
                <div className="flex items-center space-x-2">
                  <code className="flex-1 text-xs bg-gray-800 p-2 rounded text-gray-300">
                    {instructions.copyText}
                  </code>
                  <Button
                    onClick={copyInstructions}
                    variant="secondary"
                    size="sm"
                  >
                    {copied ? (
                      <>
                        <Check size={14} className="mr-1" />
                        Copied!
                      </>
                    ) : (
                      <>
                        <Copy size={14} className="mr-1" />
                        Copy
                      </>
                    )}
                  </Button>
                </div>
              </div>
            </div>
          </div>

          {/* Actions - Fixed at bottom */}
          <div className="flex justify-end p-6 border-t border-gray-700 flex-shrink-0">
            <Button onClick={handleFinish} variant="primary">
              Done
            </Button>
          </div>
        </div>
      </div>
    );
  }

  // Form view
  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md max-h-[90vh] flex flex-col">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700 flex-shrink-0">
          <div className="flex items-center space-x-3">
            <User className="text-cyan-400" size={24} />
            <div>
              <h2 className="text-xl font-bold text-white">Create New Employee</h2>
              <p className="text-gray-400 text-sm">Add a new team member to EDGE</p>
            </div>
          </div>
          <button
            onClick={closeModal}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        {/* Content - Scrollable */}
        <div className="flex-1 overflow-y-auto">
          <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {error && (
            <div className="bg-red-900 border border-red-700 rounded-lg p-3">
              <p className="text-red-200 text-sm">{error}</p>
            </div>
          )}

          {/* Name */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Full Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="John Doe"
              disabled={loading}
            />
          </div>

          {/* Email */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Email Address *
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="john.doe@company.com"
              disabled={loading}
            />
          </div>

          {/* Password */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Initial Password *
            </label>
            <input
              type="password"
              value={formData.password}
              onChange={(e) => handleInputChange('password', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="Minimum 6 characters"
              disabled={loading}
            />
            <p className="text-xs text-gray-400">
              Employee can change this password after first login
            </p>
          </div>

          {/* Job Title */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Job Title *
            </label>
            <input
              type="text"
              value={formData.jobTitle}
              onChange={(e) => handleInputChange('jobTitle', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="Software Developer"
              disabled={loading}
            />
          </div>

          {/* Role */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Role *
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            >
              <option value="employee">Employee</option>
              <option value="manager">Manager</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          {/* Manager */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Manager (Optional)
            </label>
            <select
              value={formData.managerId}
              onChange={(e) => handleInputChange('managerId', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            >
              <option value="">No Manager</option>
              {managers.map((manager) => (
                <option key={manager.id} value={manager.id}>
                  {manager.name} ({manager.job_title})
                </option>
              ))}
            </select>
          </div>

          {/* Departments */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Departments (Optional)
            </label>
            <div className="grid grid-cols-1 gap-2 p-3 bg-gray-700 border border-gray-600 rounded-md max-h-48 overflow-y-auto">
              {departments.map((department) => (
                <label
                  key={department.id}
                  className="flex items-center space-x-2 cursor-pointer hover:bg-gray-600 p-2 rounded transition-colors"
                >
                  <input
                    type="checkbox"
                    checked={formData.departmentIds.includes(department.id)}
                    onChange={() => handleDepartmentToggle(department.id)}
                    className="w-4 h-4 text-cyan-600 bg-gray-800 border-gray-600 rounded focus:ring-cyan-500 focus:ring-2"
                    disabled={loading}
                  />
                  <span className="text-white text-sm flex-1">{department.name}</span>
                </label>
              ))}
            </div>
            {formData.departmentIds.length > 0 && (
              <p className="text-xs text-gray-400">
                Selected ({formData.departmentIds.length}): {departments.filter(d => formData.departmentIds.includes(d.id)).map(d => d.name).join(', ')}
              </p>
            )}
          </div>

          {/* Info Box */}
          <div className="bg-blue-900 bg-opacity-50 rounded-lg p-4 border border-blue-700">
            <h4 className="text-blue-200 font-medium mb-2">What happens next?</h4>
            <ul className="text-blue-300 text-sm space-y-1">
              <li>â€¢ Employee record will be created in the system</li>
              <li>â€¢ You'll get invitation instructions to send them</li>
              <li>â€¢ They'll need to sign up using the provided email</li>
              <li>â€¢ Role-based permissions will be automatically applied</li>
            </ul>
          </div>

          </form>
        </div>

        {/* Actions - Fixed at bottom */}
        <div className="flex justify-end space-x-3 p-6 border-t border-gray-700 flex-shrink-0">
          <Button
            type="button"
            onClick={closeModal}
            variant="secondary"
            disabled={loading}
          >
            Cancel
          </Button>
          <Button
            onClick={handleSubmit}
            variant="primary"
            disabled={loading || !formData.name.trim() || !formData.email.trim() || !formData.jobTitle.trim() || !formData.password.trim()}
          >
            {loading ? (
              <>
                <LoadingSpinner size="sm" className="mr-2" />
                Creating...
              </>
            ) : (
              <>
                <User size={16} className="mr-2" />
                Create Employee
              </>
            )}
          </Button>
        </div>
      </div>
    </div>
  );
};

export default CreateEmployeeModal;


--- FILE: src\components\modals\CreateReviewCycleModal.js ---

import React, { useState } from 'react';
import { X, Calendar, Plus } from 'lucide-react';
import { Button, LoadingSpinner } from '../ui';

const CreateReviewCycleModal = ({ supabase, closeModal, modalProps }) => {
  const [formData, setFormData] = useState({
    name: '',
    startDate: '',
    endDate: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (error) setError(''); // Clear error when user types
  };

  const validateForm = () => {
    if (!formData.name.trim()) {
      setError('Review cycle name is required');
      return false;
    }
    if (!formData.startDate) {
      setError('Start date is required');
      return false;
    }
    if (!formData.endDate) {
      setError('End date is required');
      return false;
    }
    if (new Date(formData.startDate) >= new Date(formData.endDate)) {
      setError('End date must be after start date');
      return false;
    }
    return true;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      setLoading(true);
      setError('');

      // Step 1: Create the review cycle
      const { data: createData, error: createError } = await supabase.rpc('create_simple_review_cycle', {
        p_name: formData.name.trim(),
        p_start_date: formData.startDate,
        p_end_date: formData.endDate
      });

      if (createError) throw createError;

      if (createData?.error) {
        setError(createData.error);
        return;
      }

      // Step 2: Activate the review cycle using the new reliable function
      const cycleId = createData?.cycle_id;
      if (cycleId) {
        try {
          console.log('Activating review cycle with reliable function:', cycleId);
          const { data: activateData, error: activateError } = await supabase.rpc('activate_review_cycle', {
            p_cycle_id: cycleId
          });
          
          if (activateError) throw activateError;
          
          if (activateData?.error) {
            console.error('Activation error:', activateData.error);
            alert(`Review cycle created but failed to activate: ${activateData.error}`);
          } else {
            alert(`Review cycle activated successfully! Created ${activateData.assessments_created} assessments for all employees.`);
          }
        } catch (err) {
          console.error('Error activating review cycle:', err);
          alert(`Review cycle created but failed to activate: ${err.message}`);
        }
      }

      // Success - call completion callback and close modal
      if (modalProps?.onComplete) {
        modalProps.onComplete();
      }
      
      closeModal();
      
    } catch (err) {
      console.error('Error creating review cycle:', err);
      setError(err.message || 'Failed to create review cycle');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    closeModal();
  };

  // Set default dates (current quarter)
  React.useEffect(() => {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth();
    
    // Default to current quarter
    let startMonth, endMonth;
    if (currentMonth < 3) { // Q1
      startMonth = 0; endMonth = 2;
    } else if (currentMonth < 6) { // Q2
      startMonth = 3; endMonth = 5;
    } else if (currentMonth < 9) { // Q3
      startMonth = 6; endMonth = 8;
    } else { // Q4
      startMonth = 9; endMonth = 11;
    }

    const startDate = new Date(currentYear, startMonth, 1).toISOString().split('T')[0];
    const endDate = new Date(currentYear, endMonth + 1, 0).toISOString().split('T')[0];
    
    setFormData(prev => ({
      ...prev,
      startDate: prev.startDate || startDate,
      endDate: prev.endDate || endDate
    }));
  }, []);

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <div className="flex items-center space-x-3">
            <Calendar className="text-cyan-400" size={24} />
            <div>
              <h2 className="text-xl font-bold text-white">Create Review Cycle</h2>
              <p className="text-gray-400 text-sm">Set up a new quarterly review period</p>
            </div>
          </div>
          <button
            onClick={handleCancel}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        {/* Content */}
        <form onSubmit={handleSubmit} className="p-6 space-y-4">
          {error && (
            <div className="bg-red-900 border border-red-700 rounded-lg p-3">
              <p className="text-red-200 text-sm">{error}</p>
            </div>
          )}

          {/* Review Cycle Name */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Review Cycle Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="e.g., Q4 2024 Performance Review"
              disabled={loading}
            />
          </div>

          {/* Start Date */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Start Date *
            </label>
            <input
              type="date"
              value={formData.startDate}
              onChange={(e) => handleInputChange('startDate', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            />
          </div>

          {/* End Date */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              End Date *
            </label>
            <input
              type="date"
              value={formData.endDate}
              onChange={(e) => handleInputChange('endDate', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            />
          </div>

          {/* Info Box */}
          <div className="bg-blue-900 bg-opacity-50 rounded-lg p-4 border border-blue-700">
            <h4 className="text-blue-200 font-medium mb-2">Review Cycle Info:</h4>
            <ul className="text-blue-300 text-sm space-y-1">
              <li>â€¢ Creates a new performance review period</li>
              <li>â€¢ Employees can complete self-assessments</li>
              <li>â€¢ Managers can review and provide feedback</li>
              <li>â€¢ Cycle starts in "upcoming" status</li>
            </ul>
          </div>

          {/* Actions */}
          <div className="flex justify-end space-x-3 pt-4">
            <Button
              type="button"
              onClick={handleCancel}
              variant="secondary"
              disabled={loading}
            >
              Cancel
            </Button>
            <Button
              type="submit"
              variant="primary"
              disabled={loading || !formData.name.trim() || !formData.startDate || !formData.endDate}
            >
              {loading ? (
                <>
                  <LoadingSpinner size="sm" className="mr-2" />
                  Creating...
                </>
              ) : (
                <>
                  <Plus size={16} className="mr-2" />
                  Create Cycle
                </>
              )}
            </Button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default CreateReviewCycleModal;


--- FILE: src\components\modals\EditEmployeeModal.js ---

import React, { useState, useEffect } from 'react';
import { X, User, Mail, Briefcase, Shield, Users, Save, Trash2 } from 'lucide-react';
import { Button, LoadingSpinner } from '../ui';
import { AdminService } from '../../services';
import { validateEmployeeForm } from '../../utils/validation';

const EditEmployeeModal = ({ supabase, closeModal, modalProps }) => {
  const { employee, onComplete } = modalProps;
  
  const [formData, setFormData] = useState({
    name: employee?.name || '',
    email: employee?.email || '',
    jobTitle: employee?.job_title || '',
    role: employee?.role || 'employee',
    managerId: employee?.manager_id || '',
    isActive: employee?.is_active !== false,
    departmentIds: []
  });
  
  const [managers, setManagers] = useState([]);
  const [departments, setDepartments] = useState([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [hasChanges, setHasChanges] = useState(false);

  useEffect(() => {
    fetchManagers();
    fetchDepartments();
    fetchEmployeeDetails();
  }, []);

  useEffect(() => {
    // Check if form data has changed from original
    const original = {
      name: employee?.name || '',
      email: employee?.email || '',
      jobTitle: employee?.job_title || '',
      role: employee?.role || 'employee',
      managerId: employee?.manager_id || '',
      isActive: employee?.is_active !== false,
      departmentIds: []
    };
    
    const changed = Object.keys(formData).some(key => formData[key] !== original[key]);
    setHasChanges(changed);
  }, [formData, employee]);

  const fetchManagers = async () => {
    try {
      const managersData = await AdminService.getPotentialManagers();
      setManagers(managersData);
    } catch (err) {
      console.error('Error fetching managers:', err);
    }
  };

  const fetchDepartments = async () => {
    try {
      const response = await supabase.rpc('get_all_departments');
      if (response.data) {
        setDepartments(response.data);
      }
    } catch (err) {
      console.error('Error fetching departments:', err);
    }
  };

  const fetchEmployeeDetails = async () => {
    try {
      const response = await supabase.rpc('get_employee_with_departments', {
        p_employee_id: employee.id
      });
      if (response.data && !response.data.error) {
        const departments = response.data.departments || [];
        setFormData(prev => ({
          ...prev,
          departmentIds: departments
        }));
      }
    } catch (err) {
      console.error('Error fetching employee details:', err);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    if (error) setError('');
  };

  const handleDepartmentToggle = (departmentId) => {
    setFormData(prev => ({
      ...prev,
      departmentIds: prev.departmentIds.includes(departmentId)
        ? prev.departmentIds.filter(id => id !== departmentId)
        : [...prev.departmentIds, departmentId]
    }));
    if (error) setError('');
  };

  const validateForm = () => {
    // Only validate changed fields
    const validation = validateEmployeeForm(formData);
    if (!validation.isValid) {
      setError(Object.values(validation.errors).join(', '));
      return false;
    }
    return true;
  };

  const handleSave = async () => {
    if (!validateForm()) return;
    if (!hasChanges) {
      setError('No changes to save');
      return;
    }

    try {
      setLoading(true);
      setError('');

      // Prepare update data - only include changed fields
      const updateData = {};
      const original = {
        name: employee?.name || '',
        email: employee?.email || '',
        jobTitle: employee?.job_title || '',
        role: employee?.role || 'employee',
        managerId: employee?.manager_id || '',
        isActive: employee?.is_active !== false
      };

      Object.keys(formData).forEach(key => {
        if (formData[key] !== original[key]) {
          updateData[key] = formData[key];
        }
      });

      const result = await AdminService.updateEmployee(employee.id, updateData);

      if (result.success) {
        // Update departments if they changed
        try {
          await supabase.rpc('set_employee_departments', {
            p_employee_id: employee.id,
            p_department_ids: formData.departmentIds
          });
        } catch (deptErr) {
          console.error('Error updating employee departments:', deptErr);
          // Still proceed with success, but note the department update may have failed
        }

        if (onComplete) onComplete();
        closeModal();
        // Show success message
        setTimeout(() => {
          alert('Employee updated successfully!');
        }, 100);
      } else {
        setError(result.error || 'Failed to update employee');
      }
    } catch (err) {
      console.error('Error updating employee:', err);
      setError(err.message || 'Failed to update employee');
    } finally {
      setLoading(false);
    }
  };

  const handleDeactivate = async () => {
    if (!confirm(`Are you sure you want to ${formData.isActive ? 'deactivate' : 'reactivate'} ${employee.name}?`)) {
      return;
    }

    try {
      setLoading(true);
      setError('');

      const result = await AdminService.updateEmployee(employee.id, {
        isActive: !formData.isActive
      });

      if (result.success) {
        setFormData(prev => ({ ...prev, isActive: !prev.isActive }));
        if (onComplete) onComplete();
        alert(`Employee ${!formData.isActive ? 'reactivated' : 'deactivated'} successfully!`);
      } else {
        setError(result.error || 'Failed to update employee status');
      }
    } catch (err) {
      console.error('Error updating employee status:', err);
      setError(err.message || 'Failed to update employee status');
    } finally {
      setLoading(false);
    }
  };

  const handleCancel = () => {
    if (hasChanges && !confirm('You have unsaved changes. Are you sure you want to close?')) {
      return;
    }
    closeModal();
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <div className="flex items-center space-x-3">
            <User className="text-cyan-400" size={24} />
            <div>
              <h2 className="text-xl font-bold text-white">Edit Employee</h2>
              <p className="text-gray-400 text-sm">Update {employee?.name}'s information</p>
            </div>
          </div>
          <button
            onClick={handleCancel}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6 space-y-4">
          {error && (
            <div className="bg-red-900 border border-red-700 rounded-lg p-3">
              <p className="text-red-200 text-sm">{error}</p>
            </div>
          )}

          {/* Current Status */}
          <div className="bg-gray-700 rounded-lg p-3">
            <div className="flex items-center justify-between">
              <span className="text-gray-300 text-sm">Status:</span>
              <span className={`px-2 py-1 rounded text-xs font-medium ${
                formData.isActive 
                  ? 'bg-green-900 text-green-200' 
                  : 'bg-red-900 text-red-200'
              }`}>
                {formData.isActive ? 'Active' : 'Inactive'}
              </span>
            </div>
          </div>

          {/* Name */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Full Name *
            </label>
            <input
              type="text"
              value={formData.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="John Doe"
              disabled={loading}
            />
          </div>

          {/* Email */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Email Address *
            </label>
            <input
              type="email"
              value={formData.email}
              onChange={(e) => handleInputChange('email', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="john.doe@company.com"
              disabled={loading}
            />
          </div>

          {/* Job Title */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Job Title *
            </label>
            <input
              type="text"
              value={formData.jobTitle}
              onChange={(e) => handleInputChange('jobTitle', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              placeholder="Software Developer"
              disabled={loading}
            />
          </div>

          {/* Role */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Role *
            </label>
            <select
              value={formData.role}
              onChange={(e) => handleInputChange('role', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            >
              <option value="employee">Employee</option>
              <option value="manager">Manager</option>
              <option value="admin">Admin</option>
            </select>
          </div>

          {/* Manager */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Manager (Optional)
            </label>
            <select
              value={formData.managerId}
              onChange={(e) => handleInputChange('managerId', e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              disabled={loading}
            >
              <option value="">No Manager</option>
              {managers.map((manager) => (
                <option key={manager.id} value={manager.id}>
                  {manager.name} ({manager.job_title})
                </option>
              ))}
            </select>
          </div>

          {/* Departments */}
          <div className="space-y-2">
            <label className="block text-sm font-medium text-gray-300">
              Departments (Optional)
            </label>
            <div className="grid grid-cols-2 gap-2 p-3 bg-gray-700 border border-gray-600 rounded-md">
              {departments.map((department) => (
                <label
                  key={department.id}
                  className="flex items-center space-x-2 cursor-pointer hover:bg-gray-600 p-2 rounded"
                >
                  <input
                    type="checkbox"
                    checked={formData.departmentIds.includes(department.id)}
                    onChange={() => handleDepartmentToggle(department.id)}
                    className="w-4 h-4 text-cyan-600 bg-gray-800 border-gray-600 rounded focus:ring-cyan-500 focus:ring-2"
                    disabled={loading}
                  />
                  <span className="text-white text-sm">{department.name}</span>
                </label>
              ))}
            </div>
            {formData.departmentIds.length > 0 && (
              <p className="text-xs text-gray-400">
                Selected: {departments.filter(d => formData.departmentIds.includes(d.id)).map(d => d.name).join(', ')}
              </p>
            )}
          </div>

          {/* Change Indicator */}
          {hasChanges && (
            <div className="bg-blue-900 bg-opacity-50 rounded-lg p-3 border border-blue-700">
              <p className="text-blue-200 text-sm">
                âš ï¸ You have unsaved changes
              </p>
            </div>
          )}

          {/* Actions */}
          <div className="flex flex-col space-y-3 pt-4">
            {/* Save Button */}
            <Button
              onClick={handleSave}
              variant="primary"
              disabled={loading || !hasChanges}
              className="w-full"
            >
              {loading ? (
                <>
                  <LoadingSpinner size="sm" className="mr-2" />
                  Saving...
                </>
              ) : (
                <>
                  <Save size={16} className="mr-2" />
                  Save Changes
                </>
              )}
            </Button>

            {/* Secondary Actions */}
            <div className="flex space-x-3">
              <Button
                onClick={handleDeactivate}
                variant={formData.isActive ? "danger" : "success"}
                disabled={loading}
                className="flex-1"
              >
                {formData.isActive ? (
                  <>
                    <Trash2 size={16} className="mr-2" />
                    Deactivate
                  </>
                ) : (
                  <>
                    <User size={16} className="mr-2" />
                    Reactivate
                  </>
                )}
              </Button>

              <Button
                onClick={handleCancel}
                variant="secondary"
                disabled={loading}
                className="flex-1"
              >
                Cancel
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default EditEmployeeModal;


--- FILE: src\components\modals\GiveFeedbackModal.js ---

import React, { useState, useEffect } from 'react';
import { X, Send, MessageSquare, User, Star, AlertCircle } from 'lucide-react';
import { Button, LoadingSpinner } from '../ui';
import { useApp } from '../../contexts';

const GiveFeedbackModal = ({ supabase, closeModal, modalProps }) => {
  const { userName } = useApp();
  const [employees, setEmployees] = useState([]);
  const [loading, setLoading] = useState(true);
  const [submitting, setSubmitting] = useState(false);
  const [formData, setFormData] = useState({
    recipientId: modalProps?.recipientId || '',
    feedbackType: 'positive',
    message: '',
    category: 'general',
    anonymous: false
  });
  const [errors, setErrors] = useState({});

  useEffect(() => {
    fetchEmployees();
  }, []);

  const fetchEmployees = async () => {
    try {
      const { data, error } = await supabase.rpc('get_employees_for_feedback');
      if (error) throw error;
      setEmployees(data || []);
    } catch (error) {
      console.error('Error fetching employees:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // Clear error when user starts typing
    if (errors[field]) {
      setErrors(prev => ({ ...prev, [field]: null }));
    }
  };

  const validateForm = () => {
    const newErrors = {};

    if (!formData.recipientId) {
      newErrors.recipientId = 'Please select a recipient';
    }
    if (!formData.message.trim()) {
      newErrors.message = 'Please provide feedback message';
    }
    if (formData.message.trim().length < 10) {
      newErrors.message = 'Feedback should be at least 10 characters';
    }
    if (formData.message.trim().length > 500) {
      newErrors.message = 'Feedback should be less than 500 characters';
    }

    setErrors(newErrors);
    return Object.keys(newErrors).length === 0;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    if (!validateForm()) return;

    try {
      setSubmitting(true);
      
      const { error } = await supabase.rpc('give_peer_feedback', {
        p_recipient_id: formData.recipientId,
        p_feedback_type: formData.feedbackType,
        p_message: formData.message.trim(),
        p_category: formData.category,
        p_is_anonymous: formData.anonymous
      });

      if (error) throw error;

      // Call completion callback
      if (modalProps?.onComplete) {
        modalProps.onComplete();
      }

      closeModal();
      
      // Show success message
      alert('Feedback sent successfully! This will help foster continuous dialogue and growth.');
      
    } catch (error) {
      console.error('Error submitting feedback:', error);
      alert('Error sending feedback: ' + error.message);
    } finally {
      setSubmitting(false);
    }
  };

  const feedbackTypes = [
    { value: 'positive', label: 'Positive Recognition', icon: Star, color: 'text-yellow-400' },
    { value: 'constructive', label: 'Constructive Feedback', icon: MessageSquare, color: 'text-blue-400' },
    { value: 'appreciation', label: 'Thank You', icon: User, color: 'text-green-400' }
  ];

  const categories = [
    { value: 'general', label: 'General Feedback' },
    { value: 'teamwork', label: 'Teamwork & Collaboration' },
    { value: 'communication', label: 'Communication' },
    { value: 'core_values', label: 'Core Values Demonstration' },
    { value: 'innovation', label: 'Innovation & Problem Solving' },
    { value: 'leadership', label: 'Leadership & Initiative' }
  ];

  return (
    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
      <div className="bg-gray-800 rounded-lg shadow-2xl w-full max-w-2xl max-h-[90vh] overflow-y-auto">
        {/* Header */}
        <div className="flex items-center justify-between p-6 border-b border-gray-700">
          <div className="flex items-center space-x-3">
            <MessageSquare className="text-cyan-400" size={24} />
            <div>
              <h2 className="text-xl font-bold text-white">Give Real-Time Feedback</h2>
              <p className="text-gray-400 text-sm">Foster continuous dialogue and growth</p>
            </div>
          </div>
          <button
            onClick={closeModal}
            className="text-gray-400 hover:text-white transition-colors"
          >
            <X size={24} />
          </button>
        </div>

        {/* Content */}
        <div className="p-6">
          {loading ? (
            <div className="text-center py-8">
              <LoadingSpinner size="md" message="Loading employees..." />
            </div>
          ) : (
            <form onSubmit={handleSubmit} className="space-y-6">
              {/* Recipient Selection */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-300">
                  Give feedback to: *
                </label>
                <select
                  value={formData.recipientId}
                  onChange={(e) => handleInputChange('recipientId', e.target.value)}
                  className={`w-full p-3 bg-gray-700 border rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent ${
                    errors.recipientId ? 'border-red-500' : 'border-gray-600'
                  }`}
                >
                  <option value="">Select a colleague...</option>
                  {employees.map(employee => (
                    <option key={employee.employee_id} value={employee.employee_id}>
                      {employee.name} - {employee.job_title || 'Employee'}
                    </option>
                  ))}
                </select>
                {errors.recipientId && (
                  <p className="text-red-400 text-sm flex items-center">
                    <AlertCircle size={14} className="mr-1" />
                    {errors.recipientId}
                  </p>
                )}
              </div>

              {/* Feedback Type */}
              <div className="space-y-3">
                <label className="block text-sm font-medium text-gray-300">
                  Feedback Type: *
                </label>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  {feedbackTypes.map(type => {
                    const Icon = type.icon;
                    return (
                      <button
                        key={type.value}
                        type="button"
                        onClick={() => handleInputChange('feedbackType', type.value)}
                        className={`p-3 border rounded-lg text-left transition-colors ${
                          formData.feedbackType === type.value
                            ? 'border-cyan-500 bg-cyan-900 bg-opacity-50'
                            : 'border-gray-600 bg-gray-700 hover:border-gray-500'
                        }`}
                      >
                        <div className="flex items-center space-x-2">
                          <Icon size={18} className={type.color} />
                          <span className="text-white text-sm font-medium">{type.label}</span>
                        </div>
                      </button>
                    );
                  })}
                </div>
              </div>

              {/* Category */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-300">
                  Category:
                </label>
                <select
                  value={formData.category}
                  onChange={(e) => handleInputChange('category', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                >
                  {categories.map(category => (
                    <option key={category.value} value={category.value}>
                      {category.label}
                    </option>
                  ))}
                </select>
              </div>

              {/* Feedback Message */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-gray-300">
                  Your Feedback: *
                </label>
                <textarea
                  value={formData.message}
                  onChange={(e) => handleInputChange('message', e.target.value)}
                  className={`w-full p-3 bg-gray-700 border rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent ${
                    errors.message ? 'border-red-500' : 'border-gray-600'
                  }`}
                  rows={4}
                  placeholder={
                    formData.feedbackType === 'positive' 
                      ? "Share what they did well and how it made a positive impact..."
                      : formData.feedbackType === 'constructive'
                      ? "Provide specific, actionable feedback to help them grow..."
                      : "Express your appreciation for their help, support, or collaboration..."
                  }
                />
                <div className="flex justify-between items-center">
                  {errors.message ? (
                    <p className="text-red-400 text-sm flex items-center">
                      <AlertCircle size={14} className="mr-1" />
                      {errors.message}
                    </p>
                  ) : (
                    <p className="text-gray-400 text-xs">
                      {formData.message.length}/500 characters
                    </p>
                  )}
                </div>
              </div>

              {/* Anonymous Option */}
              <div className="flex items-center space-x-3">
                <input
                  type="checkbox"
                  id="anonymous"
                  checked={formData.anonymous}
                  onChange={(e) => handleInputChange('anonymous', e.target.checked)}
                  className="w-4 h-4 text-cyan-600 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
                />
                <label htmlFor="anonymous" className="text-sm text-gray-300">
                  Send this feedback anonymously
                </label>
              </div>

              {/* Guidelines */}
              <div className="bg-blue-900 bg-opacity-50 rounded-lg p-4 border border-blue-700">
                <h4 className="text-blue-200 font-medium mb-2">Feedback Guidelines:</h4>
                <ul className="text-blue-300 text-xs space-y-1">
                  <li>â€¢ Be specific and focus on behaviors, not personality</li>
                  <li>â€¢ Provide actionable insights when giving constructive feedback</li>
                  <li>â€¢ Celebrate wins and recognize great work with positive feedback</li>
                  <li>â€¢ Keep it professional and respectful</li>
                  <li>â€¢ Focus on growth and improvement opportunities</li>
                </ul>
              </div>

              {/* Actions */}
              <div className="flex justify-end space-x-3 pt-4 border-t border-gray-700">
                <Button
                  type="button"
                  onClick={closeModal}
                  variant="secondary"
                  disabled={submitting}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  variant="primary"
                  disabled={submitting || !formData.recipientId || !formData.message.trim()}
                >
                  {submitting ? (
                    <>
                      <LoadingSpinner size="sm" className="mr-2" />
                      Sending...
                    </>
                  ) : (
                    <>
                      <Send size={16} className="mr-2" />
                      Send Feedback
                    </>
                  )}
                </Button>
              </div>
            </form>
          )}
        </div>
      </div>
    </div>
  );
};

export default GiveFeedbackModal;


--- FILE: src\components\modals\GiveKudoModal.js ---

// src/components/modals/GiveKudoModal.js
import React, { useState, useEffect } from 'react';
import { Award, X } from 'lucide-react';

const GiveKudoModal = ({ supabase, closeModal, modalProps }) => {
    const [employees, setEmployees] = useState([]);
    const [selectedEmployee, setSelectedEmployee] = useState('');
    const [selectedCoreValue, setSelectedCoreValue] = useState('');
    const [comment, setComment] = useState('');
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState('');
    const [submitting, setSubmitting] = useState(false);

    const coreValues = [
        "Passionate about our purpose",
        "Driven to be the best",
        "Resilient, rising stronger together",
        "Respond swiftly and positively"
    ];

    useEffect(() => {
        const fetchEmployees = async () => {
            try {
                const { data, error } = await supabase.rpc('get_all_employees');
                if (error) throw error;
                setEmployees(data || []);
            } catch (err) {
                setError(err.message);
            } finally {
                setLoading(false);
            }
        };
        fetchEmployees();
    }, [supabase]);

    const handleSubmit = async (e) => {
        e.preventDefault();
        
        if (!selectedEmployee || !selectedCoreValue || !comment.trim()) {
            setError('All fields are required.');
            return;
        }
        
        setError('');
        setSubmitting(true);

        try {
            const { data, error: rpcError } = await supabase.rpc('give_kudo', {
                p_receiver_id: selectedEmployee,
                p_core_value: selectedCoreValue,
                p_comment: comment.trim()
            });
            
            if (rpcError) throw rpcError;

            if (data.success) {
                // Call the onComplete callback if provided
                if (modalProps?.onComplete) {
                    modalProps.onComplete();
                }
                closeModal();
            } else {
                setError(data.error || 'Failed to send kudo');
            }
        } catch (err) {
            setError(`Failed to send kudo: ${err.message}`);
        } finally {
            setSubmitting(false);
        }
    };

    const resetForm = () => {
        setSelectedEmployee('');
        setSelectedCoreValue('');
        setComment('');
        setError('');
    };

    return (
        <div className="fixed inset-0 bg-black bg-opacity-75 flex justify-center items-center z-50">
            <div className="bg-gray-800 rounded-lg shadow-2xl p-8 w-full max-w-2xl">
                {/* Header */}
                <div className="flex justify-between items-center mb-6">
                    <div className="flex items-center">
                        <Award className="text-yellow-400 mr-3" size={24} />
                        <h3 className="text-2xl font-bold text-yellow-400">Give a Kudo</h3>
                    </div>
                    <button 
                        onClick={closeModal} 
                        className="text-gray-400 hover:text-white text-2xl"
                    >
                        <X size={24} />
                    </button>
                </div>

                {loading ? (
                    <div className="text-center py-8">
                        <div className="text-yellow-400">Loading employees...</div>
                    </div>
                ) : (
                    <form onSubmit={handleSubmit} className="space-y-6">
                        {/* Employee Selection */}
                        <div>
                            <label htmlFor="employee" className="block text-sm font-medium text-gray-300 mb-2">
                                To: *
                            </label>
                            <select
                                id="employee"
                                value={selectedEmployee}
                                onChange={(e) => setSelectedEmployee(e.target.value)}
                                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-yellow-500"
                                required
                            >
                                <option value="">Select Employee</option>
                                {employees.map(emp => (
                                    <option key={emp.id} value={emp.id}>
                                        {emp.name} ({emp.email})
                                    </option>
                                ))}
                            </select>
                        </div>

                        {/* Core Value Selection */}
                        <div>
                            <label htmlFor="coreValue" className="block text-sm font-medium text-gray-300 mb-2">
                                For (Core Value): *
                            </label>
                            <select
                                id="coreValue"
                                value={selectedCoreValue}
                                onChange={(e) => setSelectedCoreValue(e.target.value)}
                                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-yellow-500"
                                required
                            >
                                <option value="">Select Core Value</option>
                                {coreValues.map(cv => (
                                    <option key={cv} value={cv}>{cv}</option>
                                ))}
                            </select>
                        </div>

                        {/* Comment */}
                        <div>
                            <label htmlFor="comment" className="block text-sm font-medium text-gray-300 mb-2">
                                Comment: *
                            </label>
                            <textarea
                                id="comment"
                                value={comment}
                                onChange={(e) => setComment(e.target.value)}
                                placeholder="Describe what this person did that exemplifies this core value..."
                                rows="4"
                                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:outline-none focus:ring-2 focus:ring-yellow-500 resize-none"
                                required
                            />
                            <div className="text-xs text-gray-500 mt-1 flex justify-between">
                                <span>Be specific about what they did that was great!</span>
                                <span>{comment.length}/500</span>
                            </div>
                        </div>

                        {/* Error Display */}
                        {error && (
                            <div className="p-3 bg-red-900 rounded border border-red-700 text-red-200">
                                {error}
                            </div>
                        )}

                        {/* Action Buttons */}
                        <div className="flex justify-end space-x-4 pt-6 border-t border-gray-700">
                            <button
                                type="button"
                                onClick={closeModal}
                                className="px-6 py-2 bg-gray-600 hover:bg-gray-700 rounded-md text-white transition"
                            >
                                Cancel
                            </button>
                            <button
                                type="button"
                                onClick={resetForm}
                                className="px-6 py-2 bg-gray-700 hover:bg-gray-600 rounded-md text-white transition"
                            >
                                Reset
                            </button>
                            <button
                                type="submit"
                                disabled={submitting || !selectedEmployee || !selectedCoreValue || !comment.trim()}
                                className="px-6 py-2 bg-yellow-500 hover:bg-yellow-600 text-black font-bold rounded-md disabled:bg-gray-500 disabled:text-gray-300 transition flex items-center"
                            >
                                {submitting ? (
                                    <>
                                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-black mr-2"></div>
                                        Sending...
                                    </>
                                ) : (
                                    <>
                                        <Award size={16} className="mr-2" />
                                        Send Kudo
                                    </>
                                )}
                            </button>
                        </div>
                    </form>
                )}

                {/* Tips */}
                <div className="mt-6 p-4 bg-yellow-900 rounded-lg border border-yellow-700">
                    <h4 className="text-yellow-200 font-semibold mb-2">Tips for Great Kudos:</h4>
                    <ul className="text-yellow-300 text-sm space-y-1">
                        <li>â€¢ Be specific about what they did</li>
                        <li>â€¢ Explain the positive impact it had</li>
                        <li>â€¢ Connect it clearly to the core value</li>
                        <li>â€¢ Make it personal and meaningful</li>
                    </ul>
                </div>
            </div>
        </div>
    );
};

export default GiveKudoModal;


--- FILE: src\components\modals\Modal.js ---

import React from 'react';
import { X } from 'lucide-react';

export default function Modal({ children, closeModal }) {
  return (
    <div className="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center z-50">
      <div className="bg-gray-900 rounded-xl shadow-lg w-full max-w-lg relative p-6">
        <button onClick={closeModal} className="absolute top-4 right-4 text-gray-400 hover:text-white">
          <X size={20} />
        </button>
        {children}
      </div>
    </div>
  );
}


--- FILE: src\components\modals\StartReviewCycleModal.js ---

import React, { useEffect, useState } from 'react';

export default function StartReviewCycleModal({ supabase, closeModal, modalProps }) {
  const [cycles, setCycles] = useState([]);
  const [selected, setSelected] = useState('');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchCycles = async () => {
      const { data, error } = await supabase
        .from('review_cycles')
        .select('id, name, status')
        .eq('status', 'active');
      if (error) setError(error.message);
      else setCycles(data);
      setLoading(false);
    };
    fetchCycles();
  }, [supabase]);

  const start = async () => {
    if (!selected) return;
    setSubmitting(true);
    const { error } = await supabase.rpc('start_review_cycle_for_my_team', { cycle_id_to_start: selected });
    if (error) setError(error.message);
    else {
      if (modalProps?.afterSave) await modalProps.afterSave();
      closeModal();
    }
    setSubmitting(false);
  };

  if (loading) return <div>Loadingâ€¦</div>;
  return (
    <div>
      <h2 className="text-xl font-semibold mb-4">Start Review Cycle</h2>
      {error && <p className="text-red-400 mb-2">{error}</p>}
      <label className="block mb-4">
        <span className="text-sm">Select Active Cycle</span>
        <select
          value={selected}
          onChange={(e) => setSelected(parseInt(e.target.value))}
          className="mt-1 w-full bg-gray-800 border border-gray-700 rounded-lg p-2">
          <option value="">â€” choose â€”</option>
          {cycles.map((c) => (
            <option key={c.id} value={c.id}>{c.name}</option>
          ))}
        </select>
      </label>
      <div className="flex justify-end space-x-2">
        <button onClick={closeModal} className="px-4 py-2 rounded-lg bg-gray-700 hover:bg-gray-600">Cancel</button>
        <button
          onClick={start}
          disabled={!selected || submitting}
          className="px-4 py-2 rounded-lg bg-cyan-600 hover:bg-cyan-700 disabled:opacity-50">
          {submitting ? 'Startingâ€¦' : 'Start'}
        </button>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\Admin.js ---

// src/components/pages/Admin.js - SIMPLIFIED VERSION FOR TESTING
import React, { useState, useEffect } from 'react';
import { Users, Calendar, Plus, Play, AlertTriangle, Edit, UserPlus, Square } from 'lucide-react';
import { useAdmin } from '../../hooks';
import { useApp } from '../../contexts';
import { AdminService, supabase } from '../../services';
import { getStatusBadgeColor, formatDate, validateRequired, validateDateRange } from '../../utils';

export default function Admin() {
  const { 
    employees, 
    cycles, 
    loading, 
    error, 
    createReviewCycle, 
    activateReviewCycle, 
    refresh 
  } = useAdmin();
  
  const { openModal } = useApp();
  const [allEmployees, setAllEmployees] = useState([]);
  const [employeesLoading, setEmployeesLoading] = useState(true);
  const [currentRole, setCurrentRole] = useState(null);

  useEffect(() => {
    fetchEmployees();
    checkRole();
  }, []);

  const fetchEmployees = async () => {
    try {
      setEmployeesLoading(true);
      const employeesData = await AdminService.getAllEmployees();
      setAllEmployees(employeesData);
    } catch (err) {
      console.error('Error fetching employees:', err);
    } finally {
      setEmployeesLoading(false);
    }
  };

  const checkRole = async () => {
    try {
      const role = await AdminService.checkCurrentRole();
      setCurrentRole(role);
    } catch (err) {
      console.error('Error checking role:', err);
    }
  };


  const handleActivateCycle = async (cycleId) => {
    try {
      const data = await activateReviewCycle(cycleId);
      
      if (data && data.success) {
        alert('âœ… ' + data.message);
      } else {
        alert('âš ï¸ ' + (data?.error || 'Unknown error'));
      }
    } catch (err) {
      alert('âŒ Error: ' + err.message);
    }
  };

  const handleCloseCycle = async (cycleId) => {
    // Confirm before closing
    if (!window.confirm('Are you sure you want to close this review cycle? This action cannot be undone.')) {
      return;
    }

    try {
      const data = await AdminService.closeReviewCycle(cycleId);
      
      if (data && data.success) {
        alert('âœ… ' + data.message);
        refresh(); // Refresh the data to show updated status
      } else {
        alert('âš ï¸ ' + (data?.error || 'Unknown error'));
      }
    } catch (err) {
      alert('âŒ Error: ' + err.message);
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">Admin Panel</h1>
        <div className="text-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400 mx-auto mb-4"></div>
          <div className="text-gray-400">Loading admin data...</div>
        </div>
      </div>
    );
  }


  return (
    <div className="p-8">
      <div className="flex justify-between items-center mb-8">
        <div>
          <h1 className="text-3xl font-bold text-cyan-400">Admin Panel</h1>
          <p className="text-gray-400 mt-2">Manage employees and review cycles</p>
          <p className="text-xs text-yellow-400 mt-1">Simplified version for testing</p>
        </div>
        <button
          onClick={() => openModal('createReviewCycle', { onComplete: refresh })}
          className="bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded-lg flex items-center"
        >
          <Plus size={16} className="mr-2" />
          Create Review Cycle
        </button>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-6 p-4 bg-red-900 border border-red-700 rounded-lg">
          <div className="flex items-center text-red-200">
            <AlertTriangle size={16} className="mr-2" />
            <span>Error: {error}</span>
          </div>
          <button 
            onClick={refresh}
            className="mt-2 px-3 py-1 bg-red-800 hover:bg-red-700 rounded text-red-100 text-sm"
          >
            Retry
          </button>
        </div>
      )}
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Employees Section */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Users className="mr-2 text-cyan-400" size={24} />
              <h2 className="text-xl font-semibold">Employees ({employees.length})</h2>
            </div>
            <button 
              onClick={refresh}
              className="text-cyan-400 hover:text-cyan-300 text-sm"
            >
              Refresh
            </button>
          </div>
          
          {employees.length > 0 ? (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {employees.map((employee) => (
                <div key={employee.id} className="flex justify-between items-center p-3 bg-gray-700 rounded">
                  <div>
                    <p className="font-medium text-white">{employee.name}</p>
                    <p className="text-sm text-gray-400">{employee.email}</p>
                    <p className="text-xs text-gray-500">
                      {employee.job_title || 'No Title'} â€¢ 
                      {employee.manager_id ? ' Has Manager' : ' No Manager'}
                    </p>
                  </div>
                  <div className="text-right">
                    <span className="text-xs px-2 py-1 rounded bg-green-600 text-white">
                      Active
                    </span>
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              {error ? (
                <div className="text-red-400">
                  <AlertTriangle size={48} className="mx-auto mb-4" />
                  <p>Failed to load employees</p>
                </div>
              ) : (
                <div className="text-gray-500">
                  <Users size={48} className="mx-auto mb-4" />
                  <p>No employees found</p>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Review Cycles Section */}
        <div className="bg-gray-800 rounded-lg p-6">
          <div className="flex items-center justify-between mb-4">
            <div className="flex items-center">
              <Calendar className="mr-2 text-cyan-400" size={24} />
              <h2 className="text-xl font-semibold">Review Cycles ({cycles.length})</h2>
            </div>
          </div>
          
          {cycles.length > 0 ? (
            <div className="space-y-3 max-h-96 overflow-y-auto">
              {cycles.map((cycle) => (
                <div key={cycle.id} className="p-3 bg-gray-700 rounded">
                  <div className="flex justify-between items-start mb-2">
                    <div>
                      <p className="font-medium text-white">{cycle.name}</p>
                      <p className="text-sm text-gray-400">
                        {formatDate(cycle.start_date)} - {formatDate(cycle.end_date)}
                      </p>
                    </div>
                    <span className={`text-xs px-2 py-1 rounded ${getStatusBadgeColor(cycle.status)}`}>
                      {cycle.status}
                    </span>
                  </div>
                  
                  <div className="flex gap-2 mt-2">
                    {cycle.status === 'upcoming' && (
                      <button
                        onClick={() => handleActivateCycle(cycle.id)}
                        className="text-green-400 hover:text-green-300 flex items-center text-sm"
                      >
                        <Play size={14} className="mr-1" />
                        Activate
                      </button>
                    )}
                    {cycle.status === 'active' && (
                      <button
                        onClick={() => handleCloseCycle(cycle.id)}
                        className="text-red-400 hover:text-red-300 flex items-center text-sm"
                      >
                        <Square size={14} className="mr-1" />
                        Close
                      </button>
                    )}
                  </div>
                </div>
              ))}
            </div>
          ) : (
            <div className="text-center py-8">
              <Calendar size={48} className="mx-auto mb-4 text-gray-500" />
              <p className="text-gray-400 mb-4">No review cycles found</p>
              <p className="text-sm text-gray-500">Create your first review cycle to get started</p>
            </div>
          )}
        </div>
      </div>

      {/* Summary Stats */}
      <div className="mt-8 grid grid-cols-1 md:grid-cols-4 gap-4">
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-cyan-400">{employees.length}</p>
          <p className="text-gray-400">Total Employees</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-green-400">{employees.length}</p>
          <p className="text-gray-400">Active Employees</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-yellow-400">
            {cycles.filter(c => c.status === 'active').length}
          </p>
          <p className="text-gray-400">Active Cycles</p>
        </div>
        <div className="bg-gray-800 p-4 rounded-lg text-center">
          <p className="text-2xl font-bold text-purple-400">0</p>
          <p className="text-gray-400">Manager Relations</p>
        </div>
      </div>

      {/* Employee Management Section */}
      <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
        <div className="flex justify-between items-center mb-6">
          <div>
            <h2 className="text-2xl font-bold text-cyan-400 flex items-center">
              <Users className="mr-3" size={24} />
              Employee Management
            </h2>
            <p className="text-gray-400 mt-1">Manage team members and their roles</p>
            {currentRole && (
              <p className="text-xs text-yellow-400 mt-1">Your role: {currentRole}</p>
            )}
          </div>
          <button
            onClick={() => openModal('createEmployee', { onComplete: () => { fetchEmployees(); refresh(); } })}
            className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <UserPlus size={16} className="mr-2" />
            Add Employee
          </button>
        </div>

        {/* Employee Table */}
        {employeesLoading ? (
          <div className="text-center py-8">
            <div className="w-8 h-8 border-2 border-cyan-400 border-t-transparent rounded-full animate-spin mx-auto mb-4"></div>
            <p className="text-gray-400">Loading employees...</p>
          </div>
        ) : allEmployees.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="w-full">
              <thead>
                <tr className="border-b border-gray-700">
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Name</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Email</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Role</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Job Title</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Manager</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Reports</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Status</th>
                  <th className="text-left py-3 px-2 text-gray-400 font-medium">Actions</th>
                </tr>
              </thead>
              <tbody>
                {allEmployees.map((employee) => (
                  <tr key={employee.id} className="border-b border-gray-700 hover:bg-gray-700">
                    <td className="py-3 px-2">
                      <div className="text-white font-medium">{employee.name}</div>
                    </td>
                    <td className="py-3 px-2">
                      <div className="text-gray-300 text-sm">{employee.email}</div>
                    </td>
                    <td className="py-3 px-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        employee.role === 'admin' 
                          ? 'bg-red-900 text-red-200' 
                          : employee.role === 'manager'
                          ? 'bg-blue-900 text-blue-200'
                          : 'bg-gray-600 text-gray-200'
                      }`}>
                        {employee.role.charAt(0).toUpperCase() + employee.role.slice(1)}
                      </span>
                    </td>
                    <td className="py-3 px-2">
                      <div className="text-gray-300 text-sm">{employee.job_title}</div>
                    </td>
                    <td className="py-3 px-2">
                      <div className="text-gray-300 text-sm">
                        {employee.manager_name || 'â€”'}
                      </div>
                    </td>
                    <td className="py-3 px-2">
                      <div className="text-gray-300 text-sm">
                        {employee.direct_reports_count}
                      </div>
                    </td>
                    <td className="py-3 px-2">
                      <span className={`px-2 py-1 rounded text-xs font-medium ${
                        employee.is_active 
                          ? 'bg-green-900 text-green-200' 
                          : 'bg-red-900 text-red-200'
                      }`}>
                        {employee.is_active ? 'Active' : 'Inactive'}
                      </span>
                    </td>
                    <td className="py-3 px-2">
                      <button
                        onClick={() => openModal('editEmployee', { 
                          employee: employee,
                          onComplete: () => { fetchEmployees(); refresh(); }
                        })}
                        className="text-cyan-400 hover:text-cyan-300 text-sm flex items-center"
                      >
                        <Edit size={14} className="mr-1" />
                        Edit
                      </button>
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-8">
            <Users size={48} className="mx-auto mb-4 text-gray-500" />
            <p className="text-gray-400 mb-4">No employees found</p>
            <p className="text-sm text-gray-500">Add your first employee to get started</p>
          </div>
        )}
      </div>

      {/* Review Oversight Section */}
      <ReviewOversightSection />

    </div>
  );
}

// Review Oversight Component for Admin Dashboard
const ReviewOversightSection = () => {
  const { setActivePage } = useApp();
  const [reviewStats, setReviewStats] = useState({
    total: 0,
    pending_employee: 0,
    pending_manager: 0,
    completed: 0,
    overdue: 0
  });
  const [recentReviews, setRecentReviews] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchReviewOversight();
  }, []);

  const fetchReviewOversight = async () => {
    try {
      setLoading(true);
      // This would be a custom RPC function to get admin oversight data
      const { data: stats, error: statsError } = await supabase.rpc('get_admin_review_stats');
      const { data: recent, error: recentError } = await supabase.rpc('get_recent_review_activity');
      
      if (!statsError && stats) {
        setReviewStats(stats[0] || reviewStats);
      }
      if (!recentError && recent) {
        setRecentReviews(recent || []);
      }
    } catch (err) {
      console.error('Error fetching review oversight:', err);
    } finally {
      setLoading(false);
    }
  };

  const handleViewAssessment = (assessmentId) => {
    setActivePage({ 
      name: 'Assessment', 
      props: { assessmentId } 
    });
  };

  if (loading) {
    return (
      <div className="mt-8 bg-gray-800 rounded-lg p-6">
        <h2 className="text-xl font-semibold text-white mb-4">Review Process Oversight</h2>
        <div className="flex items-center justify-center py-8">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-cyan-400"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="mt-8 bg-gray-800 rounded-lg p-6">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <Square className="mr-2 text-cyan-400" size={24} />
          <h2 className="text-xl font-semibold text-white">Review Process Oversight</h2>
        </div>
        <button 
          onClick={fetchReviewOversight}
          className="text-cyan-400 hover:text-cyan-300 text-sm"
        >
          Refresh
        </button>
      </div>

      {/* Stats Grid */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4 mb-6">
        <div className="bg-gray-700 rounded-lg p-4 text-center">
          <div className="text-2xl font-bold text-white">{reviewStats.total}</div>
          <div className="text-sm text-gray-400">Total Reviews</div>
        </div>
        <div className="bg-yellow-900 bg-opacity-50 rounded-lg p-4 text-center border border-yellow-700">
          <div className="text-2xl font-bold text-yellow-400">{reviewStats.pending_employee}</div>
          <div className="text-sm text-yellow-300">Employee Pending</div>
        </div>
        <div className="bg-orange-900 bg-opacity-50 rounded-lg p-4 text-center border border-orange-700">
          <div className="text-2xl font-bold text-orange-400">{reviewStats.pending_manager}</div>
          <div className="text-sm text-orange-300">Manager Pending</div>
        </div>
        <div className="bg-green-900 bg-opacity-50 rounded-lg p-4 text-center border border-green-700">
          <div className="text-2xl font-bold text-green-400">{reviewStats.completed}</div>
          <div className="text-sm text-green-300">Completed</div>
        </div>
        <div className="bg-red-900 bg-opacity-50 rounded-lg p-4 text-center border border-red-700">
          <div className="text-2xl font-bold text-red-400">{reviewStats.overdue}</div>
          <div className="text-sm text-red-300">Overdue</div>
        </div>
      </div>

      {/* Recent Activity */}
      <div>
        <h3 className="text-lg font-semibold text-white mb-4">Recent Review Activity</h3>
        {recentReviews.length > 0 ? (
          <div className="space-y-3 max-h-64 overflow-y-auto">
            {recentReviews.map((review, index) => (
              <div key={index} className="bg-gray-700 rounded-lg p-4 flex items-center justify-between">
                <div className="flex-1">
                  <div className="flex items-center space-x-3">
                    <div className="w-8 h-8 bg-cyan-600 rounded-full flex items-center justify-center">
                      <span className="text-white font-medium text-xs">
                        {review.employee_name?.split(' ').map(n => n[0]).join('') || 'N/A'}
                      </span>
                    </div>
                    <div>
                      <div className="text-white font-medium">{review.employee_name}</div>
                      <div className="text-sm text-gray-400">{review.cycle_name}</div>
                    </div>
                  </div>
                </div>
                <div className="flex items-center space-x-3">
                  <div className="text-center">
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                      review.self_assessment_status === 'employee_complete' ? 'bg-green-600 text-green-100' :
                      review.self_assessment_status === 'in_progress' ? 'bg-yellow-600 text-yellow-100' :
                      'bg-gray-600 text-gray-100'
                    }`}>
                      {review.self_assessment_status?.replace('_', ' ') || 'Not Started'}
                    </div>
                    <div className="text-xs text-gray-400 mt-1">Employee</div>
                  </div>
                  <div className="text-center">
                    <div className={`px-2 py-1 rounded-full text-xs font-medium ${
                      review.manager_review_status === 'completed' ? 'bg-green-600 text-green-100' :
                      review.manager_review_status === 'pending' ? 'bg-orange-600 text-orange-100' :
                      'bg-gray-600 text-gray-100'
                    }`}>
                      {review.manager_review_status || 'Not Started'}
                    </div>
                    <div className="text-xs text-gray-400 mt-1">Manager</div>
                  </div>
                  <button
                    onClick={() => handleViewAssessment(review.assessment_id)}
                    className="bg-cyan-600 hover:bg-cyan-700 text-white px-3 py-1 rounded text-sm"
                  >
                    View
                  </button>
                </div>
              </div>
            ))}
          </div>
        ) : (
          <div className="text-center py-8">
            <Square size={48} className="mx-auto mb-4 text-gray-500" />
            <p className="text-gray-400">No recent review activity</p>
          </div>
        )}
      </div>
    </div>
  );
};




--- FILE: src\components\pages\Assessment.js ---

import React, { useEffect, useState } from 'react';
import { AssessmentService } from '../../services';
import { useApp } from '../../contexts';
import { Save, Send, Edit3, CheckCircle, Clock, ArrowLeft, User, Target, BookOpen } from 'lucide-react';
import { Button, LoadingSpinner, ErrorMessage } from '../ui';

export default function Assessment({ pageProps }) {
  const { setActivePage, userRole } = useApp();
  const { assessmentId } = pageProps;
  const [assessment, setAssessment] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isEditing, setIsEditing] = useState(false);
  const [formData, setFormData] = useState({});
  const [saving, setSaving] = useState(false);
  const [submitting, setSubmitting] = useState(false);

  useEffect(() => {
    const fetchDetails = async () => {
      try {
        const data = await AssessmentService.getAssessmentById(assessmentId);
        const assessmentData = data?.[0];
        setAssessment(assessmentData);
        
        // Initialize form data with current assessment values
        if (assessmentData) {
          setFormData({
            employee_strengths: assessmentData.employee_strengths || '',
            employee_improvements: assessmentData.employee_improvements || '',
            value_passionate_examples: assessmentData.value_passionate_examples || '',
            value_driven_examples: assessmentData.value_driven_examples || '',
            value_resilient_examples: assessmentData.value_resilient_examples || '',
            value_responsive_examples: assessmentData.value_responsive_examples || '',
            gwc_gets_it: assessmentData.gwc_gets_it || false,
            gwc_gets_it_feedback: assessmentData.gwc_gets_it_feedback || '',
            gwc_wants_it: assessmentData.gwc_wants_it || false,
            gwc_wants_it_feedback: assessmentData.gwc_wants_it_feedback || '',
            gwc_capacity: assessmentData.gwc_capacity || false,
            gwc_capacity_feedback: assessmentData.gwc_capacity_feedback || '',
            // Manager fields
            manager_performance_rating: assessmentData.manager_performance_rating || '',
            manager_summary_comments: assessmentData.manager_summary_comments || '',
            manager_core_values_feedback: assessmentData.manager_core_values_feedback || '',
            manager_development_plan: assessmentData.manager_development_plan || '',
            manager_action_items: assessmentData.manager_action_items || ''
          });
          
          // Auto-enable editing based on user role and assessment state
          if (assessmentData.can_edit_self_assessment && 
              (assessmentData.self_assessment_status === 'not_started' || 
               assessmentData.self_assessment_status === 'in_progress')) {
            setIsEditing(true);
          }
          
          // Auto-enable editing for managers when employee has submitted
          if (userRole === 'manager' && 
              assessmentData.self_assessment_status === 'employee_complete' &&
              assessmentData.manager_review_status === 'pending') {
            setIsEditing(true);
          }
        }
      } catch (err) {
        setError(err.message);
      } finally {
        setLoading(false);
      }
    };
    fetchDetails();
  }, [assessmentId]);

  const handleInputChange = (field, value) => {
    setFormData(prev => ({ ...prev, [field]: value }));
  };

  const handleSave = async () => {
    try {
      setSaving(true);
      console.log('Saving assessment with form data:', formData);
      
      await AssessmentService.updateAssessment(assessmentId, formData);
      
      // Refresh the assessment data
      const updatedData = await AssessmentService.getAssessmentById(assessmentId);
      setAssessment(updatedData?.[0]);
      
      console.log('Assessment saved successfully, updated data:', updatedData?.[0]);
      alert('Assessment saved successfully!');
    } catch (err) {
      console.error('Error saving assessment:', err);
      alert('Error saving assessment: ' + err.message);
    } finally {
      setSaving(false);
    }
  };

  const handleSubmit = async () => {
    try {
      setSubmitting(true);
      await AssessmentService.submitAssessment(assessmentId);
      
      // Refresh the assessment data
      const updatedData = await AssessmentService.getAssessmentById(assessmentId);
      setAssessment(updatedData?.[0]);
      setIsEditing(false);
      
      alert('Self-assessment submitted successfully! Your manager will now review it.');
    } catch (err) {
      alert('Error submitting assessment: ' + err.message);
    } finally {
      setSubmitting(false);
    }
  };

  const handleManagerSubmit = async () => {
    try {
      setSubmitting(true);
      console.log('handleManagerSubmit started for assessment:', assessmentId);
      console.log('Manager form data being submitted:', formData);
      
      // FIXED: Single atomic call to submit all manager feedback and update status
      await AssessmentService.submitManagerReview(assessmentId, formData);
      console.log('Manager review submitted successfully via atomic operation');
      
      // Refresh the assessment data to reflect the changes
      console.log('Refreshing assessment data...');
      const updatedData = await AssessmentService.getAssessmentById(assessmentId);
      console.log('Refreshed assessment data:', updatedData?.[0]);
      
      setAssessment(updatedData?.[0]);
      setIsEditing(false);
      
      alert('Manager review submitted successfully! The employee will be notified.');
    } catch (err) {
      console.error('handleManagerSubmit error:', err);
      alert('Error submitting manager review: ' + err.message);
    } finally {
      setSubmitting(false);
    }
  };

  const handleEmployeeAcknowledgment = async () => {
    try {
      setSubmitting(true);
      
      // Mark the review as acknowledged by employee
      await AssessmentService.acknowledgeReview(assessmentId);
      
      // Refresh the assessment data
      const updatedData = await AssessmentService.getAssessmentById(assessmentId);
      setAssessment(updatedData?.[0]);
      
      alert('Review acknowledged successfully! The review process is now complete.');
    } catch (err) {
      alert('Error acknowledging review: ' + err.message);
    } finally {
      setSubmitting(false);
    }
  };

  if (loading) return (
    <div className="p-8">
      <LoadingSpinner size="lg" message="Loading assessment..." />
    </div>
  );
  
  if (error) return (
    <div className="p-8">
      <ErrorMessage error={error} title="Assessment Error" />
    </div>
  );
  
  if (!assessment) return (
    <div className="p-8">
      <div className="text-center py-12">
        <p className="text-gray-400">Assessment not found.</p>
      </div>
    </div>
  );

  // Permission logic for different user roles
  const canEditSelfAssessment = userRole === 'admin' || (assessment.can_edit_self_assessment && !assessment.is_manager_view);
  const canEditManagerReview = userRole === 'admin' || (userRole === 'manager' && assessment.self_assessment_status === 'employee_complete' && assessment.manager_review_status === 'pending');
  const canAcknowledgeReview = (userRole === 'employee' || userRole === 'admin') && assessment.manager_review_status === 'completed' && !assessment.employee_acknowledgment;
  const canEdit = canEditSelfAssessment || canEditManagerReview;
  
  const isInProgress = assessment.self_assessment_status === 'in_progress';
  const isNotStarted = assessment.self_assessment_status === 'not_started';
  const isSubmitted = assessment.self_assessment_status === 'employee_complete';
  const isManagerReview = userRole === 'manager' && assessment.self_assessment_status === 'employee_complete';
  const isReviewComplete = assessment.manager_review_status === 'completed';
  const isFullyComplete = assessment.employee_acknowledgment;
  

  return (
    <div className="p-8 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div className="flex items-center space-x-4">
          <button 
            onClick={() => setActivePage({ name: userRole === 'manager' ? 'My Team' : 'My Reviews', props: {} })} 
            className="text-cyan-400 hover:underline flex items-center"
          >
            <ArrowLeft size={16} className="mr-1" />
            Back to {userRole === 'manager' ? 'My Team' : 'My Reviews'}
          </button>
        </div>
        
        {/* Action Buttons */}
        <div className="flex items-center space-x-3">
          {canEdit && isEditing && (
            <>
              <Button
                onClick={handleSave}
                disabled={saving}
                variant="secondary"
                size="sm"
              >
                {saving ? (
                  <><Clock size={14} className="mr-1" /> Saving...</>
                ) : (
                  <><Save size={14} className="mr-1" /> Save Draft</>
                )}
              </Button>
              
              {/* Employee Submit Button */}
              {canEditSelfAssessment && !isManagerReview && (
                <Button
                  onClick={handleSubmit}
                  disabled={submitting}
                  variant="primary"
                  size="sm"
                >
                  {submitting ? (
                    <><Clock size={14} className="mr-1" /> Submitting...</>
                  ) : (
                    <><Send size={14} className="mr-1" /> Submit for Review</>
                  )}
                </Button>
              )}

              {/* Manager Submit Button */}
              {canEditManagerReview && (
                <Button
                  onClick={handleManagerSubmit}
                  disabled={submitting}
                  variant="primary"
                  size="sm"
                >
                  {submitting ? (
                    <><Clock size={14} className="mr-1" /> Submitting...</>
                  ) : (
                    <><Send size={14} className="mr-1" /> Complete Manager Review</>
                  )}
                </Button>
              )}
            </>
          )}
          
          {/* Start/Continue Buttons */}
          {canEditSelfAssessment && !isEditing && (isNotStarted || isInProgress) && (
            <Button
              onClick={() => setIsEditing(true)}
              variant="primary"
              size="sm"
            >
              <Edit3 size={14} className="mr-1" />
              {isNotStarted ? 'Start Self-Assessment' : 'Continue Assessment'}
            </Button>
          )}

          {/* Manager Review Button */}
          {canEditManagerReview && !isEditing && (
            <Button
              onClick={() => setIsEditing(true)}
              variant="primary"
              size="sm"
            >
              <Edit3 size={14} className="mr-1" />
              Start Manager Review
            </Button>
          )}

          {/* Employee Acknowledgment Button */}
          {canAcknowledgeReview && (
            <Button
              onClick={handleEmployeeAcknowledgment}
              disabled={submitting}
              variant="primary"
              size="sm"
              className="bg-green-600 hover:bg-green-700 border-green-600"
            >
              {submitting ? (
                <><Clock size={14} className="mr-1" /> Processing...</>
              ) : (
                <><CheckCircle size={14} className="mr-1" /> Acknowledge Review</>
              )}
            </Button>
          )}
        </div>
      </div>

      {/* Assessment Header */}
      <div className="bg-gray-800 rounded-lg p-6">
        <h2 className="text-3xl font-bold text-white mb-2">{assessment.employee_name}</h2>
        <p className="text-gray-400 mb-4">Review Cycle: {assessment.review_cycle_name}</p>
        
        {/* Status Indicator */}
        <div className="flex items-center space-x-4">
          {/* Employee Status */}
          {isSubmitted && (
            <div className="flex items-center text-green-400">
              <CheckCircle size={16} className="mr-1" />
              <span className="text-sm font-medium">Employee Assessment Complete</span>
            </div>
          )}
          {isInProgress && (
            <div className="flex items-center text-yellow-400">
              <Clock size={16} className="mr-1" />
              <span className="text-sm font-medium">Self-Assessment In Progress</span>
            </div>
          )}
          {isNotStarted && canEdit && (
            <div className="flex items-center text-blue-400">
              <Edit3 size={16} className="mr-1" />
              <span className="text-sm font-medium">Ready to Start</span>
            </div>
          )}

          {/* Manager Status */}
          {assessment.manager_review_status === 'completed' && (
            <div className="flex items-center text-green-400">
              <CheckCircle size={16} className="mr-1" />
              <span className="text-sm font-medium">Manager Review Complete</span>
            </div>
          )}
          {assessment.manager_review_status === 'pending' && isSubmitted && (
            <div className="flex items-center text-yellow-400">
              <Clock size={16} className="mr-1" />
              <span className="text-sm font-medium">Awaiting Manager Review</span>
            </div>
          )}

          {/* Final Status */}
          {isFullyComplete && (
            <div className="flex items-center text-green-400">
              <CheckCircle size={16} className="mr-1" />
              <span className="text-sm font-medium">Review Process Complete</span>
            </div>
          )}
          {canAcknowledgeReview && (
            <div className="flex items-center text-blue-400">
              <Clock size={16} className="mr-1" />
              <span className="text-sm font-medium">Awaiting Employee Acknowledgment</span>
            </div>
          )}
        </div>
      </div>

      {/* Core Values Section */}
      <SelfAssessmentSection
        title="Core Values Examples"
        subtitle="Provide specific examples of how you've demonstrated our core values"
        icon={User}
      >
        <CoreValuesSection 
          assessment={assessment}
          formData={formData}
          isEditing={isEditing}
          onChange={handleInputChange}
          isManagerReview={isManagerReview}
          canEditManagerReview={canEditManagerReview}
        />
      </SelfAssessmentSection>

      {/* GWC Section */}
      <SelfAssessmentSection
        title="GWC Assessment"
        subtitle="Evaluate your alignment with your role's requirements"
        icon={Target}
      >
        <GWCSection 
          assessment={assessment}
          formData={formData}
          isEditing={isEditing}
          onChange={handleInputChange}
          isManagerReview={isManagerReview}
          canEditManagerReview={canEditManagerReview}
        />
      </SelfAssessmentSection>

      {/* Strengths & Improvements */}
      <SelfAssessmentSection
        title="Self-Reflection"
        subtitle="Reflect on your strengths and areas for improvement"
        icon={BookOpen}
      >
        <StrengthsSection 
          assessment={assessment}
          formData={formData}
          isEditing={isEditing}
          onChange={handleInputChange}
          isManagerReview={isManagerReview}
          canEditManagerReview={canEditManagerReview}
        />
      </SelfAssessmentSection>

      {/* Rocks Section */}
      <SelfAssessmentSection
        title="Quarterly Rocks"
        subtitle="Your key objectives for this quarter"
        icon={Target}
      >
        <RocksSection assessment={assessment} />
      </SelfAssessmentSection>

      {/* Manager Section (show when employee has submitted or when manager is reviewing) */}
      {(assessment.self_assessment_status === 'employee_complete' || assessment.manager_review_status === 'completed') && (
        <SelfAssessmentSection
          title="Manager Review & Feedback"
          subtitle="Manager assessment, development planning, and feedback"
          icon={User}
        >
          <ManagerOnlySection 
            assessment={assessment}
            formData={formData}
            isEditing={isEditing && canEditManagerReview}
            onChange={handleInputChange}
          />
        </SelfAssessmentSection>
      )}

      {/* Fixed Bottom Action Bar - Always visible when editing */}
      {canEdit && isEditing && (
        <div className="fixed bottom-0 left-64 right-0 bg-gray-800 border-t border-gray-700 p-4 shadow-2xl z-30">
          <div className="flex justify-end space-x-3 max-w-4xl mx-auto">
            <Button
              onClick={handleSave}
              disabled={saving}
              variant="secondary"
            >
              {saving ? (
                <><Clock size={16} className="mr-2" /> Saving...</>
              ) : (
                <><Save size={16} className="mr-2" /> Save Draft</>
              )}
            </Button>
            
            {/* Employee Submit Button */}
            {canEditSelfAssessment && !isManagerReview && (
              <Button
                onClick={handleSubmit}
                disabled={submitting}
                variant="primary"
              >
                {submitting ? (
                  <><Clock size={16} className="mr-2" /> Submitting...</>
                ) : (
                  <><Send size={16} className="mr-2" /> Submit for Review</>
                )}
              </Button>
            )}

            {/* Manager Submit Button */}
            {canEditManagerReview && (
              <Button
                onClick={handleManagerSubmit}
                disabled={submitting}
                variant="primary"
              >
                {submitting ? (
                  <><Clock size={16} className="mr-2" /> Submitting...</>
                ) : (
                  <><Send size={16} className="mr-2" /> Complete Manager Review</>
                )}
              </Button>
            )}
          </div>
        </div>
      )}

      {/* Add padding to prevent content from being hidden behind fixed bottom bar */}
      {canEdit && isEditing && <div className="h-20" />}
    </div>
  );
}

// Section Container Component
const SelfAssessmentSection = ({ title, subtitle, icon: Icon, children }) => (
  <div className="bg-gray-800 rounded-lg shadow-2xl">
    <div className="p-6 border-b border-gray-700">
      <div className="flex items-center mb-2">
        {Icon && <Icon size={24} className="text-cyan-400 mr-3" />}
        <h3 className="text-xl font-semibold text-white">{title}</h3>
      </div>
      <p className="text-gray-400 text-sm">{subtitle}</p>
    </div>
    <div className="p-6">
      {children}
    </div>
  </div>
);

// Core Values Section Component
const CoreValuesSection = ({ assessment, formData, isEditing, onChange, isManagerReview, canEditManagerReview }) => {
  const coreValues = [
    { key: 'passionate', label: 'Passionate', color: 'red' },
    { key: 'driven', label: 'Driven', color: 'blue' },
    { key: 'resilient', label: 'Resilient', color: 'green' },
    { key: 'responsive', label: 'Responsive', color: 'purple' }
  ];

  // If this is manager review mode OR manager has completed review, show two-column layout
  if (isManagerReview || (assessment.self_assessment_status === 'employee_complete' && (canEditManagerReview || assessment.manager_review_status === 'completed'))) {
    return (
      <div className="space-y-8">
        {coreValues.map(value => (
          <div key={value.key} className="border border-gray-600 rounded-lg p-4">
            <h4 className="text-lg font-medium text-white mb-4 border-b border-gray-600 pb-2">
              {value.label}
            </h4>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Employee Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-blue-300">
                  Employee Examples
                </label>
                <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[80px] border-l-4 border-blue-500">
                  {assessment[`value_${value.key}_examples`] || 'No examples provided by employee.'}
                </div>
              </div>
              
              {/* Manager Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-green-300">
                  Manager Feedback
                </label>
                {isEditing && canEditManagerReview ? (
                  <textarea
                    value={formData[`manager_${value.key}_feedback`] || ''}
                    onChange={(e) => onChange(`manager_${value.key}_feedback`, e.target.value)}
                    className="w-full p-3 bg-gray-700 border border-green-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    rows={3}
                    placeholder={`Provide feedback on employee's ${value.label.toLowerCase()} examples...`}
                  />
                ) : (
                  <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[80px] border-l-4 border-green-500">
                    {assessment[`manager_${value.key}_feedback`] || 'Manager feedback pending.'}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  // Regular employee view (single column)
  return (
    <div className="space-y-6">
      {coreValues.map(value => (
        <div key={value.key} className="space-y-2">
          <label className="block text-sm font-medium text-gray-300">
            {value.label} - Provide specific examples
          </label>
          {isEditing ? (
            <textarea
              value={formData[`value_${value.key}_examples`] || ''}
              onChange={(e) => onChange(`value_${value.key}_examples`, e.target.value)}
              className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              rows={3}
              placeholder={`Describe specific situations where you demonstrated being ${value.label.toLowerCase()}...`}
            />
          ) : (
            <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[80px]">
              {assessment[`value_${value.key}_examples`] || 'No examples provided yet.'}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};

// GWC Section Component
const GWCSection = ({ assessment, formData, isEditing, onChange, isManagerReview, canEditManagerReview }) => {
  const gwcItems = [
    { key: 'gets_it', label: 'Gets It', description: 'Do you understand the role and its requirements?' },
    { key: 'wants_it', label: 'Wants It', description: 'Do you have the passion and desire for this role?' },
    { key: 'capacity', label: 'Has Capacity', description: 'Do you have the time and capability to fulfill this role?' }
  ];

  // If this is manager review mode OR manager has completed review, show two-column layout
  if (isManagerReview || (assessment.self_assessment_status === 'employee_complete' && (canEditManagerReview || assessment.manager_review_status === 'completed'))) {
    return (
      <div className="space-y-8">
        {gwcItems.map(item => (
          <div key={item.key} className="border border-gray-600 rounded-lg p-4">
            <div className="flex items-center space-x-3 mb-4 border-b border-gray-600 pb-2">
              <span className="text-2xl">
                {assessment[`gwc_${item.key}`] ? 'âœ…' : 'âŒ'}
              </span>
              <div>
                <h4 className="text-lg font-medium text-white">{item.label}</h4>
                <p className="text-sm text-gray-400">{item.description}</p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Employee Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-blue-300">
                  Employee Assessment
                </label>
                <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[60px] border-l-4 border-blue-500">
                  {assessment[`gwc_${item.key}_feedback`] || 'No explanation provided by employee.'}
                </div>
              </div>
              
              {/* Manager Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-green-300">
                  Manager Feedback
                </label>
                {isEditing && canEditManagerReview ? (
                  <textarea
                    value={formData[`manager_gwc_${item.key}_feedback`] || ''}
                    onChange={(e) => onChange(`manager_gwc_${item.key}_feedback`, e.target.value)}
                    className="w-full p-3 bg-gray-700 border border-green-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    rows={2}
                    placeholder={`Provide feedback on employee's ${item.label.toLowerCase()} assessment...`}
                  />
                ) : (
                  <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[60px] border-l-4 border-green-500">
                    {assessment[`manager_gwc_${item.key}_feedback`] || 'Manager feedback pending.'}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  // Regular employee view (single column)
  return (
    <div className="space-y-6">
      {gwcItems.map(item => (
        <div key={item.key} className="space-y-3">
          <div className="flex items-center space-x-3">
            {isEditing ? (
              <input
                type="checkbox"
                checked={formData[`gwc_${item.key}`] || false}
                onChange={(e) => onChange(`gwc_${item.key}`, e.target.checked)}
                className="w-5 h-5 text-cyan-600 bg-gray-700 border-gray-600 rounded focus:ring-cyan-500"
              />
            ) : (
              <span className="text-2xl">
                {assessment[`gwc_${item.key}`] ? 'âœ…' : 'âŒ'}
              </span>
            )}
            <div>
              <h4 className="text-lg font-medium text-white">{item.label}</h4>
              <p className="text-sm text-gray-400">{item.description}</p>
            </div>
          </div>
          
          <div>
            <label className="block text-sm font-medium text-gray-300 mb-2">
              Explain your assessment:
            </label>
            {isEditing ? (
              <textarea
                value={formData[`gwc_${item.key}_feedback`] || ''}
                onChange={(e) => onChange(`gwc_${item.key}_feedback`, e.target.value)}
                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                rows={2}
                placeholder={`Explain why you ${formData[`gwc_${item.key}`] ? 'do' : 'don\'t'} ${item.label.toLowerCase()}...`}
              />
            ) : (
              <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[60px]">
                {assessment[`gwc_${item.key}_feedback`] || 'No explanation provided yet.'}
              </div>
            )}
          </div>
        </div>
      ))}
    </div>
  );
};

// Strengths Section Component
const StrengthsSection = ({ assessment, formData, isEditing, onChange, isManagerReview, canEditManagerReview }) => {
  const sections = [
    { key: 'strengths', label: 'Key Strengths', question: 'What are your key strengths?' },
    { key: 'improvements', label: 'Areas for Improvement', question: 'What areas would you like to improve?' }
  ];

  // If this is manager review mode OR manager has completed review, show two-column layout
  if (isManagerReview || (assessment.self_assessment_status === 'employee_complete' && (canEditManagerReview || assessment.manager_review_status === 'completed'))) {
    return (
      <div className="space-y-8">
        {sections.map(section => (
          <div key={section.key} className="border border-gray-600 rounded-lg p-4">
            <h4 className="text-lg font-medium text-white mb-4 border-b border-gray-600 pb-2">
              {section.label}
            </h4>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {/* Employee Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-blue-300">
                  Employee Response
                </label>
                <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px] border-l-4 border-blue-500">
                  {assessment[`employee_${section.key}`] || `No ${section.label.toLowerCase()} provided by employee.`}
                </div>
              </div>
              
              {/* Manager Column */}
              <div className="space-y-2">
                <label className="block text-sm font-medium text-green-300">
                  Manager Feedback
                </label>
                {isEditing && canEditManagerReview ? (
                  <textarea
                    value={formData[`manager_${section.key}_feedback`] || ''}
                    onChange={(e) => onChange(`manager_${section.key}_feedback`, e.target.value)}
                    className="w-full p-3 bg-gray-700 border border-green-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-green-500 focus:border-transparent"
                    rows={4}
                    placeholder={`Provide feedback on employee's ${section.label.toLowerCase()}...`}
                  />
                ) : (
                  <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px] border-l-4 border-green-500">
                    {assessment[`manager_${section.key}_feedback`] || 'Manager feedback pending.'}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}
      </div>
    );
  }

  // Regular employee view (single column)
  return (
    <div className="space-y-6">
      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-300">
          What are your key strengths?
        </label>
        {isEditing ? (
          <textarea
            value={formData.employee_strengths || ''}
            onChange={(e) => onChange('employee_strengths', e.target.value)}
            className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
            rows={4}
            placeholder="Describe your key strengths and what you excel at..."
          />
        ) : (
          <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px]">
            {assessment.employee_strengths || 'No strengths identified yet.'}
          </div>
        )}
      </div>

      <div className="space-y-2">
        <label className="block text-sm font-medium text-gray-300">
          What areas would you like to improve?
        </label>
        {isEditing ? (
          <textarea
            value={formData.employee_improvements || ''}
            onChange={(e) => onChange('employee_improvements', e.target.value)}
            className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
            rows={4}
            placeholder="Describe areas where you'd like to grow and improve..."
          />
        ) : (
          <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px]">
            {assessment.employee_improvements || 'No improvement areas identified yet.'}
          </div>
        )}
      </div>
    </div>
  );
};

// Rocks Section Component
const RocksSection = ({ assessment }) => (
  <div className="space-y-4">
    {assessment.rocks && assessment.rocks.length > 0 ? (
      assessment.rocks.map((rock, index) => (
        <div key={rock.id || index} className="bg-gray-700 p-4 rounded-lg">
          <div className="flex justify-between items-start">
            <div className="flex-1">
              <h4 className="text-lg font-medium text-white mb-2">{rock.description}</h4>
              <div className="flex items-center space-x-2">
                <span className={`px-2 py-1 text-xs rounded ${
                  rock.status === 'completed' ? 'bg-green-600 text-green-100' :
                  rock.status === 'in_progress' ? 'bg-yellow-600 text-yellow-100' :
                  'bg-gray-600 text-gray-100'
                }`}>
                  {rock.status?.replace('_', ' ') || 'Not Started'}
                </span>
              </div>
            </div>
          </div>
        </div>
      ))
    ) : (
      <div className="text-center py-8 text-gray-500">
        <Target size={48} className="mx-auto mb-4 text-gray-600" />
        <p>No rocks assigned for this review cycle.</p>
      </div>
    )}
  </div>
);

// Manager Only Section Component (without duplicate Core Values)
const ManagerOnlySection = ({ assessment, formData, isEditing, onChange }) => (
  <div className="space-y-6">
    {/* Overall Performance Rating */}
    <div className="space-y-2">
      <h4 className="text-lg font-medium text-white">Overall Performance Rating</h4>
      {isEditing ? (
        <select
          value={formData.manager_performance_rating || ''}
          onChange={(e) => onChange('manager_performance_rating', e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
        >
          <option value="">Select Rating</option>
          <option value="exceeds">Exceeds Expectations</option>
          <option value="meets">Meets Expectations</option>
          <option value="below">Below Expectations</option>
          <option value="unsatisfactory">Unsatisfactory</option>
        </select>
      ) : (
        <div className="p-3 bg-gray-700 rounded-md text-gray-300">
          {assessment.manager_performance_rating ? (
            <span className={`px-3 py-1 rounded-full text-sm font-medium ${
              assessment.manager_performance_rating === 'exceeds' ? 'bg-green-600 text-green-100' :
              assessment.manager_performance_rating === 'meets' ? 'bg-blue-600 text-blue-100' :
              assessment.manager_performance_rating === 'below' ? 'bg-yellow-600 text-yellow-100' :
              'bg-red-600 text-red-100'
            }`}>
              {assessment.manager_performance_rating === 'exceeds' ? 'Exceeds Expectations' :
               assessment.manager_performance_rating === 'meets' ? 'Meets Expectations' :
               assessment.manager_performance_rating === 'below' ? 'Below Expectations' :
               'Unsatisfactory'}
            </span>
          ) : (
            'Performance rating pending.'
          )}
        </div>
      )}
    </div>

    {/* Manager Summary Comments */}
    <div className="space-y-2">
      <h4 className="text-lg font-medium text-white">Manager Summary & Feedback</h4>
      {isEditing ? (
        <textarea
          value={formData.manager_summary_comments || ''}
          onChange={(e) => onChange('manager_summary_comments', e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
          rows={4}
          placeholder="Provide overall feedback on the employee's performance, strengths, and areas for improvement..."
        />
      ) : (
        <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px]">
          {assessment.manager_summary_comments || 'Manager feedback pending.'}
        </div>
      )}
    </div>

    {/* Development Plan */}
    <div className="space-y-2">
      <h4 className="text-lg font-medium text-white">Development Plan & Goals</h4>
      {isEditing ? (
        <textarea
          value={formData.manager_development_plan || ''}
          onChange={(e) => onChange('manager_development_plan', e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
          rows={4}
          placeholder="Outline specific development goals, training opportunities, and growth path for the next quarter..."
        />
      ) : (
        <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[100px]">
          {assessment.manager_development_plan || 'Development plan pending.'}
        </div>
      )}
    </div>

    {/* Action Items */}
    <div className="space-y-2">
      <h4 className="text-lg font-medium text-white">Action Items & Next Steps</h4>
      {isEditing ? (
        <textarea
          value={formData.manager_action_items || ''}
          onChange={(e) => onChange('manager_action_items', e.target.value)}
          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
          rows={3}
          placeholder="List specific action items, deadlines, and follow-up meetings..."
        />
      ) : (
        <div className="p-3 bg-gray-700 rounded-md text-gray-300 min-h-[80px]">
          {assessment.manager_action_items || 'Action items pending.'}
        </div>
      )}
    </div>
  </div>
);


--- FILE: src\components\pages\Dashboard.js ---

// src/components/pages/Dashboard.js - Enhanced V2.5
import React from 'react';
import { Calendar, CheckCircle, Clock, Award, TrendingUp, MessageSquare } from 'lucide-react';
import { useAssessments, useKudos } from '../../hooks';
import { useApp } from '../../contexts';
import { getStatusDisplay, filterActiveReviews, filterCompletedReviews, formatDate } from '../../utils';
import { LoadingSpinner, ErrorMessage, StatusBadge, Button, Card } from '../ui';

const Dashboard = () => {
    const { setActivePage, openModal } = useApp();
    const { assessments, loading: assessmentsLoading, error: assessmentsError } = useAssessments();
    const { kudos, loading: kudosLoading, error: kudosError } = useKudos();
    
    const loading = assessmentsLoading || kudosLoading;
    const error = assessmentsError || kudosError;

    const handleViewAssessment = (assessment) => {
        setActivePage({
            name: 'Assessment',
            props: { assessmentId: assessment.assessment_id }
        });
    };

    if (loading) {
        return (
            <div className="p-8">
                <LoadingSpinner size="lg" message="Loading your dashboard..." />
            </div>
        );
    }

    if (error) {
        return (
            <div className="p-8">
                <ErrorMessage error={error} title="Dashboard Error" />
            </div>
        );
    }

    const activeReviews = filterActiveReviews(assessments);
    const completedReviews = filterCompletedReviews(assessments);
    const recentKudos = kudos.slice(0, 5);

    return (
        <div className="p-8">
            {/* Header */}
            <header className="mb-8">
                <h1 className="text-4xl font-bold text-white">Dashboard</h1>
                <p className="text-gray-400 mt-2">
                    Welcome back! Here's your summary.
                </p>
            </header>

            {/* Quick Stats */}
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-gray-400 text-sm">Active Reviews</p>
                            <p className="text-2xl font-bold text-cyan-400">{activeReviews.length}</p>
                        </div>
                        <Calendar className="text-cyan-400" size={24} />
                    </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-gray-400 text-sm">Total Reviews</p>
                            <p className="text-2xl font-bold text-green-400">{assessments.length}</p>
                        </div>
                        <CheckCircle className="text-green-400" size={24} />
                    </div>
                </div>

                <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                    <div className="flex items-center justify-between">
                        <div>
                            <p className="text-gray-400 text-sm">Recent Kudos</p>
                            <p className="text-2xl font-bold text-purple-400">{recentKudos.length}</p>
                        </div>
                        <Award className="text-purple-400" size={24} />
                    </div>
                </div>
            </div>

            {/* Main Content Grid */}
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
                {/* Active Reviews */}
                <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
                    <h2 className="text-2xl font-semibold mb-6 text-cyan-400 flex items-center">
                        <Calendar className="mr-3" size={24} />
                        Active Reviews
                    </h2>
                    <div className="space-y-4">
                        {activeReviews.length > 0 ? (
                            activeReviews.map(assessment => {
                                const statusInfo = getStatusDisplay(assessment);
                                
                                return (
                                    <div key={assessment.assessment_id} className="bg-gray-700 p-4 rounded-lg">
                                        <div className="flex justify-between items-start mb-3">
                                            <div>
                                                <h3 className="text-lg font-semibold text-white">{assessment.cycle_name}</h3>
                                                <div className="flex items-center mt-1">
                                                    <StatusBadge status={assessment.self_assessment_status || assessment.status} />
                                                </div>
                                            </div>
                                            <Button 
                                                onClick={() => handleViewAssessment(assessment)}
                                                variant="primary"
                                                size="sm"
                                            >
                                                {statusInfo.actionLabel}
                                            </Button>
                                        </div>
                                        
                                        {/* Enhanced Progress indicator */}
{assessment.self_assessment_status === 'in_progress' && (
    <div className="mt-3 p-2 bg-yellow-900 rounded text-yellow-200 text-sm flex items-center">
        <Clock size={14} className="mr-2" />
        <div>
            <div className="font-medium">Continue your self-assessment</div>
            <div className="text-xs text-yellow-300">Complete all sections to submit for review</div>
        </div>
    </div>
)}

                                      {assessment.self_assessment_status === 'employee_complete' && (
                                          <div className="mt-3 p-2 bg-blue-900 rounded text-blue-200 text-sm flex items-center">
                                              <CheckCircle size={14} className="mr-2" />
                                              <div>
                                                  <div className="font-medium">Submitted for manager review</div>
                                                  <div className="text-xs text-blue-300">Your manager will review and provide feedback</div>
                                              </div>
                                          </div>
                                      )}

                                      {assessment.self_assessment_status === 'manager_complete' && (
                                          <div className="mt-3 p-2 bg-purple-900 rounded text-purple-200 text-sm flex items-center">
                                              <Award size={14} className="mr-2" />
                                              <div>
                                                  <div className="font-medium">Manager review complete</div>
                                                  <div className="text-xs text-purple-300">Review the feedback and development plan</div>
                                              </div>
                                          </div>
                                      )}
                                    </div>
                                );
                            })
                        ) : (
                            <div className="text-center py-8 text-gray-500">
                                <Calendar size={48} className="mx-auto mb-4 text-gray-600" />
                                <p>No active reviews at this time.</p>
                            </div>
                        )}
                    </div>
                </div>

                {/* Kudos Wall */}
                <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-semibold text-yellow-400 flex items-center">
                            <Award className="mr-3" size={24} />
                            Kudos Wall
                        </h2>
                        {openModal && (
                            <button
                                onClick={() => openModal('giveKudo')}
                                className="bg-yellow-500 hover:bg-yellow-600 text-black font-bold py-2 px-4 rounded-lg transition text-sm"
                            >
                                Give Kudos
                            </button>
                        )}
                    </div>
                    
                    <div className="space-y-4">
                        {recentKudos.length > 0 ? (
                            recentKudos.map(kudo => (
                                <div key={kudo.kudo_id} className="bg-gray-700 p-4 rounded-lg">
                                    <div className="flex items-start space-x-3">
                                        <Award size={16} className="text-yellow-400 mt-1 flex-shrink-0" />
                                        <div className="flex-1">
                                            <div className="flex items-center space-x-2 mb-1">
                                                <span className="text-white font-medium">{kudo.recipient_name}</span>
                                                <span className="text-gray-400 text-sm">received kudos for</span>
                                                <span className="px-2 py-1 bg-cyan-600 text-cyan-100 text-xs rounded">
                                                    {kudo.core_value}
                                                </span>
                                            </div>
                                            <p className="text-gray-300 text-sm">{kudo.message}</p>
                                            <div className="flex justify-between items-center mt-2">
                                                <span className="text-gray-500 text-xs">from {kudo.giver_name}</span>
                                                <span className="text-gray-500 text-xs">
                                                    {formatDate(kudo.created_at)}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <div className="text-center py-8 text-gray-500">
                                <Award size={48} className="mx-auto mb-4 text-gray-600" />
                                <p className="mb-2">No kudos yet!</p>
                                <p className="text-xs">Be the first to recognize someone's great work.</p>
                            </div>
                        )}
                    </div>
                </div>
            </div>

            {/* Quick Actions */}
            <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
                <h2 className="text-2xl font-semibold mb-6 text-white flex items-center">
                    <TrendingUp className="mr-3" size={24} />
                    Quick Actions
                </h2>
                
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                    <button
                        onClick={() => setActivePage({ name: 'My Reviews' })}
                        className="bg-blue-700 hover:bg-blue-600 text-left p-4 rounded-lg transition group"
                    >
                        <div className="flex items-center">
                            <Calendar size={20} className="text-blue-400 mr-3" />
                            <div>
                                <p className="text-white font-medium">View All Reviews</p>
                                <p className="text-blue-300 text-sm">See your review history</p>
                            </div>
                        </div>
                    </button>

                    {openModal && (
                        <button
                            onClick={() => openModal('giveKudo')}
                            className="bg-yellow-700 hover:bg-yellow-600 text-left p-4 rounded-lg transition group"
                        >
                            <div className="flex items-center">
                                <Award size={20} className="text-yellow-400 mr-3" />
                                <div>
                                    <p className="text-white font-medium">Give Kudos</p>
                                    <p className="text-yellow-300 text-sm">Recognize a colleague's great work</p>
                                </div>
                            </div>
                        </button>
                    )}
                </div>
            </div>
        </div>
    );
};

export default Dashboard;


--- FILE: src\components\pages\EnhancedDashboard.js ---

// src/components/pages/EnhancedDashboard.js - Enhanced dashboard with progress tracking
import React, { useState, useEffect } from 'react';
import { 
  BarChart3, 
  TrendingUp, 
  Users, 
  FileText, 
  Target, 
  Calendar, 
  Clock, 
  CheckCircle, 
  AlertTriangle,
  Award,
  Bell,
  Activity
} from 'lucide-react';
import { useApp } from '../../contexts';
import { LoadingSpinner, ErrorMessage, StatusBadge } from '../ui';
import { formatDate } from '../../utils';
import NotificationService from '../../services/NotificationService';

export default function EnhancedDashboard() {
  const { userRole, userName } = useApp();
  const [stats, setStats] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  useEffect(() => {
    fetchDashboardStats();
  }, [userRole]);

  const fetchDashboardStats = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await NotificationService.getDashboardStats(userRole);
      console.log('Dashboard stats received:', JSON.stringify(data, null, 2));
      setStats(data);
      
    } catch (err) {
      console.error('Error fetching dashboard stats:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="p-8">
        <LoadingSpinner size="lg" message="Loading dashboard..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <ErrorMessage 
          error={error} 
          title="Dashboard Error" 
          onRetry={fetchDashboardStats}
        />
      </div>
    );
  }

  return (
    <div className="p-8">
      {/* Header */}
      <div className="mb-8 flex items-center justify-between">
        <div>
          <h1 className="text-4xl font-bold text-cyan-400 flex items-center">
            <BarChart3 className="mr-3" size={36} />
            Dashboard
          </h1>
          <p className="text-gray-400 mt-2">
            Welcome back, {userName}! Here's your performance overview.
          </p>
        </div>
        <div className="flex space-x-3">
          <button
            onClick={fetchDashboardStats}
            className="bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <Activity className="mr-2" size={16} />
            Refresh Stats
          </button>
          {/* Debug info - temporary */}
          <div className="text-xs text-gray-500 bg-gray-800 px-3 py-2 rounded">
            Role: {userRole} | Data: {stats ? 'loaded' : 'none'} | Pending: {stats?.assessments?.pending || 0}
          </div>
        </div>
      </div>

      {/* Role-specific Dashboard Content */}
      {userRole === 'admin' && <AdminDashboard stats={stats} />}
      {userRole === 'manager' && <ManagerDashboard stats={stats} />}
      {userRole === 'employee' && <EmployeeDashboard stats={stats} />}
    </div>
  );
}

// Admin Dashboard Component
const AdminDashboard = ({ stats }) => {
  if (!stats) return null;

  return (
    <div className="space-y-8">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          title="Total Employees"
          value={stats.employees?.total || 0}
          icon={Users}
          color="blue"
          subtitle={`${Object.values(stats.employees?.by_role || {}).length} roles`}
        />
        <MetricCard
          title="Active Review Cycles"
          value={stats.review_cycles?.active || 0}
          icon={Calendar}
          color="green"
          subtitle={`${stats.review_cycles?.total || 0} total cycles`}
        />
        <MetricCard
          title="Assessment Completion"
          value={`${stats.assessments?.completion_rate || 0}%`}
          icon={CheckCircle}
          color="cyan"
          subtitle={`${stats.assessments?.completed || 0}/${stats.assessments?.total || 0} completed`}
        />
        <MetricCard
          title="Pending Reviews"
          value={stats.assessments?.manager_reviews_pending || 0}
          icon={Clock}
          color="yellow"
          subtitle="Awaiting manager review"
        />
      </div>

      {/* Detailed Statistics */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Employee Distribution */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <Users className="mr-2 text-blue-400" size={20} />
            Employee Distribution
          </h3>
          <div className="space-y-3">
            {Object.entries(stats.employees?.by_role || {}).map(([role, count]) => (
              <div key={role} className="flex items-center justify-between">
                <span className="text-gray-300 capitalize">{role}s</span>
                <div className="flex items-center space-x-2">
                  <div className="bg-gray-700 rounded-full h-2 w-24">
                    <div 
                      className="bg-blue-500 rounded-full h-2"
                      style={{ width: `${(count / stats.employees.total) * 100}%` }}
                    />
                  </div>
                  <span className="text-white font-medium w-8 text-right">{count}</span>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Development Plans Overview */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <Target className="mr-2 text-purple-400" size={20} />
            Development Plans
          </h3>
          <div className="grid grid-cols-2 gap-4">
            <div className="bg-gray-700 rounded-lg p-4 text-center">
              <p className="text-2xl font-bold text-white">{stats.development_plans?.submitted || 0}</p>
              <p className="text-gray-400 text-sm">Submitted</p>
            </div>
            <div className="bg-gray-700 rounded-lg p-4 text-center">
              <p className="text-2xl font-bold text-green-400">{stats.development_plans?.approved || 0}</p>
              <p className="text-gray-400 text-sm">Approved</p>
            </div>
            <div className="bg-gray-700 rounded-lg p-4 text-center">
              <p className="text-2xl font-bold text-yellow-400">{stats.development_plans?.under_review || 0}</p>
              <p className="text-gray-400 text-sm">Under Review</p>
            </div>
            <div className="bg-gray-700 rounded-lg p-4 text-center">
              <p className="text-2xl font-bold text-red-400">{stats.development_plans?.needs_revision || 0}</p>
              <p className="text-gray-400 text-sm">Need Revision</p>
            </div>
          </div>
        </div>
      </div>

      {/* Recent Activity */}
      {stats.recent_activity && stats.recent_activity.length > 0 && (
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <Activity className="mr-2 text-green-400" size={20} />
            Recent Activity
          </h3>
          <div className="space-y-3">
            {stats.recent_activity.slice(0, 5).map((activity, index) => (
              <div key={index} className="flex items-center space-x-3 p-3 bg-gray-700 rounded-lg">
                <div className="w-2 h-2 bg-cyan-400 rounded-full"></div>
                <div className="flex-1">
                  <p className="text-gray-300">{activity.description}</p>
                  <p className="text-gray-500 text-sm">{formatDate(activity.timestamp)}</p>
                </div>
              </div>
            ))}
          </div>
        </div>
      )}
    </div>
  );
};

// Manager Dashboard Component
const ManagerDashboard = ({ stats }) => {
  if (!stats) return null;

  return (
    <div className="space-y-8">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          title="Team Members"
          value={stats.team?.total_members || 0}
          icon={Users}
          color="blue"
          subtitle="Direct reports"
        />
        <MetricCard
          title="Pending Reviews"
          value={stats.pending_reviews || 0}
          icon={Clock}
          color="yellow"
          subtitle="Awaiting your review"
        />
        <MetricCard
          title="Team Completion Rate"
          value={`${stats.assessments?.team_completion_rate || 0}%`}
          icon={TrendingUp}
          color="green"
          subtitle="Assessment completion"
        />
        <MetricCard
          title="Development Plans"
          value={stats.development_plans?.pending_review || 0}
          icon={Target}
          color="purple"
          subtitle="Pending review"
        />
      </div>

      {/* Team Overview */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <Users className="mr-2 text-blue-400" size={20} />
            Your Team
          </h3>
          {stats.team?.team_members && stats.team.team_members.length > 0 ? (
            <div className="space-y-3">
              {stats.team.team_members.slice(0, 5).map((member) => (
                <div key={member.id} className="flex items-center space-x-3 p-3 bg-gray-700 rounded-lg">
                  <div className="w-8 h-8 bg-cyan-600 rounded-full flex items-center justify-center">
                    <span className="text-white text-sm font-medium">
                      {member.name.split(' ').map(n => n[0]).join('')}
                    </span>
                  </div>
                  <div className="flex-1">
                    <p className="text-white font-medium">{member.name}</p>
                    <p className="text-gray-400 text-sm">{member.job_title}</p>
                  </div>
                </div>
              ))}
              {stats.team.team_members.length > 5 && (
                <p className="text-gray-400 text-sm text-center">
                  ... and {stats.team.team_members.length - 5} more team members
                </p>
              )}
            </div>
          ) : (
            <p className="text-gray-400">No team members assigned yet.</p>
          )}
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <Target className="mr-2 text-purple-400" size={20} />
            Development Plan Status
          </h3>
          <div className="space-y-4">
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Pending Review</span>
              <span className="text-yellow-400 font-bold">{stats.development_plans?.pending_review || 0}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Approved</span>
              <span className="text-green-400 font-bold">{stats.development_plans?.approved || 0}</span>
            </div>
            <div className="flex items-center justify-between">
              <span className="text-gray-300">Need Revision</span>
              <span className="text-red-400 font-bold">{stats.development_plans?.needs_revision || 0}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Employee Dashboard Component
const EmployeeDashboard = ({ stats }) => {
  if (!stats) return null;

  return (
    <div className="space-y-8">
      {/* Key Metrics */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <MetricCard
          title="Assessments Completed"
          value={stats.assessments?.completed || 0}
          icon={CheckCircle}
          color="green"
          subtitle={`${stats.assessments?.total || 0} total assessments`}
        />
        <MetricCard
          title="Pending Assessments"
          value={stats.assessments?.pending || 0}
          icon={Clock}
          color="yellow"
          subtitle="Action required"
        />
        <MetricCard
          title="Development Plans"
          value={stats.development_plans?.total || 0}
          icon={Target}
          color="purple"
          subtitle={`${stats.development_plans?.approved || 0} approved`}
        />
        <MetricCard
          title="Manager Reviews"
          value={stats.assessments?.manager_reviews_completed || 0}
          icon={Award}
          color="cyan"
          subtitle="Feedback received"
        />
      </div>

      {/* Profile and Progress */}
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
        {/* Profile Info */}
        {stats.profile && (
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
              <Users className="mr-2 text-blue-400" size={20} />
              Your Profile
            </h3>
            <div className="space-y-3">
              <div className="flex items-center space-x-4">
                <div className="w-12 h-12 bg-cyan-600 rounded-full flex items-center justify-center">
                  <span className="text-white font-medium">
                    {stats.profile.name?.split(' ').map(n => n[0]).join('') || 'U'}
                  </span>
                </div>
                <div>
                  <p className="text-white font-medium">{stats.profile.name}</p>
                  <p className="text-gray-400">{stats.profile.job_title}</p>
                  <p className="text-gray-500 text-sm">{stats.profile.email}</p>
                </div>
              </div>
              {stats.profile.manager_name && (
                <div className="bg-gray-700 rounded-lg p-3">
                  <p className="text-gray-400 text-sm">Reports to</p>
                  <p className="text-white">{stats.profile.manager_name}</p>
                </div>
              )}
            </div>
          </div>
        )}

        {/* Development Progress */}
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <h3 className="text-xl font-semibold text-white mb-4 flex items-center">
            <TrendingUp className="mr-2 text-green-400" size={20} />
            Development Progress
          </h3>
          <div className="space-y-4">
            <div className="bg-gray-700 rounded-lg p-4">
              <div className="flex items-center justify-between mb-2">
                <span className="text-gray-300">Development Plans</span>
                <span className="text-white font-bold">{stats.development_plans?.total || 0}</span>
              </div>
              <div className="space-y-2">
                <div className="flex items-center justify-between text-sm">
                  <span className="text-green-400">âœ“ Approved</span>
                  <span className="text-green-400">{stats.development_plans?.approved || 0}</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-yellow-400">â³ Under Review</span>
                  <span className="text-yellow-400">{stats.development_plans?.under_review || 0}</span>
                </div>
                <div className="flex items-center justify-between text-sm">
                  <span className="text-red-400">âš  Needs Revision</span>
                  <span className="text-red-400">{stats.development_plans?.needs_revision || 0}</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

// Reusable Metric Card Component
const MetricCard = ({ title, value, icon: Icon, color, subtitle }) => {
  const colorClasses = {
    blue: 'text-blue-400',
    green: 'text-green-400',
    yellow: 'text-yellow-400',
    red: 'text-red-400',
    purple: 'text-purple-400',
    cyan: 'text-cyan-400'
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
      <div className="flex items-center">
        <Icon className={`${colorClasses[color]} mr-3`} size={24} />
        <div>
          <p className="text-2xl font-bold text-white">{value}</p>
          <p className="text-gray-400 text-sm font-medium">{title}</p>
          {subtitle && (
            <p className="text-gray-500 text-xs mt-1">{subtitle}</p>
          )}
        </div>
      </div>
    </div>
  );
};


--- FILE: src\components\pages\FeedbackWall.js ---

import React, { useState, useEffect } from 'react';
import { MessageSquare, Star, User, Filter, Plus, Clock, ThumbsUp } from 'lucide-react';
import { useApp } from '../../contexts';
import { Button, LoadingSpinner, ErrorMessage } from '../ui';
import { formatDate } from '../../utils';
import { FeedbackService } from '../../services';

// Define feedback type configuration outside component for global access
const feedbackTypeConfig = {
  positive: { 
    icon: Star, 
    color: 'text-yellow-400', 
    bgColor: 'bg-yellow-900', 
    label: 'Positive Recognition' 
  },
  constructive: { 
    icon: MessageSquare, 
    color: 'text-blue-400', 
    bgColor: 'bg-blue-900', 
    label: 'Constructive Feedback' 
  },
  appreciation: { 
    icon: ThumbsUp, 
    color: 'text-green-400', 
    bgColor: 'bg-green-900', 
    label: 'Appreciation' 
  }
};

const FeedbackWall = () => {
  const { openModal } = useApp();
  const [feedback, setFeedback] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [filter, setFilter] = useState('all');
  const [refreshing, setRefreshing] = useState(false);

  useEffect(() => {
    fetchFeedback();
  }, []);

  const fetchFeedback = async () => {
    try {
      setLoading(true);
      const data = await FeedbackService.getFeedbackWall(50, filter === 'all' ? null : filter);
      setFeedback(data);
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleRefresh = async () => {
    setRefreshing(true);
    await fetchFeedback();
    setRefreshing(false);
  };

  const filteredFeedback = feedback.filter(item => {
    if (filter === 'all') return true;
    return item.feedback_type === filter;
  });


  if (loading) {
    return (
      <div className="p-8">
        <LoadingSpinner size="lg" message="Loading feedback wall..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <ErrorMessage error={error} title="Feedback Wall Error" />
      </div>
    );
  }

  return (
    <div className="p-8">
      {/* Header */}
      <header className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold text-white">Feedback Wall</h1>
            <p className="text-gray-400 mt-2">
              Real-time peer feedback fostering continuous dialogue and growth
            </p>
          </div>
          <Button
            onClick={() => openModal('giveFeedback')}
            variant="primary"
          >
            <Plus size={18} className="mr-2" />
            Give Feedback
          </Button>
        </div>
      </header>

      {/* Filter Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-700">
          <nav className="-mb-px flex space-x-8">
            {[
              { key: 'all', label: 'All Feedback', count: feedback.length },
              { key: 'positive', label: 'Recognition', count: feedback.filter(f => f.feedback_type === 'positive').length },
              { key: 'constructive', label: 'Growth', count: feedback.filter(f => f.feedback_type === 'constructive').length },
              { key: 'appreciation', label: 'Thanks', count: feedback.filter(f => f.feedback_type === 'appreciation').length }
            ].map(tab => (
              <button
                key={tab.key}
                onClick={() => setFilter(tab.key)}
                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center space-x-2 ${
                  filter === tab.key
                    ? 'border-cyan-500 text-cyan-400'
                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
                }`}
              >
                <span>{tab.label}</span>
                <span className="bg-gray-600 text-gray-300 px-2 py-1 rounded-full text-xs">
                  {tab.count}
                </span>
              </button>
            ))}
          </nav>
        </div>

        <div className="mt-4 flex items-center justify-between">
          <p className="text-gray-400 text-sm">
            Showing {filteredFeedback.length} feedback items
          </p>
          <Button
            onClick={handleRefresh}
            variant="secondary"
            size="sm"
            disabled={refreshing}
          >
            {refreshing ? (
              <Clock size={14} className="mr-1 animate-spin" />
            ) : (
              <Filter size={14} className="mr-1" />
            )}
            Refresh
          </Button>
        </div>
      </div>

      {/* Feedback Content */}
      {filteredFeedback.length === 0 ? (
        <EmptyState filter={filter} onGiveFeedback={() => openModal('giveFeedback')} />
      ) : (
        <div className="space-y-4">
          {filteredFeedback.map(item => (
            <FeedbackCard key={item.feedback_id} feedback={item} />
          ))}
        </div>
      )}

      {/* Usage Guidelines */}
      <div className="mt-12 bg-gray-800 rounded-lg p-6 border border-gray-700">
        <h3 className="text-lg font-semibold text-white mb-4">How to Use the Feedback Wall</h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <Star className="text-yellow-400" size={20} />
              <h4 className="text-yellow-400 font-medium">Recognition</h4>
            </div>
            <p className="text-gray-300 text-sm">
              Celebrate colleagues' achievements, great work, and positive behaviors. 
              Public recognition boosts morale and reinforces core values.
            </p>
          </div>
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <MessageSquare className="text-blue-400" size={20} />
              <h4 className="text-blue-400 font-medium">Growth Feedback</h4>
            </div>
            <p className="text-gray-300 text-sm">
              Provide constructive feedback to help colleagues improve and develop. 
              Focus on specific behaviors and actionable suggestions.
            </p>
          </div>
          <div className="space-y-2">
            <div className="flex items-center space-x-2">
              <ThumbsUp className="text-green-400" size={20} />
              <h4 className="text-green-400 font-medium">Appreciation</h4>
            </div>
            <p className="text-gray-300 text-sm">
              Thank colleagues for their help, support, or collaboration. 
              Expressing gratitude strengthens team relationships.
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

// Empty State Component
const EmptyState = ({ filter, onGiveFeedback }) => (
  <div className="text-center py-16">
    <MessageSquare size={64} className="mx-auto text-gray-500 mb-6" />
    <h3 className="text-xl font-semibold text-white mb-2">
      {filter === 'all' ? 'No feedback yet' : `No ${filter} feedback yet`}
    </h3>
    <p className="text-gray-400 mb-8 max-w-md mx-auto">
      {filter === 'all' 
        ? "Be the first to share feedback with your colleagues! Continuous dialogue helps everyone grow."
        : `No ${filter} feedback has been shared yet. Start the conversation!`
      }
    </p>
    <Button onClick={onGiveFeedback} variant="primary">
      <Plus size={18} className="mr-2" />
      Give First Feedback
    </Button>
  </div>
);

// Feedback Card Component
const FeedbackCard = ({ feedback }) => {
  const typeConfig = feedbackTypeConfig[feedback.feedback_type] || feedbackTypeConfig.positive;
  const Icon = typeConfig.icon;

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700 hover:border-gray-600 transition-colors">
      <div className="flex items-start space-x-4">
        <div className={`p-2 rounded-lg ${typeConfig.bgColor} bg-opacity-50`}>
          <Icon size={20} className={typeConfig.color} />
        </div>
        
        <div className="flex-1">
          <div className="flex items-center justify-between mb-2">
            <div className="flex items-center space-x-2">
              <h4 className="text-white font-medium">{feedback.recipient_name}</h4>
              <span className="text-gray-400">received</span>
              <span className={`px-2 py-1 text-xs rounded ${typeConfig.bgColor} ${typeConfig.color}`}>
                {typeConfig.label}
              </span>
            </div>
            <span className="text-gray-500 text-sm">
              {formatDate(feedback.created_at)}
            </span>
          </div>
          
          <p className="text-gray-300 mb-3">{feedback.message}</p>
          
          <div className="flex items-center justify-between text-sm">
            <div className="flex items-center space-x-4">
              <span className="text-gray-400">
                from {feedback.is_anonymous ? 'Anonymous' : feedback.giver_name}
              </span>
              {feedback.category && feedback.category !== 'general' && (
                <span className="px-2 py-1 bg-gray-700 text-gray-300 rounded text-xs">
                  {feedback.category.replace('_', ' ')}
                </span>
              )}
            </div>
            
            <div className="flex items-center space-x-2">
              <button className="text-gray-400 hover:text-cyan-400 transition-colors">
                <ThumbsUp size={16} />
              </button>
              <span className="text-gray-500 text-xs">{feedback.helpful_count || 0}</span>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FeedbackWall;


--- FILE: src\components\pages\ManagerPlaybook.js ---

import React, { useState, useEffect } from 'react';
import { BookOpen, Plus, Search, Edit3, Save, X, User, Clock, MessageSquare, Target, Star } from 'lucide-react';
import { useApp } from '../../contexts';
import { Button, LoadingSpinner, ErrorMessage } from '../ui';
import { formatDate } from '../../utils';
import ManagerPlaybookService from '../../services/ManagerPlaybookService';

const ManagerPlaybook = () => {
  const { userRole } = useApp();
  const [employees, setEmployees] = useState([]);
  const [selectedEmployee, setSelectedEmployee] = useState(null);
  const [notes, setNotes] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [showAddNote, setShowAddNote] = useState(false);
  const [editingNote, setEditingNote] = useState(null);
  const [newNote, setNewNote] = useState({
    title: '',
    content: '',
    category: 'general',
    priority: 'medium'
  });

  useEffect(() => {
    if (userRole !== 'manager' && userRole !== 'admin') {
      setError('Access denied. Manager Playbook is only available to managers and admins.');
      setLoading(false);
      return;
    }
    fetchEmployees();
  }, [userRole]);

  useEffect(() => {
    if (selectedEmployee) {
      fetchEmployeeNotes(selectedEmployee.employee_id);
    }
  }, [selectedEmployee]);

  const fetchEmployees = async () => {
    try {
      setLoading(true);
      const data = await ManagerPlaybookService.getManagerEmployees();
      setEmployees(data);
      
      if (data.length > 0) {
        setSelectedEmployee(data[0]);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const fetchEmployeeNotes = async (employeeId) => {
    try {
      const data = await ManagerPlaybookService.getEmployeeNotes(employeeId);
      setNotes(data);
    } catch (err) {
      console.error('Error fetching notes:', err);
      setNotes([]);
    }
  };

  const handleSaveNote = async () => {
    try {
      // Validate note
      if (!newNote.title.trim() || !newNote.content.trim()) {
        alert('Please provide both title and content for the note.');
        return;
      }

      const noteData = {
        employee_id: selectedEmployee.employee_id,
        title: newNote.title,
        content: newNote.content,
        category: newNote.category,
        priority: newNote.priority
      };

      await ManagerPlaybookService.saveManagerNote(noteData);
      
      // Refresh notes list
      await fetchEmployeeNotes(selectedEmployee.employee_id);
      
      setNewNote({ title: '', content: '', category: 'general', priority: 'medium' });
      setShowAddNote(false);
      
    } catch (err) {
      alert('Error saving note: ' + err.message);
    }
  };

  const handleEditNote = (note) => {
    setEditingNote(note);
    setNewNote({
      title: note.title,
      content: note.content,
      category: note.category,
      priority: note.priority
    });
    setShowAddNote(true);
  };

  const handleUpdateNote = async () => {
    try {
      const noteData = {
        title: newNote.title,
        content: newNote.content,
        category: newNote.category,
        priority: newNote.priority
      };

      await ManagerPlaybookService.updateManagerNote(editingNote.id, noteData);
      
      // Refresh notes list
      await fetchEmployeeNotes(selectedEmployee.employee_id);
      
      setEditingNote(null);
      setNewNote({ title: '', content: '', category: 'general', priority: 'medium' });
      setShowAddNote(false);
      
    } catch (err) {
      alert('Error updating note: ' + err.message);
    }
  };

  const handleCancelNote = () => {
    setShowAddNote(false);
    setEditingNote(null);
    setNewNote({ title: '', content: '', category: 'general', priority: 'medium' });
  };

  const filteredEmployees = employees.filter(emp => 
    emp.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    emp.job_title.toLowerCase().includes(searchTerm.toLowerCase())
  );

  const categories = [
    { value: 'general', label: 'General Notes', color: 'bg-gray-600' },
    { value: 'performance', label: 'Performance', color: 'bg-blue-600' },
    { value: 'development', label: 'Development', color: 'bg-green-600' },
    { value: 'personal', label: 'Personal', color: 'bg-purple-600' },
    { value: 'goals', label: 'Goals', color: 'bg-yellow-600' }
  ];

  const priorities = [
    { value: 'low', label: 'Low', color: 'text-gray-400' },
    { value: 'medium', label: 'Medium', color: 'text-yellow-400' },
    { value: 'high', label: 'High', color: 'text-red-400' },
    { value: 'urgent', label: 'Urgent', color: 'text-red-600' }
  ];

  if (loading) {
    return (
      <div className="p-8">
        <LoadingSpinner size="lg" message="Loading Manager Playbook..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <ErrorMessage error={error} title="Manager Playbook Error" />
      </div>
    );
  }

  return (
    <div className="p-8">
      {/* Header */}
      <header className="mb-8">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-4xl font-bold text-white flex items-center">
              <BookOpen className="mr-3 text-cyan-400" size={36} />
              Manager's Playbook
            </h1>
            <p className="text-gray-400 mt-2">
              Private notes and coaching insights for your direct reports
            </p>
          </div>
          <div className="bg-blue-900 bg-opacity-50 rounded-lg p-4 border border-blue-700">
            <p className="text-blue-200 text-sm font-medium">ðŸ”’ Confidential</p>
            <p className="text-blue-300 text-xs">Notes are private and visible only to you</p>
          </div>
        </div>
      </header>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Employee List */}
        <div className="bg-gray-800 rounded-lg shadow-2xl">
          <div className="p-6 border-b border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-4">Team Members</h2>
            <div className="relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={16} />
              <input
                type="text"
                placeholder="Search team members..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              />
            </div>
          </div>
          
          <div className="p-4 space-y-2 max-h-96 overflow-y-auto">
            {filteredEmployees.map(employee => (
              <button
                key={employee.employee_id}
                onClick={() => setSelectedEmployee(employee)}
                className={`w-full text-left p-3 rounded-lg transition-colors ${
                  selectedEmployee?.employee_id === employee.employee_id
                    ? 'bg-cyan-600 text-white'
                    : 'bg-gray-700 text-gray-300 hover:bg-gray-600'
                }`}
              >
                <div className="flex items-center space-x-3">
                  <User size={16} className="text-cyan-400" />
                  <div>
                    <p className="font-medium">{employee.name}</p>
                    <p className="text-xs opacity-75">{employee.job_title}</p>
                  </div>
                </div>
              </button>
            ))}
          </div>
        </div>

        {/* Notes Section */}
        <div className="lg:col-span-2 space-y-6">
          {selectedEmployee ? (
            <>
              {/* Employee Header */}
              <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
                <div className="flex items-center justify-between">
                  <div className="flex items-center space-x-4">
                    <div className="w-12 h-12 bg-cyan-600 rounded-full flex items-center justify-center">
                      <User className="text-white" size={24} />
                    </div>
                    <div>
                      <h2 className="text-2xl font-bold text-white">{selectedEmployee.name}</h2>
                      <p className="text-gray-400">{selectedEmployee.job_title}</p>
                    </div>
                  </div>
                  <Button
                    onClick={() => setShowAddNote(true)}
                    variant="primary"
                  >
                    <Plus size={16} className="mr-2" />
                    Add Note
                  </Button>
                </div>
              </div>

              {/* Add/Edit Note Form */}
              {showAddNote && (
                <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
                  <div className="flex items-center justify-between mb-4">
                    <h3 className="text-lg font-semibold text-white">
                      {editingNote ? 'Edit Note' : 'Add New Note'}
                    </h3>
                    <button
                      onClick={handleCancelNote}
                      className="text-gray-400 hover:text-white"
                    >
                      <X size={20} />
                    </button>
                  </div>

                  <div className="space-y-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Title *
                      </label>
                      <input
                        type="text"
                        value={newNote.title}
                        onChange={(e) => setNewNote(prev => ({ ...prev, title: e.target.value }))}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                        placeholder="Brief note title..."
                      />
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Category
                        </label>
                        <select
                          value={newNote.category}
                          onChange={(e) => setNewNote(prev => ({ ...prev, category: e.target.value }))}
                          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                        >
                          {categories.map(cat => (
                            <option key={cat.value} value={cat.value}>{cat.label}</option>
                          ))}
                        </select>
                      </div>

                      <div>
                        <label className="block text-sm font-medium text-gray-300 mb-2">
                          Priority
                        </label>
                        <select
                          value={newNote.priority}
                          onChange={(e) => setNewNote(prev => ({ ...prev, priority: e.target.value }))}
                          className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                        >
                          {priorities.map(priority => (
                            <option key={priority.value} value={priority.value}>{priority.label}</option>
                          ))}
                        </select>
                      </div>
                    </div>

                    <div>
                      <label className="block text-sm font-medium text-gray-300 mb-2">
                        Content *
                      </label>
                      <textarea
                        value={newNote.content}
                        onChange={(e) => setNewNote(prev => ({ ...prev, content: e.target.value }))}
                        className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                        rows={4}
                        placeholder="Your private notes about this team member..."
                      />
                    </div>

                    <div className="flex justify-end space-x-3">
                      <Button
                        onClick={handleCancelNote}
                        variant="secondary"
                      >
                        Cancel
                      </Button>
                      <Button
                        onClick={editingNote ? handleUpdateNote : handleSaveNote}
                        variant="primary"
                      >
                        <Save size={16} className="mr-2" />
                        {editingNote ? 'Update Note' : 'Save Note'}
                      </Button>
                    </div>
                  </div>
                </div>
              )}

              {/* Notes List */}
              <div className="bg-gray-800 rounded-lg shadow-2xl">
                <div className="p-6 border-b border-gray-700">
                  <h3 className="text-lg font-semibold text-white">
                    Notes for {selectedEmployee.name} ({notes.length})
                  </h3>
                </div>

                <div className="p-6">
                  {notes.length === 0 ? (
                    <div className="text-center py-12">
                      <MessageSquare size={48} className="mx-auto text-gray-500 mb-4" />
                      <h4 className="text-white text-lg mb-2">No notes yet</h4>
                      <p className="text-gray-400 mb-6">
                        Start building your coaching insights by adding the first note for {selectedEmployee.name}.
                      </p>
                      <Button
                        onClick={() => setShowAddNote(true)}
                        variant="primary"
                      >
                        <Plus size={16} className="mr-2" />
                        Add First Note
                      </Button>
                    </div>
                  ) : (
                    <div className="space-y-4">
                      {notes.map(note => (
                        <NoteCard
                          key={note.id}
                          note={note}
                          categories={categories}
                          priorities={priorities}
                          onEdit={handleEditNote}
                        />
                      ))}
                    </div>
                  )}
                </div>
              </div>
            </>
          ) : (
            <div className="bg-gray-800 rounded-lg shadow-2xl p-12 text-center">
              <User size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">
                Select a Team Member
              </h3>
              <p className="text-gray-400">
                Choose a team member from the list to view and manage their coaching notes.
              </p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

// Note Card Component
const NoteCard = ({ note, categories, priorities, onEdit }) => {
  const category = categories.find(c => c.value === note.category);
  const priority = priorities.find(p => p.value === note.priority);

  return (
    <div className="bg-gray-700 rounded-lg p-4 border border-gray-600 hover:border-gray-500 transition-colors">
      <div className="flex justify-between items-start mb-3">
        <div className="flex-1">
          <div className="flex items-center space-x-2 mb-2">
            <h4 className="text-white font-medium">{note.title}</h4>
            <span className={`px-2 py-1 text-xs rounded ${category?.color} text-white`}>
              {category?.label}
            </span>
            <span className={`text-xs font-medium ${priority?.color}`}>
              {priority?.label} Priority
            </span>
          </div>
          <p className="text-gray-300 text-sm leading-relaxed">{note.content}</p>
        </div>
        <button
          onClick={() => onEdit(note)}
          className="text-gray-400 hover:text-cyan-400 transition-colors ml-4"
        >
          <Edit3 size={16} />
        </button>
      </div>
      
      <div className="flex items-center justify-between text-xs text-gray-500">
        <span className="flex items-center">
          <Clock size={12} className="mr-1" />
          {formatDate(note.created_at)}
        </span>
        {note.updated_at && note.updated_at !== note.created_at && (
          <span>Updated {formatDate(note.updated_at)}</span>
        )}
      </div>
    </div>
  );
};

export default ManagerPlaybook;


--- FILE: src\components\pages\ManagerReview.js ---

// src/components/pages/ManagerReview.js - Manager interface for reviewing employee assessments
import React, { useState, useEffect } from 'react';
import { 
  User, 
  Calendar, 
  Clock, 
  Save, 
  ArrowLeft, 
  FileText, 
  MessageSquare,
  Star,
  Target,
  TrendingUp,
  Award
} from 'lucide-react';
import { useApp } from '../../contexts';
import { LoadingSpinner, ErrorMessage, Button, StatusBadge } from '../ui';
import { formatDate } from '../../utils';
import { supabase } from '../../services';

export default function ManagerReview({ pageProps = {} }) {
  const { setActivePage } = useApp();
  const { 
    assessmentId, 
    employeeId, 
    employeeName, 
    cycleId, 
    cycleName 
  } = pageProps;

  const [loading, setLoading] = useState(true);
  const [saving, setSaving] = useState(false);
  const [error, setError] = useState(null);
  const [assessment, setAssessment] = useState(null);
  const [managerFeedback, setManagerFeedback] = useState({
    overall_performance: '',
    strengths: '',
    areas_for_improvement: '',
    goals_for_next_period: '',
    development_recommendations: '',
    rating: 3
  });

  // Fetch assessment data
  useEffect(() => {
    if (assessmentId) {
      fetchAssessmentData();
    }
  }, [assessmentId]);

  const fetchAssessmentData = async () => {
    try {
      setLoading(true);
      setError(null);

      // Fetch assessment details including employee self-assessment
      const { data, error } = await supabase
        .from('assessments')
        .select(`
          *,
          employee:employees(name, email, job_title),
          review_cycle:review_cycles(name, description, start_date, end_date)
        `)
        .eq('id', assessmentId)
        .single();

      if (error) throw error;

      setAssessment(data);

      // Load existing manager feedback if available
      if (data.manager_feedback && Object.keys(data.manager_feedback).length > 0) {
        setManagerFeedback(prev => ({
          ...prev,
          ...data.manager_feedback
        }));
      }
    } catch (err) {
      console.error('Error fetching assessment data:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSaveReview = async () => {
    try {
      setSaving(true);
      setError(null);

      // Update assessment with manager feedback
      const { error: updateError } = await supabase
        .from('assessments')
        .update({
          manager_feedback: managerFeedback,
          manager_review_status: 'completed',
          manager_reviewed_at: new Date().toISOString(),
          updated_at: new Date().toISOString()
        })
        .eq('id', assessmentId);

      if (updateError) throw updateError;

      // Navigate back to My Team
      setActivePage({ name: 'My Team', props: {} });
    } catch (err) {
      console.error('Error saving manager review:', err);
      setError(err.message);
    } finally {
      setSaving(false);
    }
  };

  const handleInputChange = (field, value) => {
    setManagerFeedback(prev => ({
      ...prev,
      [field]: value
    }));
  };

  if (loading) {
    return (
      <div className="p-8">
        <LoadingSpinner size="lg" message="Loading assessment..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <ErrorMessage 
          error={error} 
          title="Error Loading Assessment" 
          onRetry={fetchAssessmentData}
        />
      </div>
    );
  }

  if (!assessment) {
    return (
      <div className="p-8">
        <div className="text-center py-12">
          <FileText size={64} className="mx-auto text-gray-500 mb-4" />
          <h3 className="text-xl font-semibold text-white mb-2">Assessment Not Found</h3>
          <p className="text-gray-400">The requested assessment could not be found.</p>
          <Button 
            onClick={() => setActivePage({ name: 'My Team', props: {} })}
            className="mt-4"
          >
            Return to My Team
          </Button>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div className="flex items-center space-x-4">
          <Button 
            variant="secondary" 
            onClick={() => setActivePage({ name: 'My Team', props: {} })}
          >
            <ArrowLeft size={16} className="mr-2" />
            Back to My Team
          </Button>
          <div>
            <h1 className="text-3xl font-bold text-cyan-400">Manager Review</h1>
            <p className="text-gray-400 mt-1">
              Review assessment for {assessment.employee?.name}
            </p>
          </div>
        </div>
        <div className="flex space-x-3">
          <Button 
            variant="primary"
            onClick={handleSaveReview}
            disabled={saving}
          >
            <Save size={16} className="mr-2" />
            {saving ? 'Saving...' : 'Complete Review'}
          </Button>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
        {/* Employee Self-Assessment (Left Side) */}
        <div className="lg:col-span-2 space-y-6">
          {/* Assessment Info */}
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="flex items-center space-x-4 mb-4">
              <div className="w-12 h-12 bg-cyan-600 rounded-full flex items-center justify-center">
                <User className="text-white" size={24} />
              </div>
              <div>
                <h2 className="text-xl font-semibold text-white">{assessment.employee?.name}</h2>
                <p className="text-gray-400">{assessment.employee?.job_title}</p>
                <p className="text-gray-500 text-sm">{assessment.employee?.email}</p>
              </div>
            </div>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div>
                <p className="text-sm text-gray-400">Review Cycle</p>
                <p className="text-white font-medium">{assessment.review_cycle?.name}</p>
              </div>
              <div>
                <p className="text-sm text-gray-400">Period</p>
                <p className="text-white">
                  {formatDate(assessment.review_cycle?.start_date)} - {formatDate(assessment.review_cycle?.end_date)}
                </p>
              </div>
              <div>
                <p className="text-sm text-gray-400">Status</p>
                <StatusBadge 
                  status={assessment.self_assessment_status} 
                  color={assessment.self_assessment_status === 'submitted' ? 'green' : 'yellow'}
                />
              </div>
            </div>
          </div>

          {/* Employee Self-Assessment */}
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
              <FileText className="mr-2 text-cyan-400" size={20} />
              Employee Self-Assessment
            </h3>
            
            {assessment.responses && Object.keys(assessment.responses).length > 0 ? (
              <div className="space-y-4">
                {Object.entries(assessment.responses).map(([question, answer]) => (
                  <div key={question} className="border-b border-gray-700 pb-4 last:border-b-0">
                    <p className="text-gray-300 font-medium mb-2">{question}</p>
                    <p className="text-gray-400">{answer || 'No response provided'}</p>
                  </div>
                ))}
              </div>
            ) : (
              <p className="text-gray-400">No self-assessment responses available.</p>
            )}
          </div>
        </div>

        {/* Manager Review Form (Right Side) */}
        <div className="space-y-6">
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h3 className="text-lg font-semibold text-white mb-4 flex items-center">
              <MessageSquare className="mr-2 text-cyan-400" size={20} />
              Your Review
            </h3>
            
            <div className="space-y-4">
              {/* Overall Rating */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Overall Performance Rating
                </label>
                <select
                  value={managerFeedback.rating}
                  onChange={(e) => handleInputChange('rating', parseInt(e.target.value))}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                >
                  <option value={1}>1 - Needs Improvement</option>
                  <option value={2}>2 - Below Expectations</option>
                  <option value={3}>3 - Meets Expectations</option>
                  <option value={4}>4 - Exceeds Expectations</option>
                  <option value={5}>5 - Outstanding</option>
                </select>
              </div>

              {/* Overall Performance */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Overall Performance Summary
                </label>
                <textarea
                  value={managerFeedback.overall_performance}
                  onChange={(e) => handleInputChange('overall_performance', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="Provide an overall summary of the employee's performance..."
                />
              </div>

              {/* Strengths */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Key Strengths
                </label>
                <textarea
                  value={managerFeedback.strengths}
                  onChange={(e) => handleInputChange('strengths', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="What are this employee's key strengths?"
                />
              </div>

              {/* Areas for Improvement */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Areas for Improvement
                </label>
                <textarea
                  value={managerFeedback.areas_for_improvement}
                  onChange={(e) => handleInputChange('areas_for_improvement', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="What areas could this employee focus on improving?"
                />
              </div>

              {/* Goals for Next Period */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Goals for Next Period
                </label>
                <textarea
                  value={managerFeedback.goals_for_next_period}
                  onChange={(e) => handleInputChange('goals_for_next_period', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="What goals should this employee focus on next?"
                />
              </div>

              {/* Development Recommendations */}
              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Development Recommendations
                </label>
                <textarea
                  value={managerFeedback.development_recommendations}
                  onChange={(e) => handleInputChange('development_recommendations', e.target.value)}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="What development opportunities would you recommend?"
                />
              </div>
            </div>
          </div>

          {/* Action Buttons */}
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <div className="space-y-3">
              <Button 
                variant="primary"
                onClick={handleSaveReview}
                disabled={saving}
                className="w-full"
              >
                <Save size={16} className="mr-2" />
                {saving ? 'Saving Review...' : 'Complete Review'}
              </Button>
              
              <Button 
                variant="secondary"
                onClick={() => setActivePage({ name: 'My Team', props: {} })}
                className="w-full"
              >
                <ArrowLeft size={16} className="mr-2" />
                Back to My Team
              </Button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}


--- FILE: src\components\pages\MyDevelopmentCenter.js ---

// V3.7 STEP 3: My Development Center - Replace src/components/pages/Settings.js
// Transform Settings into a comprehensive employee development platform

import React, { useState, useEffect } from 'react';
import { Target, BookOpen, MessageSquare, User, Plus, Calendar, AlertTriangle, Info } from 'lucide-react';

const MyDevelopmentCenter = () => {
    const [activeTab, setActiveTab] = useState('goals');
    const [profile, setProfile] = useState(null);
    const [developmentGoals, setDevelopmentGoals] = useState([]);
    const [trainingRequests, setTrainingRequests] = useState([]);
    const [loading, setLoading] = useState(true);
    const [showGuidance, setShowGuidance] = useState(true);

    useEffect(() => {
        fetchAllData();
    }, []);

    const fetchAllData = async () => {
        try {
            setLoading(true);
            await Promise.all([
                fetchProfile(),
                fetchDevelopmentGoals(),
                fetchTrainingRequests()
            ]);
        } catch (error) {
            console.error('Error fetching development data:', error);
        } finally {
            setLoading(false);
        }
    };

    const fetchProfile = async () => {
        try {
            // Mock profile data for now
            setProfile({ name: 'Employee', job_title: 'Software Developer', department: 'Engineering' });
        } catch (error) {
            console.error('Error fetching profile:', error);
        }
    };

    const fetchDevelopmentGoals = async () => {
        try {
            // Mock development goals for now
            setDevelopmentGoals([]);
        } catch (error) {
            console.error('Error fetching development goals:', error);
        }
    };

    const fetchTrainingRequests = async () => {
        try {
            // Mock training requests for now
            setTrainingRequests([]);
        } catch (error) {
            console.error('Error fetching training requests:', error);
        }
    };

    const tabs = [
        { 
            id: 'profile', 
            name: 'My Profile', 
            icon: User,
            description: 'View your current role and information'
        },
        { 
            id: 'goals', 
            name: 'Development Goals', 
            icon: Target,
            description: 'Set and track your career growth objectives'
        },
        { 
            id: 'training', 
            name: 'Training Requests', 
            icon: BookOpen,
            description: 'Request courses, certifications, and learning opportunities'
        },
        { 
            id: 'communication', 
            name: 'Manager Communication', 
            icon: MessageSquare,
            description: 'Direct messaging with your manager about development'
        }
    ];

    // Check if user is new (no goals, no training requests)
    const isNewUser = developmentGoals.length === 0 && trainingRequests.length === 0;

    if (loading) {
        return (
            <div className="p-8">
                <div className="text-center py-12">
                    <div className="text-yellow-400 text-lg">Loading your development center...</div>
                </div>
            </div>
        );
    }

    return (
        <div className="p-8">
            <header className="mb-8">
                <h1 className="text-4xl font-bold text-white">My Development Center</h1>
                <p className="text-gray-400 mt-2">Take ownership of your career growth and professional development.</p>
                
                {/* Welcome guidance for new users */}
                {showGuidance && isNewUser && (
                    <div className="mt-6 bg-gradient-to-r from-cyan-900 to-blue-900 rounded-lg p-6 border border-cyan-700">
                        <div className="flex items-start justify-between">
                            <div className="flex items-start space-x-3">
                                <Info className="text-cyan-400 mt-1" size={20} />
                                <div>
                                    <h3 className="text-cyan-200 font-semibold text-lg mb-2">Welcome to Your Development Center</h3>
                                    <div className="text-cyan-300 text-sm space-y-2">
                                        <p><strong>Purpose:</strong> This is your personal space to actively manage your career growth, set learning goals, and communicate development needs with your manager.</p>
                                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mt-4">
                                            <div className="space-y-2">
                                                <p className="font-medium">What you can do:</p>
                                                <ul className="text-xs space-y-1 ml-4">
                                                    <li>â€¢ Set career aspirations and skill development goals</li>
                                                    <li>â€¢ Request training, courses, and certifications</li>
                                                    <li>â€¢ Communicate directly with your manager about growth</li>
                                                    <li>â€¢ Track your professional development progress</li>
                                                </ul>
                                            </div>
                                            <div className="space-y-2">
                                                <p className="font-medium">Expected outcomes:</p>
                                                <ul className="text-xs space-y-1 ml-4">
                                                    <li>â€¢ Clear career development roadmap</li>
                                                    <li>â€¢ Regular learning opportunities</li>
                                                    <li>â€¢ Better manager-employee development conversations</li>
                                                    <li>â€¢ Enhanced skills and career advancement</li>
                                                </ul>
                                            </div>
                                        </div>
                                        <div className="mt-4 p-3 bg-cyan-800 rounded border border-cyan-600">
                                            <p className="font-medium flex items-center">
                                                <Target size={16} className="mr-2" />
                                                Get started: Add your first development goal or request training to begin your journey.
                                            </p>
                                        </div>
                                    </div>
                                </div>
                            </div>
                            <button 
                                onClick={() => setShowGuidance(false)}
                                className="text-cyan-400 hover:text-cyan-300 ml-4"
                            >
                                Ã—
                            </button>
                        </div>
                    </div>
                )}
            </header>

            {/* Tab Navigation */}
            <div className="mb-8">
                <div className="border-b border-gray-700">
                    <nav className="-mb-px flex space-x-8">
                        {tabs.map(tab => {
                            const Icon = tab.icon;
                            return (
                                <button
                                    key={tab.id}
                                    onClick={() => setActiveTab(tab.id)}
                                    className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center group relative ${
                                        activeTab === tab.id
                                            ? 'border-cyan-500 text-cyan-400'
                                            : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
                                    }`}
                                    title={tab.description}
                                >
                                    <Icon size={16} className="mr-2" />
                                    {tab.name}
                                </button>
                            );
                        })}
                    </nav>
                </div>
                
                {/* Active Tab Description */}
                <div className="mt-2 text-gray-400 text-sm">
                    {tabs.find(tab => tab.id === activeTab)?.description}
                </div>
            </div>

            {/* Tab Content */}
            {activeTab === 'profile' && <ProfileSection profile={profile} />}
            {activeTab === 'goals' && (
                <GoalsSection 
                    goals={developmentGoals}
                    onRefresh={fetchDevelopmentGoals}
                />
            )}
            {activeTab === 'training' && (
                <TrainingSection 
                    requests={trainingRequests}
                    onRefresh={fetchTrainingRequests}
                />
            )}
            {activeTab === 'communication' && <CommunicationSection />}
        </div>
    );
};

// Profile Section Component
const ProfileSection = ({ profile }) => (
    <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        <h2 className="text-2xl font-semibold text-white mb-6">My Profile</h2>
        
        {profile ? (
            <div className="space-y-4">
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Name</label>
                        <div className="p-3 bg-gray-700 rounded-md text-white">{profile.name}</div>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Email</label>
                        <div className="p-3 bg-gray-700 rounded-md text-white">{profile.email}</div>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Job Title</label>
                        <div className="p-3 bg-gray-700 rounded-md text-white">{profile.job_title || 'Not specified'}</div>
                    </div>
                    <div>
                        <label className="block text-sm font-medium text-gray-300 mb-1">Manager</label>
                        <div className="p-3 bg-gray-700 rounded-md text-white">{profile.manager_name || 'No manager assigned'}</div>
                    </div>
                </div>
                
                <div className="mt-6 p-4 bg-blue-900 rounded-lg border border-blue-700">
                    <h4 className="text-blue-200 font-semibold mb-2">Note:</h4>
                    <p className="text-blue-300 text-sm">
                        Profile information is managed by your administrator. If you need to update your role or manager assignment, 
                        please contact HR or your system administrator.
                    </p>
                </div>
            </div>
        ) : (
            <div className="text-center py-8">
                <User size={48} className="mx-auto text-gray-500 mb-4" />
                <p className="text-gray-400">Profile information not available.</p>
            </div>
        )}
    </div>
);

// Goals Section Component - Simplified for V3.7
const GoalsSection = ({ goals, onRefresh }) => (
    <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        <div className="flex justify-between items-center mb-6">
            <div>
                <h2 className="text-2xl font-semibold text-white">My Development Goals</h2>
                <p className="text-gray-400 text-sm mt-1">
                    Set specific, measurable goals for your professional growth
                </p>
            </div>
            <button
                onClick={() => alert('Goal creation coming in next update!')}
                className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-2 px-4 rounded-lg flex items-center"
            >
                <Plus size={18} className="mr-2" />
                Add Goal
            </button>
        </div>

        {goals.length === 0 ? (
            <div className="text-center py-12">
                <Target size={48} className="mx-auto text-gray-500 mb-4" />
                <h3 className="text-white text-lg mb-2">No development goals yet</h3>
                <p className="text-gray-400 mb-6 max-w-md mx-auto">
                    Development goals help you focus your learning and career growth. 
                    Start by setting 1-3 specific goals for the next quarter.
                </p>
                <button
                    onClick={() => alert('Goal creation coming in next update!')}
                    className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-6 rounded-lg"
                >
                    Set My First Goal
                </button>
            </div>
        ) : (
            <div className="space-y-4">
                {goals.map(goal => (
                    <div key={goal.goal_id} className="bg-gray-700 p-4 rounded-lg">
                        <h3 className="text-lg font-semibold text-white">{goal.title}</h3>
                        <p className="text-gray-400 capitalize">{goal.goal_type.replace('_', ' ')}</p>
                        {goal.description && <p className="text-gray-300 mt-2">{goal.description}</p>}
                    </div>
                ))}
            </div>
        )}
    </div>
);

// Training Section Component - Simplified for V3.7
const TrainingSection = ({ requests, onRefresh }) => (
    <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        <div className="flex justify-between items-center mb-6">
            <div>
                <h2 className="text-2xl font-semibold text-white">Training Requests</h2>
                <p className="text-gray-400 text-sm mt-1">
                    Request courses, certifications, and learning opportunities
                </p>
            </div>
            <button
                onClick={() => alert('Training request form coming in next update!')}
                className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-2 px-4 rounded-lg flex items-center"
            >
                <Plus size={18} className="mr-2" />
                Request Training
            </button>
        </div>

        {requests.length === 0 ? (
            <div className="text-center py-12">
                <BookOpen size={48} className="mx-auto text-gray-500 mb-4" />
                <h3 className="text-white text-lg mb-2">No training requests yet</h3>
                <p className="text-gray-400 mb-6 max-w-md mx-auto">
                    Request training to advance your skills and career. Include business justification 
                    to help your manager understand the value and approve your request.
                </p>
                <button
                    onClick={() => alert('Training request form coming in next update!')}
                    className="bg-cyan-500 hover:bg-cyan-600 text-white font-bold py-3 px-6 rounded-lg"
                >
                    Request My First Training
                </button>
            </div>
        ) : (
            <div className="space-y-4">
                {requests.map(request => (
                    <div key={request.request_id} className="bg-gray-700 p-4 rounded-lg">
                        <h3 className="text-lg font-semibold text-white">{request.title}</h3>
                        <p className="text-gray-400 capitalize">{request.request_type.replace('_', ' ')}</p>
                        <span className="inline-block mt-2 px-2 py-1 bg-yellow-600 text-yellow-100 text-xs rounded">
                            {request.status}
                        </span>
                    </div>
                ))}
            </div>
        )}
    </div>
);

// Communication Section Component - Placeholder for V3.7
const CommunicationSection = () => (
    <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        <h2 className="text-2xl font-semibold text-white mb-6">Manager Communication</h2>
        <div className="text-center py-12">
            <MessageSquare size={48} className="mx-auto text-gray-500 mb-4" />
            <h3 className="text-white text-lg mb-2">Communication system coming soon</h3>
            <p className="text-gray-400 mb-6 max-w-md mx-auto">
                Direct messaging with your manager about development topics will be available in the next update.
            </p>
            <div className="bg-purple-900 rounded-lg p-4 text-left max-w-lg mx-auto">
                <h4 className="text-purple-200 font-semibold mb-2">Preview - Coming features:</h4>
                <ul className="text-purple-300 text-sm space-y-1">
                    <li>â€¢ Direct messaging with your manager</li>
                    <li>â€¢ Development topic discussions</li>
                    <li>â€¢ Goal and training conversations</li>
                    <li>â€¢ Career planning dialogues</li>
                </ul>
            </div>
        </div>
    </div>
);

export default MyDevelopmentCenter;


--- FILE: src\components\pages\MyDevelopmentCenterEnhanced.js ---

// src/components/pages/MyDevelopmentCenterEnhanced.js - Enhanced with development plan submission workflow
import React, { useState, useEffect } from 'react';
import { 
  Target, 
  Plus, 
  Calendar, 
  User, 
  BookOpen, 
  TrendingUp, 
  Save, 
  X,
  CheckCircle,
  Clock,
  MessageSquare,
  Award,
  Lightbulb
} from 'lucide-react';
import { useApp } from '../../contexts';
import { LoadingSpinner, ErrorMessage, Button, StatusBadge } from '../ui';
import { formatDate } from '../../utils';
import NotificationService from '../../services/NotificationService';

export default function MyDevelopmentCenterEnhanced() {
  const { userName } = useApp();
  const [activeTab, setActiveTab] = useState('overview');
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [developmentPlans, setDevelopmentPlans] = useState([]);
  const [showCreateForm, setShowCreateForm] = useState(false);
  const [submitting, setSubmitting] = useState(false);
  
  const [newPlan, setNewPlan] = useState({
    title: '',
    description: '',
    goals: [{ goal: '', timeline: '', priority: 'medium' }],
    skills_to_develop: [{ skill: '', reason: '', method: '' }],
    timeline: '3-6 months'
  });

  // Fetch development plans on component mount
  useEffect(() => {
    fetchDevelopmentPlans();
  }, []);

  const fetchDevelopmentPlans = async () => {
    try {
      setLoading(true);
      setError(null);
      const plans = await NotificationService.getDevelopmentPlans();
      setDevelopmentPlans(plans);
    } catch (err) {
      console.error('Error fetching development plans:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  const handleSubmitPlan = async () => {
    try {
      setSubmitting(true);
      setError(null);
      
      // Validate required fields
      if (!newPlan.title.trim()) {
        throw new Error('Plan title is required');
      }
      if (newPlan.goals.length === 0 || !newPlan.goals[0].goal.trim()) {
        throw new Error('At least one goal is required');
      }

      await NotificationService.submitDevelopmentPlan(newPlan);
      
      // Reset form and refresh plans
      setNewPlan({
        title: '',
        description: '',
        goals: [{ goal: '', timeline: '', priority: 'medium' }],
        skills_to_develop: [{ skill: '', reason: '', method: '' }],
        timeline: '3-6 months'
      });
      setShowCreateForm(false);
      await fetchDevelopmentPlans();
      
    } catch (err) {
      console.error('Error submitting development plan:', err);
      setError(err.message);
    } finally {
      setSubmitting(false);
    }
  };

  const addGoal = () => {
    setNewPlan(prev => ({
      ...prev,
      goals: [...prev.goals, { goal: '', timeline: '', priority: 'medium' }]
    }));
  };

  const removeGoal = (index) => {
    setNewPlan(prev => ({
      ...prev,
      goals: prev.goals.filter((_, i) => i !== index)
    }));
  };

  const updateGoal = (index, field, value) => {
    setNewPlan(prev => ({
      ...prev,
      goals: prev.goals.map((goal, i) => 
        i === index ? { ...goal, [field]: value } : goal
      )
    }));
  };

  const addSkill = () => {
    setNewPlan(prev => ({
      ...prev,
      skills_to_develop: [...prev.skills_to_develop, { skill: '', reason: '', method: '' }]
    }));
  };

  const removeSkill = (index) => {
    setNewPlan(prev => ({
      ...prev,
      skills_to_develop: prev.skills_to_develop.filter((_, i) => i !== index)
    }));
  };

  const updateSkill = (index, field, value) => {
    setNewPlan(prev => ({
      ...prev,
      skills_to_develop: prev.skills_to_develop.map((skill, i) => 
        i === index ? { ...skill, [field]: value } : skill
      )
    }));
  };

  const getStatusColor = (status) => {
    const colors = {
      'draft': 'gray',
      'submitted': 'blue',
      'under_review': 'yellow',
      'approved': 'green',
      'needs_revision': 'red'
    };
    return colors[status] || 'gray';
  };

  const tabs = [
    { id: 'overview', name: 'Overview', icon: Target },
    { id: 'plans', name: 'My Development Plans', icon: BookOpen },
    { id: 'create', name: 'Create New Plan', icon: Plus }
  ];

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">My Development Center</h1>
        <LoadingSpinner size="lg" message="Loading your development center..." />
      </div>
    );
  }

  return (
    <div className="p-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-cyan-400">My Development Center</h1>
          <p className="text-gray-400 mt-2">Plan and track your professional development journey</p>
        </div>
        <div className="flex space-x-3">
          <Button 
            variant="primary"
            onClick={() => setActiveTab('create')}
          >
            <Plus size={16} className="mr-2" />
            Create Development Plan
          </Button>
        </div>
      </div>

      {/* Error Display */}
      {error && (
        <div className="mb-6">
          <ErrorMessage 
            error={error} 
            title="Development Center Error" 
            onRetry={() => setError(null)}
          />
        </div>
      )}

      {/* Tab Navigation */}
      <div className="border-b border-gray-700 mb-6">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${
                activeTab === tab.id
                  ? 'border-cyan-500 text-cyan-400'
                  : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
              }`}
            >
              <tab.icon className="mr-2" size={16} />
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {activeTab === 'overview' && (
        <div className="space-y-6">
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <div className="flex items-center">
                <BookOpen className="text-blue-400 mr-3" size={24} />
                <div>
                  <p className="text-2xl font-bold text-white">{developmentPlans.length}</p>
                  <p className="text-gray-400 text-sm">Development Plans</p>
                </div>
              </div>
            </div>
            
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <div className="flex items-center">
                <CheckCircle className="text-green-400 mr-3" size={24} />
                <div>
                  <p className="text-2xl font-bold text-white">
                    {developmentPlans.filter(p => p.status === 'approved').length}
                  </p>
                  <p className="text-gray-400 text-sm">Approved Plans</p>
                </div>
              </div>
            </div>
            
            <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
              <div className="flex items-center">
                <Clock className="text-yellow-400 mr-3" size={24} />
                <div>
                  <p className="text-2xl font-bold text-white">
                    {developmentPlans.filter(p => p.status === 'under_review').length}
                  </p>
                  <p className="text-gray-400 text-sm">Under Review</p>
                </div>
              </div>
            </div>
          </div>

          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-4 flex items-center">
              <Lightbulb className="mr-2 text-yellow-400" size={20} />
              Development Tips
            </h2>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-gray-700 rounded-lg p-4">
                <h3 className="font-medium text-cyan-400 mb-2">Set SMART Goals</h3>
                <p className="text-gray-300 text-sm">Make your goals Specific, Measurable, Achievable, Relevant, and Time-bound.</p>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <h3 className="font-medium text-cyan-400 mb-2">Regular Review</h3>
                <p className="text-gray-300 text-sm">Schedule regular check-ins with your manager to discuss progress and adjustments.</p>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <h3 className="font-medium text-cyan-400 mb-2">Skill Diversity</h3>
                <p className="text-gray-300 text-sm">Balance technical skills with soft skills for comprehensive growth.</p>
              </div>
              <div className="bg-gray-700 rounded-lg p-4">
                <h3 className="font-medium text-cyan-400 mb-2">Document Progress</h3>
                <p className="text-gray-300 text-sm">Keep track of your achievements and lessons learned along the way.</p>
              </div>
            </div>
          </div>
        </div>
      )}

      {activeTab === 'plans' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-white">My Development Plans</h2>
          
          {developmentPlans.length === 0 ? (
            <div className="text-center py-12">
              <BookOpen size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">No Development Plans Yet</h3>
              <p className="text-gray-400 mb-6">Start your development journey by creating your first plan.</p>
              <Button 
                variant="primary"
                onClick={() => setActiveTab('create')}
              >
                <Plus size={16} className="mr-2" />
                Create Your First Plan
              </Button>
            </div>
          ) : (
            <div className="space-y-4">
              {developmentPlans.map((plan) => (
                <div key={plan.id} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-start justify-between mb-4">
                    <div className="flex-1">
                      <h3 className="text-lg font-semibold text-white mb-2">{plan.title}</h3>
                      <p className="text-gray-400 mb-3">{plan.description}</p>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                          <p className="text-sm text-gray-400">Status</p>
                          <StatusBadge 
                            status={plan.status} 
                            color={getStatusColor(plan.status)}
                          />
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Timeline</p>
                          <p className="text-white">{plan.timeline}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Created</p>
                          <p className="text-white">{formatDate(plan.created_at)}</p>
                        </div>
                      </div>

                      {plan.goals && plan.goals.length > 0 && (
                        <div className="mb-4">
                          <p className="text-sm text-gray-400 mb-2">Goals ({plan.goals.length})</p>
                          <div className="space-y-1">
                            {plan.goals.slice(0, 2).map((goal, index) => (
                              <p key={index} className="text-gray-300 text-sm">â€¢ {goal.goal}</p>
                            ))}
                            {plan.goals.length > 2 && (
                              <p className="text-gray-500 text-sm">... and {plan.goals.length - 2} more</p>
                            )}
                          </div>
                        </div>
                      )}

                      {plan.manager_feedback && (
                        <div className="bg-gray-700 rounded-lg p-3 mt-4">
                          <p className="text-sm text-gray-400 mb-1">Manager Feedback</p>
                          <p className="text-gray-300 text-sm">{plan.manager_feedback}</p>
                          <p className="text-xs text-gray-500 mt-1">
                            Reviewed on {formatDate(plan.manager_reviewed_at)}
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {activeTab === 'create' && (
        <div className="space-y-6">
          <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
            <h2 className="text-xl font-semibold text-white mb-4">Create Development Plan</h2>
            
            <div className="space-y-6">
              {/* Basic Information */}
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Plan Title *
                  </label>
                  <input
                    type="text"
                    value={newPlan.title}
                    onChange={(e) => setNewPlan(prev => ({ ...prev, title: e.target.value }))}
                    className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                    placeholder="e.g., Leadership Skills Development"
                  />
                </div>
                
                <div>
                  <label className="block text-sm font-medium text-gray-300 mb-2">
                    Timeline
                  </label>
                  <select
                    value={newPlan.timeline}
                    onChange={(e) => setNewPlan(prev => ({ ...prev, timeline: e.target.value }))}
                    className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  >
                    <option value="1-3 months">1-3 months</option>
                    <option value="3-6 months">3-6 months</option>
                    <option value="6-12 months">6-12 months</option>
                    <option value="1+ years">1+ years</option>
                  </select>
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-300 mb-2">
                  Description
                </label>
                <textarea
                  value={newPlan.description}
                  onChange={(e) => setNewPlan(prev => ({ ...prev, description: e.target.value }))}
                  className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                  rows={3}
                  placeholder="Describe your development objectives and what you hope to achieve..."
                />
              </div>

              {/* Goals Section */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-sm font-medium text-gray-300">
                    Development Goals *
                  </label>
                  <Button variant="secondary" size="sm" onClick={addGoal}>
                    <Plus size={14} className="mr-1" />
                    Add Goal
                  </Button>
                </div>
                
                <div className="space-y-4">
                  {newPlan.goals.map((goal, index) => (
                    <div key={index} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <span className="text-sm font-medium text-gray-300">Goal {index + 1}</span>
                        {newPlan.goals.length > 1 && (
                          <button
                            onClick={() => removeGoal(index)}
                            className="text-gray-400 hover:text-red-400 transition-colors"
                          >
                            <X size={16} />
                          </button>
                        )}
                      </div>
                      
                      <div className="grid grid-cols-1 lg:grid-cols-2 gap-4">
                        <div className="lg:col-span-2">
                          <input
                            type="text"
                            value={goal.goal}
                            onChange={(e) => updateGoal(index, 'goal', e.target.value)}
                            className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                            placeholder="Describe your specific goal..."
                          />
                        </div>
                        <div>
                          <input
                            type="text"
                            value={goal.timeline}
                            onChange={(e) => updateGoal(index, 'timeline', e.target.value)}
                            className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                            placeholder="Timeline (e.g., 3 months)"
                          />
                        </div>
                        <div>
                          <select
                            value={goal.priority}
                            onChange={(e) => updateGoal(index, 'priority', e.target.value)}
                            className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                          >
                            <option value="low">Low Priority</option>
                            <option value="medium">Medium Priority</option>
                            <option value="high">High Priority</option>
                          </select>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Skills Section */}
              <div>
                <div className="flex items-center justify-between mb-4">
                  <label className="block text-sm font-medium text-gray-300">
                    Skills to Develop
                  </label>
                  <Button variant="secondary" size="sm" onClick={addSkill}>
                    <Plus size={14} className="mr-1" />
                    Add Skill
                  </Button>
                </div>
                
                <div className="space-y-4">
                  {newPlan.skills_to_develop.map((skill, index) => (
                    <div key={index} className="bg-gray-700 rounded-lg p-4">
                      <div className="flex items-start justify-between mb-3">
                        <span className="text-sm font-medium text-gray-300">Skill {index + 1}</span>
                        <button
                          onClick={() => removeSkill(index)}
                          className="text-gray-400 hover:text-red-400 transition-colors"
                        >
                          <X size={16} />
                        </button>
                      </div>
                      
                      <div className="space-y-3">
                        <input
                          type="text"
                          value={skill.skill}
                          onChange={(e) => updateSkill(index, 'skill', e.target.value)}
                          className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                          placeholder="Skill name (e.g., Public Speaking)"
                        />
                        <input
                          type="text"
                          value={skill.reason}
                          onChange={(e) => updateSkill(index, 'reason', e.target.value)}
                          className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                          placeholder="Why is this skill important for your role?"
                        />
                        <input
                          type="text"
                          value={skill.method}
                          onChange={(e) => updateSkill(index, 'method', e.target.value)}
                          className="w-full p-3 bg-gray-600 border border-gray-500 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                          placeholder="How will you develop this skill?"
                        />
                      </div>
                    </div>
                  ))}
                </div>
              </div>

              {/* Action Buttons */}
              <div className="flex justify-end space-x-3">
                <Button 
                  variant="secondary"
                  onClick={() => {
                    setNewPlan({
                      title: '',
                      description: '',
                      goals: [{ goal: '', timeline: '', priority: 'medium' }],
                      skills_to_develop: [{ skill: '', reason: '', method: '' }],
                      timeline: '3-6 months'
                    });
                    setActiveTab('plans');
                  }}
                >
                  Cancel
                </Button>
                <Button 
                  variant="primary"
                  onClick={handleSubmitPlan}
                  disabled={submitting}
                >
                  <Save size={16} className="mr-2" />
                  {submitting ? 'Submitting...' : 'Submit Plan'}
                </Button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}


--- FILE: src\components\pages\MyReviews.js ---

// STEP 5: Enhanced MyReviews Page - Replace src/components/pages/MyReviews.js
// This shows better status information like V4 had

import React, { useState } from 'react';
import { Calendar, Clock, CheckCircle, Award, ArrowRight, Filter } from 'lucide-react';
import { useAssessments } from '../../hooks';
import { useApp } from '../../contexts';
import { getStatusDisplay, filterActiveReviews, filterCompletedReviews, formatDate } from '../../utils';

export default function MyReviews() {
  const { setActivePage } = useApp();
  const { assessments: reviews, loading, error, refresh } = useAssessments();
  const [filter, setFilter] = useState('all'); // all, active, completed

  const getStatusInfo = (review) => {
    return getStatusDisplay(review);
  };

  const filteredReviews = reviews.filter(review => {
    if (filter === 'all') return true;
    if (filter === 'active') return filterActiveReviews([review]).length > 0;
    if (filter === 'completed') return filterCompletedReviews([review]).length > 0;
    return true;
  });

  const activeCount = filterActiveReviews(reviews).length;
  const completedCount = filterCompletedReviews(reviews).length;

  if (loading) {
    return (
      <div className="p-8">
        <div className="text-center py-12">
          <div className="text-yellow-400 text-lg">Loading your reviews...</div>
        </div>
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <div className="text-center py-12">
          <div className="text-red-400 text-lg">Error: {error}</div>
        </div>
      </div>
    );
  }

  return (
    <div className="p-8">
      <header className="mb-8">
        <h1 className="text-4xl font-bold text-white">My Review History</h1>
        <p className="text-gray-400 mt-2">Access your current and past performance reviews.</p>
      </header>

      {/* Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Total Reviews</p>
              <p className="text-2xl font-bold text-cyan-400">{reviews.length}</p>
            </div>
            <Calendar className="text-cyan-400" size={24} />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Active Reviews</p>
              <p className="text-2xl font-bold text-yellow-400">{activeCount}</p>
            </div>
            <Clock className="text-yellow-400" size={24} />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Completed</p>
              <p className="text-2xl font-bold text-green-400">{completedCount}</p>
            </div>
            <CheckCircle className="text-green-400" size={24} />
          </div>
        </div>
      </div>

      {/* Filter Tabs */}
      <div className="mb-6">
        <div className="border-b border-gray-700">
          <nav className="-mb-px flex space-x-8">
            {[
              { id: 'all', name: 'All Reviews', count: reviews.length },
              { id: 'active', name: 'Active', count: activeCount },
              { id: 'completed', name: 'Completed', count: completedCount }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setFilter(tab.id)}
                className={`py-2 px-1 border-b-2 font-medium text-sm flex items-center ${
                  filter === tab.id
                    ? 'border-cyan-500 text-cyan-400'
                    : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
                }`}
              >
                <Filter size={16} className="mr-2" />
                {tab.name} ({tab.count})
              </button>
            ))}
          </nav>
        </div>
      </div>

      {/* Reviews List */}
      <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        {filteredReviews.length > 0 ? (
          <div className="space-y-4">
            {filteredReviews.map(review => {
              const statusInfo = getStatusInfo(review);
              const StatusIcon = statusInfo.icon;
              
              return (
                <div key={review.assessment_id} className="bg-gray-700 p-4 rounded-lg hover:bg-gray-600 transition">
                  <div className="flex justify-between items-start">
                    <div className="flex-1">
                      <div className="flex items-center space-x-3 mb-2">
                        <h3 className="text-lg font-semibold text-white">{review.cycle_name}</h3>
                        <span className={`px-2 py-1 text-xs rounded-full ${statusInfo.bgColor} text-white flex items-center`}>
                          <StatusIcon size={12} className="mr-1" />
                          {statusInfo.label}
                        </span>
                      </div>
                      
                      <div className="text-sm text-gray-400 space-y-1">
                        <p>Created: {new Date(review.created_at).toLocaleDateString()}</p>
                        
                        {/* Show action needed for active reviews */}
                        {statusInfo.isActive && (
                          <p className={`font-medium ${statusInfo.color}`}>
                            {review.self_assessment_status === 'not_started' && 'Action needed: Start your self-assessment'}
                            {review.self_assessment_status === 'in_progress' && 'Action needed: Complete your self-assessment'}
                            {review.self_assessment_status === 'employee_complete' && review.manager_review_status === 'pending' && 'Waiting for manager review'}
                            {review.self_assessment_status === 'employee_complete' && review.manager_review_status === 'completed' && !review.employee_acknowledgment && 'Manager review complete - please acknowledge'}
                            {review.self_assessment_status === 'employee_complete' && review.manager_review_status === 'completed' && review.employee_acknowledgment && 'Review process complete'}
                            {review.self_assessment_status === 'manager_complete' && 'Review complete - view feedback'}
                          </p>
                        )}
                      </div>
                    </div>
                    
                    <button
                      onClick={() => setActivePage({
                        name: 'Assessment',
                        props: { assessmentId: review.assessment_id }
                      })}
                      className="flex items-center text-cyan-400 hover:text-cyan-300 transition"
                    >
                      View Details 
                      <ArrowRight size={16} className="ml-2" />
                    </button>
                  </div>
                </div>
              );
            })}
          </div>
        ) : (
          <div className="text-center py-12">
            <Calendar size={48} className="mx-auto text-gray-500 mb-4" />
            <h3 className="text-white text-lg mb-2">
              {filter === 'all' ? 'No reviews found' : 
               filter === 'active' ? 'No active reviews' : 'No completed reviews'}
            </h3>
            <p className="text-gray-400">
              {filter === 'all' ? 'Your review history will appear here once cycles are created.' :
               filter === 'active' ? 'No reviews are currently in progress.' : 
               'Completed reviews will appear here.'}
            </p>
          </div>
        )}
      </div>
    </div>
  );
}


--- FILE: src\components\pages\MyTeam.js ---

// src/components/pages/MyTeam.js - Enhanced with Error Handling
import React from 'react';
import { Play, Users, Calendar, RefreshCw, AlertTriangle } from 'lucide-react';
import { useTeam } from '../../hooks';
import { useApp } from '../../contexts';
import { LoadingSpinner, ErrorMessage, Button } from '../ui';

export default function MyTeam() {
  const { openModal, setActivePage } = useApp();
  const { 
    team, 
    teamAssessments, 
    loading, 
    error, 
    startReviewCycle, 
    refresh 
  } = useTeam();
  
  // For compatibility, use team assessments as team status
  const teamStatus = teamAssessments;

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">My Team</h1>
        <LoadingSpinner size="lg" message="Loading your team..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">My Team</h1>
        <ErrorMessage 
          error={error} 
          title="Error Loading Team" 
          onRetry={refresh}
        />
      </div>
    );
  }

  return (
    <div className="p-8">
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-cyan-400">My Team</h1>
          <p className="text-gray-400 mt-2">Manage your direct reports and their assessments</p>
        </div>
        <div className="flex items-center space-x-4">
          <button
            onClick={refresh}
            className="bg-gray-700 hover:bg-gray-600 text-white px-4 py-2 rounded-lg flex items-center"
          >
            <RefreshCw size={16} className="mr-2" />
            Refresh
          </button>
          {openModal && (
            <button
              onClick={() => openModal('startReviewCycle', { afterSave: refresh })}
              className="bg-cyan-500 hover:bg-cyan-600 text-white px-4 py-2 rounded-lg flex items-center"
            >
              <Play size={16} className="mr-2" />
              Start Review Cycle
            </button>
          )}
        </div>
      </div>

      {/* Team Summary Stats */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Team Members</p>
              <p className="text-2xl font-bold text-cyan-400">{teamStatus.length}</p>
            </div>
            <Users className="text-cyan-400" size={24} />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Active Assessments</p>
              <p className="text-2xl font-bold text-green-400">
                {teamStatus.filter(member => member.assessment_id).length}
              </p>
            </div>
            <Calendar className="text-green-400" size={24} />
          </div>
        </div>

        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center justify-between">
            <div>
              <p className="text-gray-400 text-sm">Completion Rate</p>
              <p className="text-2xl font-bold text-purple-400">
                {teamStatus.length > 0 
                  ? Math.round((teamStatus.filter(m => m.assessment_status === 'completed').length / teamStatus.length) * 100)
                  : 0}%
              </p>
            </div>
            <AlertTriangle className="text-purple-400" size={24} />
          </div>
        </div>
      </div>

      {/* Team Table */}
      <div className="bg-gray-800 rounded-lg shadow-2xl p-6">
        <h2 className="text-xl font-semibold text-white mb-4">Team Members</h2>
        
        {teamStatus.length > 0 ? (
          <div className="overflow-x-auto">
            <table className="min-w-full text-sm">
              <thead className="bg-gray-700 text-gray-300">
                <tr>
                  <th className="px-4 py-3 text-left">Employee</th>
                  <th className="px-4 py-3 text-left">Job Title</th>
                  <th className="px-4 py-3 text-left">Assessment Status</th>
                  <th className="px-4 py-3 text-center">Actions</th>
                </tr>
              </thead>
              <tbody>
                {teamStatus.map((member) => (
                  <tr key={member.employee_id} className="border-b border-gray-700 hover:bg-gray-700 transition">
                    <td className="px-4 py-3">
                      <div>
                        <p className="font-medium text-white">{member.employee_name}</p>
                        <p className="text-xs text-gray-400">ID: {member.employee_id.slice(0, 8)}...</p>
                      </div>
                    </td>
                    <td className="px-4 py-3 text-gray-300">
                      {member.job_title || 'No Title'}
                    </td>
                    <td className="px-4 py-3">
                      {member.assessment_status ? (
                        <span className={`px-2 py-1 text-xs rounded-full ${
                          member.assessment_status === 'completed' ? 'bg-green-600 text-green-100' :
                          member.assessment_status === 'in_progress' ? 'bg-yellow-600 text-yellow-100' :
                          'bg-gray-600 text-gray-100'
                        }`}>
                          {member.assessment_status.replace('_', ' ')}
                        </span>
                      ) : (
                        <span className="text-gray-500">No Assessment</span>
                      )}
                    </td>
                    <td className="px-4 py-3 text-center">
                      {member.assessment_id ? (
                        <button
                          onClick={() => setActivePage({ 
                            name: 'Assessment', 
                            props: { assessmentId: member.assessment_id } 
                          })}
                          className="text-cyan-400 hover:text-cyan-300 font-medium"
                        >
                          View Assessment
                        </button>
                      ) : (
                        <span className="text-gray-500">â€”</span>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        ) : (
          <div className="text-center py-12">
            <Users size={48} className="mx-auto text-gray-500 mb-4" />
            <h3 className="text-white text-lg mb-2">No Team Members Found</h3>
            <div className="text-gray-400 space-y-1">
              <p>This could mean:</p>
              <ul className="text-sm text-gray-500 mt-2">
                <li>â€¢ You don't have any direct reports assigned</li>
                <li>â€¢ You're not set up as a manager in the system</li>
                <li>â€¢ No active review cycles have been started</li>
              </ul>
            </div>
          </div>
        )}
      </div>
    </div>
  );
}


--- FILE: src\components\pages\MyTeamEnhanced.js ---

// src/components/pages/MyTeamEnhanced.js - Enhanced with pending reviews workflow
import React, { useState, useEffect } from 'react';
import { 
  Users, 
  Calendar, 
  Clock, 
  CheckCircle, 
  AlertTriangle, 
  Eye, 
  Edit, 
  MessageSquare,
  FileText,
  Target,
  Award,
  Save
} from 'lucide-react';
import { useTeam } from '../../hooks';
import { useApp } from '../../contexts';
import { LoadingSpinner, ErrorMessage, Button, StatusBadge } from '../ui';
import { formatDate } from '../../utils';
import NotificationService from '../../services/NotificationService';

export default function MyTeamEnhanced() {
  const { openModal, setActivePage } = useApp();
  const { 
    team, 
    teamAssessments, 
    loading, 
    error, 
    refresh 
  } = useTeam();
  
  const [selectedTab, setSelectedTab] = useState('overview');
  const [pendingReviews, setPendingReviews] = useState([]);
  const [completedReviews, setCompletedReviews] = useState([]);
  const [developmentPlans, setDevelopmentPlans] = useState([]);
  const [selectedEmployeeId, setSelectedEmployeeId] = useState(null);

  // Process assessments for workflow display
  useEffect(() => {
    if (teamAssessments) {
      console.log('Team assessments received:', teamAssessments);
      
      const pending = teamAssessments.filter(assessment => 
        assessment.self_assessment_status === 'employee_complete' && 
        assessment.manager_review_status === 'pending' &&
        assessment.cycle_status === 'active'  // Only show active cycles
      );
      const completed = teamAssessments.filter(assessment => 
        assessment.manager_review_status === 'completed'
      );
      
      console.log('Pending reviews filtered:', pending);
      console.log('Completed reviews filtered:', completed);
      
      setPendingReviews(pending);
      setCompletedReviews(completed);
    }
  }, [teamAssessments]);

  // Fetch development plans for review
  useEffect(() => {
    fetchDevelopmentPlans();
  }, []);

  const fetchDevelopmentPlans = async () => {
    try {
      const plans = await NotificationService.getDevelopmentPlansForReview();
      setDevelopmentPlans(plans);
    } catch (error) {
      console.error('Error fetching development plans:', error);
    }
  };

  const handleReviewAssessment = (assessment) => {
    // Navigate to assessment page for manager review
    setActivePage({ 
      name: 'Assessment', 
      props: { 
        assessmentId: assessment.assessment_id
      } 
    });
  };

  const handleReviewDevelopmentPlan = async (planId, status, feedback) => {
    try {
      await NotificationService.reviewDevelopmentPlan(planId, status, feedback);
      // Refresh development plans after review
      await fetchDevelopmentPlans();
    } catch (error) {
      console.error('Error reviewing development plan:', error);
      // You could show a toast notification here
    }
  };

  const getAssessmentStatusColor = (status) => {
    const colorMap = {
      'not_started': 'gray',
      'in_progress': 'yellow',
      'submitted': 'blue',
      'completed': 'green',
      'overdue': 'red'
    };
    return colorMap[status] || 'gray';
  };

  const getManagerReviewStatusColor = (status) => {
    const colorMap = {
      'pending': 'yellow',
      'in_progress': 'blue',
      'completed': 'green'
    };
    return colorMap[status] || 'gray';
  };

  if (loading) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">My Team</h1>
        <LoadingSpinner size="lg" message="Loading your team..." />
      </div>
    );
  }

  if (error) {
    return (
      <div className="p-8">
        <h1 className="text-3xl font-bold text-cyan-400 mb-8">My Team</h1>
        <ErrorMessage 
          error={error} 
          title="Error Loading Team" 
          onRetry={refresh}
        />
      </div>
    );
  }

  const tabs = [
    { id: 'overview', name: 'Team Overview', icon: Users },
    { id: 'pending', name: `Pending Reviews (${pendingReviews.length})`, icon: Clock },
    { id: 'completed', name: 'Completed Reviews', icon: CheckCircle },
    { id: 'development', name: `Development Plans (${developmentPlans.filter(p => p.status === 'submitted').length})`, icon: Target }
  ];

  return (
    <div className="p-8">
      {/* Header */}
      <div className="flex items-center justify-between mb-8">
        <div>
          <h1 className="text-3xl font-bold text-cyan-400">My Team</h1>
          <p className="text-gray-400 mt-2">Manage your direct reports and their assessments</p>
        </div>
        <div className="flex space-x-3">
          <Button onClick={refresh} variant="secondary">
            <Calendar className="mr-2" size={16} />
            Refresh
          </Button>
        </div>
      </div>

      {/* Quick Stats */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center">
            <Users className="text-cyan-400 mr-3" size={24} />
            <div>
              <p className="text-2xl font-bold text-white">{team.length}</p>
              <p className="text-gray-400 text-sm">Team Members</p>
            </div>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center">
            <Clock className="text-yellow-400 mr-3" size={24} />
            <div>
              <p className="text-2xl font-bold text-white">{pendingReviews.length}</p>
              <p className="text-gray-400 text-sm">Pending Reviews</p>
            </div>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center">
            <CheckCircle className="text-green-400 mr-3" size={24} />
            <div>
              <p className="text-2xl font-bold text-white">{completedReviews.length}</p>
              <p className="text-gray-400 text-sm">Completed Reviews</p>
            </div>
          </div>
        </div>
        
        <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
          <div className="flex items-center">
            <Target className="text-purple-400 mr-3" size={24} />
            <div>
              <p className="text-2xl font-bold text-white">{developmentPlans.filter(p => p.status === 'submitted').length}</p>
              <p className="text-gray-400 text-sm">Plans for Review</p>
            </div>
          </div>
        </div>
      </div>

      {/* Tab Navigation */}
      <div className="border-b border-gray-700 mb-6">
        <nav className="-mb-px flex space-x-8">
          {tabs.map((tab) => (
            <button
              key={tab.id}
              onClick={() => {
                setSelectedTab(tab.id);
                // Reset employee filter when switching tabs
                if (tab.id === 'overview' || tab.id === 'development') {
                  setSelectedEmployeeId(null);
                }
              }}
              className={`flex items-center py-4 px-1 border-b-2 font-medium text-sm ${
                selectedTab === tab.id
                  ? 'border-cyan-500 text-cyan-400'
                  : 'border-transparent text-gray-400 hover:text-gray-300 hover:border-gray-300'
              }`}
            >
              <tab.icon className="mr-2" size={16} />
              {tab.name}
            </button>
          ))}
        </nav>
      </div>

      {/* Tab Content */}
      {selectedTab === 'overview' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-white mb-4">Team Overview</h2>
          {team.length === 0 ? (
            <div className="text-center py-12">
              <Users size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">No Team Members</h3>
              <p className="text-gray-400">No direct reports are currently assigned to you.</p>
            </div>
          ) : (
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              {team.map((member) => (
                <div key={member.id} className="bg-gray-800 rounded-lg p-6 border border-gray-700">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center space-x-4">
                      <div className="w-12 h-12 bg-cyan-600 rounded-full flex items-center justify-center">
                        <span className="text-white font-medium">
                          {member.name.split(' ').map(n => n[0]).join('')}
                        </span>
                      </div>
                      <div>
                        <h3 className="text-lg font-semibold text-white">{member.name}</h3>
                        <p className="text-gray-400">{member.job_title}</p>
                        <p className="text-gray-500 text-sm">{member.email}</p>
                      </div>
                    </div>
                    <StatusBadge 
                      status={member.is_active ? 'active' : 'inactive'} 
                      color={member.is_active ? 'green' : 'gray'} 
                    />
                  </div>
                  
                  {/* Member Actions */}
                  <div className="mt-4 flex space-x-2">
                    <Button 
                      variant="secondary" 
                      size="sm"
                      onClick={() => {
                        // Navigate to manager playbook for this employee
                        setActivePage({ name: 'Manager Playbook', props: { selectedEmployeeId: member.id } });
                      }}
                    >
                      <MessageSquare size={14} className="mr-1" />
                      Notes
                    </Button>
                    <Button 
                      variant="secondary" 
                      size="sm"
                      onClick={() => {
                        // Filter to show this employee's reviews and switch to appropriate tab
                        setSelectedEmployeeId(member.id);
                        const employeePendingReviews = pendingReviews.filter(assessment => 
                          assessment.employee_id === member.id
                        );
                        const employeeCompletedReviews = completedReviews.filter(assessment => 
                          assessment.employee_id === member.id
                        );
                        
                        // Switch to the tab that has reviews for this employee, or pending by default
                        if (employeePendingReviews.length > 0) {
                          setSelectedTab('pending');
                        } else if (employeeCompletedReviews.length > 0) {
                          setSelectedTab('completed');
                        } else {
                          setSelectedTab('pending');
                        }
                      }}
                    >
                      <FileText size={14} className="mr-1" />
                      Reviews
                    </Button>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {selectedTab === 'pending' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-white">
              Pending Reviews
              {selectedEmployeeId && (
                <span className="text-gray-400 text-sm ml-2">
                  (Filtered for {team.find(m => m.id === selectedEmployeeId)?.name})
                </span>
              )}
            </h2>
            {selectedEmployeeId && (
              <Button
                variant="secondary"
                size="sm"
                onClick={() => setSelectedEmployeeId(null)}
              >
                Show All
              </Button>
            )}
          </div>
          {(selectedEmployeeId ? pendingReviews.filter(r => r.employee_id === selectedEmployeeId) : pendingReviews).length === 0 ? (
            <div className="text-center py-12">
              <Clock size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">No Pending Reviews</h3>
              <p className="text-gray-400">All team member assessments are up to date!</p>
            </div>
          ) : (
            <div className="space-y-4">
              {(selectedEmployeeId ? pendingReviews.filter(r => r.employee_id === selectedEmployeeId) : pendingReviews).map((assessment) => (
                <div key={assessment.assessment_id} className="bg-gray-800 rounded-lg p-6 border border-gray-700 border-l-4 border-l-yellow-500">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-4 mb-3">
                        <div className="w-10 h-10 bg-cyan-600 rounded-full flex items-center justify-center">
                          <span className="text-white font-medium text-sm">
                            {assessment.employee_name.split(' ').map(n => n[0]).join('')}
                          </span>
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">{assessment.employee_name}</h3>
                          <p className="text-gray-400">{assessment.employee_job_title}</p>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                          <p className="text-sm text-gray-400">Review Cycle</p>
                          <p className="text-white font-medium">{assessment.cycle_name}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Employee Status</p>
                          <StatusBadge 
                            status={assessment.self_assessment_status} 
                            color={getAssessmentStatusColor(assessment.self_assessment_status)}
                          />
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Due Date</p>
                          <p className="text-white">{formatDate(assessment.due_date)}</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-2">
                      <Button 
                        variant="primary"
                        onClick={() => handleReviewAssessment(assessment)}
                        className="bg-yellow-600 hover:bg-yellow-700 border-yellow-600"
                      >
                        <Edit className="mr-2" size={16} />
                        Start Manager Review
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {selectedTab === 'completed' && (
        <div className="space-y-6">
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-xl font-semibold text-white">
              Completed Reviews
              {selectedEmployeeId && (
                <span className="text-gray-400 text-sm ml-2">
                  (Filtered for {team.find(m => m.id === selectedEmployeeId)?.name})
                </span>
              )}
            </h2>
            {selectedEmployeeId && (
              <Button
                variant="secondary"
                size="sm"
                onClick={() => setSelectedEmployeeId(null)}
              >
                Show All
              </Button>
            )}
          </div>
          {(selectedEmployeeId ? completedReviews.filter(r => r.employee_id === selectedEmployeeId) : completedReviews).length === 0 ? (
            <div className="text-center py-12">
              <CheckCircle size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">No Completed Reviews</h3>
              <p className="text-gray-400">Completed reviews will appear here.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {(selectedEmployeeId ? completedReviews.filter(r => r.employee_id === selectedEmployeeId) : completedReviews).map((assessment) => (
                <div key={assessment.assessment_id} className="bg-gray-800 rounded-lg p-6 border border-gray-700 border-l-4 border-l-green-500">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <div className="flex items-center space-x-4 mb-3">
                        <div className="w-10 h-10 bg-cyan-600 rounded-full flex items-center justify-center">
                          <span className="text-white font-medium text-sm">
                            {assessment.employee_name.split(' ').map(n => n[0]).join('')}
                          </span>
                        </div>
                        <div>
                          <h3 className="text-lg font-semibold text-white">{assessment.employee_name}</h3>
                          <p className="text-gray-400">{assessment.employee_job_title}</p>
                        </div>
                      </div>
                      
                      <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
                        <div>
                          <p className="text-sm text-gray-400">Review Cycle</p>
                          <p className="text-white font-medium">{assessment.cycle_name}</p>
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Manager Review</p>
                          <StatusBadge 
                            status={assessment.manager_review_status} 
                            color={getManagerReviewStatusColor(assessment.manager_review_status)}
                          />
                        </div>
                        <div>
                          <p className="text-sm text-gray-400">Completed</p>
                          <p className="text-white">{formatDate(assessment.updated_at)}</p>
                        </div>
                      </div>
                    </div>
                    
                    <div className="flex flex-col space-y-2">
                      <Button 
                        variant="secondary"
                        onClick={() => handleReviewAssessment(assessment)}
                      >
                        <Eye className="mr-2" size={16} />
                        View Review
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>
      )}

      {selectedTab === 'development' && (
        <div className="space-y-6">
          <h2 className="text-xl font-semibold text-white mb-4">Development Plans for Review</h2>
          {developmentPlans.length === 0 ? (
            <div className="text-center py-12">
              <Target size={64} className="mx-auto text-gray-500 mb-4" />
              <h3 className="text-xl font-semibold text-white mb-2">No Development Plans</h3>
              <p className="text-gray-400">Your team members haven't submitted any development plans yet.</p>
            </div>
          ) : (
            <div className="space-y-4">
              {developmentPlans.map((plan) => (
                <DevelopmentPlanCard
                  key={plan.id}
                  plan={plan}
                  onReview={(planId, status, feedback) => handleReviewDevelopmentPlan(planId, status, feedback)}
                />
              ))}
            </div>
          )}
        </div>
      )}
    </div>
  );
}

// Development Plan Card Component for Manager Review
const DevelopmentPlanCard = ({ plan, onReview }) => {
  const [showReviewForm, setShowReviewForm] = useState(false);
  const [reviewStatus, setReviewStatus] = useState('under_review');
  const [feedback, setFeedback] = useState('');
  const [submitting, setSubmitting] = useState(false);

  const handleSubmitReview = async () => {
    try {
      setSubmitting(true);
      await onReview(plan.id, reviewStatus, feedback);
      setShowReviewForm(false);
      setFeedback('');
    } catch (error) {
      console.error('Error submitting review:', error);
    } finally {
      setSubmitting(false);
    }
  };

  const getStatusColor = (status) => {
    const colors = {
      'submitted': 'yellow',
      'under_review': 'blue',
      'approved': 'green',
      'needs_revision': 'red'
    };
    return colors[status] || 'gray';
  };

  const formatGoals = (goals) => {
    try {
      const goalArray = typeof goals === 'string' ? JSON.parse(goals) : goals;
      return Array.isArray(goalArray) ? goalArray : [];
    } catch {
      return [];
    }
  };

  const formatSkills = (skills) => {
    try {
      const skillArray = typeof skills === 'string' ? JSON.parse(skills) : skills;
      return Array.isArray(skillArray) ? skillArray : [];
    } catch {
      return [];
    }
  };

  return (
    <div className="bg-gray-800 rounded-lg p-6 border border-gray-700">
      <div className="flex items-start justify-between mb-4">
        <div className="flex-1">
          <div className="flex items-center space-x-4 mb-3">
            <div className="w-10 h-10 bg-cyan-600 rounded-full flex items-center justify-center">
              <span className="text-white font-medium text-sm">
                {plan.employee_name.split(' ').map(n => n[0]).join('')}
              </span>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-white">{plan.employee_name}</h3>
              <p className="text-gray-400">{plan.employee_job_title}</p>
            </div>
          </div>
          
          <h4 className="text-xl font-semibold text-white mb-2">{plan.title}</h4>
          {plan.description && (
            <p className="text-gray-300 mb-4">{plan.description}</p>
          )}

          <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-4">
            <div>
              <p className="text-sm text-gray-400">Status</p>
              <StatusBadge 
                status={plan.status} 
                color={getStatusColor(plan.status)}
              />
            </div>
            <div>
              <p className="text-sm text-gray-400">Timeline</p>
              <p className="text-white">{plan.timeline}</p>
            </div>
            <div>
              <p className="text-sm text-gray-400">Submitted</p>
              <p className="text-white">{formatDate(plan.created_at)}</p>
            </div>
          </div>

          {/* Goals */}
          {formatGoals(plan.goals).length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-400 mb-2">Goals ({formatGoals(plan.goals).length})</p>
              <div className="space-y-2">
                {formatGoals(plan.goals).slice(0, 3).map((goal, index) => (
                  <div key={index} className="bg-gray-700 rounded-lg p-3">
                    <p className="text-gray-300 font-medium">{goal.goal}</p>
                    {goal.timeline && (
                      <p className="text-gray-500 text-sm mt-1">Timeline: {goal.timeline}</p>
                    )}
                    {goal.priority && (
                      <span className={`inline-block px-2 py-1 text-xs rounded mt-1 ${
                        goal.priority === 'high' ? 'bg-red-600 text-white' :
                        goal.priority === 'medium' ? 'bg-yellow-600 text-white' :
                        'bg-gray-600 text-gray-300'
                      }`}>
                        {goal.priority} priority
                      </span>
                    )}
                  </div>
                ))}
                {formatGoals(plan.goals).length > 3 && (
                  <p className="text-gray-500 text-sm">... and {formatGoals(plan.goals).length - 3} more goals</p>
                )}
              </div>
            </div>
          )}

          {/* Skills */}
          {formatSkills(plan.skills_to_develop).length > 0 && (
            <div className="mb-4">
              <p className="text-sm text-gray-400 mb-2">Skills to Develop ({formatSkills(plan.skills_to_develop).length})</p>
              <div className="space-y-2">
                {formatSkills(plan.skills_to_develop).slice(0, 2).map((skill, index) => (
                  <div key={index} className="bg-gray-700 rounded-lg p-3">
                    <p className="text-gray-300 font-medium">{skill.skill}</p>
                    {skill.reason && (
                      <p className="text-gray-400 text-sm mt-1">{skill.reason}</p>
                    )}
                  </div>
                ))}
                {formatSkills(plan.skills_to_develop).length > 2 && (
                  <p className="text-gray-500 text-sm">... and {formatSkills(plan.skills_to_develop).length - 2} more skills</p>
                )}
              </div>
            </div>
          )}

          {/* Existing Manager Feedback */}
          {plan.manager_feedback && (
            <div className="bg-gray-700 rounded-lg p-4 mb-4">
              <p className="text-sm text-gray-400 mb-2">Previous Manager Feedback</p>
              <p className="text-gray-300">{plan.manager_feedback}</p>
              <p className="text-xs text-gray-500 mt-2">
                Reviewed on {formatDate(plan.manager_reviewed_at)}
              </p>
            </div>
          )}
        </div>
        
        <div className="flex flex-col space-y-2 ml-6">
          {plan.status === 'submitted' && (
            <Button 
              variant="primary"
              onClick={() => setShowReviewForm(!showReviewForm)}
            >
              <MessageSquare className="mr-2" size={16} />
              Review Plan
            </Button>
          )}
        </div>
      </div>

      {/* Review Form */}
      {showReviewForm && (
        <div className="border-t border-gray-700 pt-4 mt-4">
          <h5 className="text-lg font-semibold text-white mb-4">Review Development Plan</h5>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Review Decision
              </label>
              <select
                value={reviewStatus}
                onChange={(e) => setReviewStatus(e.target.value)}
                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
              >
                <option value="under_review">Keep Under Review</option>
                <option value="approved">Approve Plan</option>
                <option value="needs_revision">Needs Revision</option>
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-300 mb-2">
                Manager Feedback
              </label>
              <textarea
                value={feedback}
                onChange={(e) => setFeedback(e.target.value)}
                className="w-full p-3 bg-gray-700 border border-gray-600 rounded-md text-white placeholder-gray-400 focus:ring-2 focus:ring-cyan-500 focus:border-transparent"
                rows={4}
                placeholder="Provide feedback on this development plan..."
              />
            </div>

            <div className="flex justify-end space-x-3">
              <Button 
                variant="secondary"
                onClick={() => setShowReviewForm(false)}
              >
                Cancel
              </Button>
              <Button 
                variant="primary"
                onClick={handleSubmitReview}
                disabled={submitting}
              >
                <Save size={16} className="mr-2" />
                {submitting ? 'Submitting...' : 'Submit Review'}
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};


--- FILE: src\components\pages\Settings.js ---

import React from 'react';

export default function Settings() {
  return (
    <div className="p-8 max-w-xl">
      <h2 className="text-2xl font-semibold mb-6">Settings</h2>
      <p className="mb-4 text-gray-400">This minimal MVP has no userâ€‘configurable settings yet.</p>
      <p className="text-sm text-gray-500">Future iterations will include notification preferences, theme selection, and profile editing.</p>
    </div>
  );
}


--- FILE: src\components\shared\Sidebar.js ---

// src/components/shared/Sidebar.js - Fixed with proper sign out
import React from 'react';
import { LayoutDashboard, Users, FileText, Target, MessageSquare, BookOpen, LogOut, UserCog } from 'lucide-react';
import { useApp } from '../../contexts';
import NotificationCenter from '../ui/NotificationCenter';

const Sidebar = () => {
  const { activePage, setActivePage, userRole, userName, signOut } = useApp();
  // Define navigation items with role requirements
  const navItems = [
    { name: 'Dashboard', icon: LayoutDashboard, roles: ['admin', 'manager', 'employee'] },
    { name: 'My Team', icon: Users, roles: ['admin', 'manager'] },
    { name: 'Manager Playbook', icon: BookOpen, roles: ['admin', 'manager'] },
    { name: 'My Reviews', icon: FileText, roles: ['admin', 'manager', 'employee'] },
    { name: 'Feedback Wall', icon: MessageSquare, roles: ['admin', 'manager', 'employee'] },
    { name: 'My Development', icon: Target, roles: ['admin', 'manager', 'employee'] },
    { name: 'Admin', icon: UserCog, roles: ['admin'] },
  ];

  // Filter items based on user role
  const visibleItems = navItems.filter(item => 
    !userRole || item.roles.includes(userRole)
  );

    return (
    <div className="fixed left-0 top-0 w-64 bg-gray-900 text-white flex flex-col h-screen shadow-2xl z-40">
      <div className="p-6 text-center border-b border-gray-700 flex-shrink-0">
        <div className="flex items-center justify-between mb-2">
          <h1 className="text-3xl font-bold text-cyan-400 tracking-wider">EDGE</h1>
          <NotificationCenter />
        </div>
        {userName && (
          <div className="mt-2">
            <p className="text-sm text-gray-300">Welcome, {userName}</p>
            {userRole && (
              <p className="text-xs text-gray-500 capitalize">({userRole})</p>
            )}
          </div>
        )}
      </div>
      
      <nav className="flex-grow overflow-y-auto p-4">
        <ul>
          {visibleItems.map((item) => (
            <li key={item.name}>
              <button
                onClick={() => setActivePage({ name: item.name, props: {} })}
                className={`w-full flex items-center p-3 my-2 rounded-lg transition-all duration-200 text-left ${
                  activePage === item.name
                    ? 'bg-cyan-500 text-white shadow-lg'
                    : 'text-gray-400 hover:bg-gray-700 hover:text-white'
                }`}
              >
                <item.icon className="mr-4" size={20} />
                <span className="font-semibold">{item.name}</span>
              </button>
            </li>
          ))}
        </ul>
      </nav>
      
      <div className="p-4 border-t border-gray-700 flex-shrink-0">
        <button
          onClick={signOut}
          className="w-full flex items-center p-3 rounded-lg text-gray-400 hover:bg-red-600 hover:text-white transition-all duration-200"
        >
          <LogOut className="mr-4" size={20} />
          <span className="font-semibold">Sign Out</span>
        </button>
      </div>
    </div>
  );
};

export default Sidebar;


--- FILE: src\components\ui\Button.js ---

import React from 'react';

const Button = ({ 
  children, 
  variant = 'primary', 
  size = 'md', 
  disabled = false,
  loading = false,
  icon = null,
  onClick,
  type = 'button',
  className = '',
  ...props 
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-900 disabled:opacity-50 disabled:cursor-not-allowed';

  const variantClasses = {
    primary: 'bg-cyan-500 hover:bg-cyan-600 text-white focus:ring-cyan-500',
    secondary: 'bg-gray-700 hover:bg-gray-600 text-white focus:ring-gray-600',
    success: 'bg-green-600 hover:bg-green-700 text-white focus:ring-green-600',
    warning: 'bg-yellow-600 hover:bg-yellow-700 text-white focus:ring-yellow-600',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-600',
    outline: 'border border-gray-600 hover:bg-gray-700 text-gray-300 hover:text-white focus:ring-gray-600',
    ghost: 'text-gray-300 hover:bg-gray-700 hover:text-white focus:ring-gray-600'
  };

  const sizeClasses = {
    xs: 'px-2 py-1 text-xs',
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-sm',
    lg: 'px-6 py-3 text-base',
    xl: 'px-8 py-4 text-lg'
  };

  const LoadingSpinner = () => (
    <div className="w-4 h-4 border-2 border-current border-t-transparent rounded-full animate-spin mr-2" />
  );

  return (
    <button
      type={type}
      disabled={disabled || loading}
      onClick={onClick}
      className={`
        ${baseClasses}
        ${variantClasses[variant]}
        ${sizeClasses[size]}
        ${className}
      `}
      {...props}
    >
      {loading && <LoadingSpinner />}
      {!loading && icon && <span className="mr-2">{icon}</span>}
      {children}
    </button>
  );
};

export default Button;


--- FILE: src\components\ui\Button.tsx ---

// Button.tsx - TypeScript version with comprehensive prop types
import React from 'react';
import { ButtonProps } from '../../types';

const Button: React.FC<ButtonProps> = ({
  variant = 'primary',
  size = 'md',
  disabled = false,
  loading = false,
  onClick,
  children,
  className = '',
  type = 'button',
  ...props
}) => {
  const baseClasses = 'inline-flex items-center justify-center font-medium rounded-lg transition-colors focus:outline-none focus:ring-2 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed';
  
  const variantClasses = {
    primary: 'bg-cyan-600 hover:bg-cyan-700 text-white focus:ring-cyan-500',
    secondary: 'bg-gray-600 hover:bg-gray-700 text-white focus:ring-gray-500',
    danger: 'bg-red-600 hover:bg-red-700 text-white focus:ring-red-500',
    ghost: 'bg-transparent hover:bg-gray-700 text-gray-300 focus:ring-gray-500'
  };
  
  const sizeClasses = {
    sm: 'px-3 py-1.5 text-sm',
    md: 'px-4 py-2 text-sm',
    lg: 'px-6 py-3 text-base'
  };

  const handleClick = () => {
    if (!disabled && !loading && onClick) {
      onClick();
    }
  };

  return (
    <button
      type={type}
      className={`${baseClasses} ${variantClasses[variant]} ${sizeClasses[size]} ${className}`}
      disabled={disabled || loading}
      onClick={handleClick}
      {...props}
    >
      {loading && (
        <svg
          className="animate-spin -ml-1 mr-2 h-4 w-4 text-white"
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
        >
          <circle
            className="opacity-25"
            cx="12"
            cy="12"
            r="10"
            stroke="currentColor"
            strokeWidth="4"
          />
          <path
            className="opacity-75"
            fill="currentColor"
            d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
          />
        </svg>
      )}
      {children}
    </button>
  );
};

export default Button;


--- FILE: src\components\ui\Card.js ---

import React from 'react';

const Card = ({ 
  children, 
  variant = 'default', 
  padding = 'md', 
  className = '',
  ...props 
}) => {
  const variantClasses = {
    default: 'bg-gray-800 border border-gray-700',
    elevated: 'bg-gray-800 shadow-2xl border border-gray-700',
    outline: 'border border-gray-600 bg-transparent',
    subtle: 'bg-gray-800/50 border border-gray-700/50'
  };

  const paddingClasses = {
    none: '',
    sm: 'p-3',
    md: 'p-6', 
    lg: 'p-8'
  };

  return (
    <div 
      className={`
        rounded-lg
        ${variantClasses[variant]}
        ${paddingClasses[padding]}
        ${className}
      `}
      {...props}
    >
      {children}
    </div>
  );
};

// Card subcomponents for better composition
Card.Header = ({ children, className = '', ...props }) => (
  <div className={`mb-4 ${className}`} {...props}>
    {children}
  </div>
);

Card.Title = ({ children, className = '', ...props }) => (
  <h3 className={`text-xl font-semibold text-white ${className}`} {...props}>
    {children}
  </h3>
);

Card.Content = ({ children, className = '', ...props }) => (
  <div className={`text-gray-300 ${className}`} {...props}>
    {children}
  </div>
);

Card.Footer = ({ children, className = '', ...props }) => (
  <div className={`mt-4 pt-4 border-t border-gray-700 ${className}`} {...props}>
    {children}
  </div>
);

export default Card;


--- FILE: src\components\ui\ErrorMessage.js ---

import React from 'react';
import { AlertTriangle, X, RefreshCw } from 'lucide-react';

const ErrorMessage = ({ 
  error, 
  title = 'Error', 
  variant = 'default', 
  dismissible = false, 
  onDismiss = null,
  onRetry = null,
  className = '' 
}) => {
  const variantClasses = {
    default: 'bg-red-900 border-red-700 text-red-200',
    subtle: 'bg-red-900/20 border-red-800/30 text-red-300',
    inline: 'bg-transparent border-none text-red-400 p-2'
  };

  const iconClasses = {
    default: 'text-red-400',
    subtle: 'text-red-500',
    inline: 'text-red-400'
  };

  return (
    <div className={`
      ${variantClasses[variant]} 
      border rounded-lg p-4 mb-4 
      ${className}
    `}>
      <div className="flex items-start">
        <AlertTriangle 
          size={20} 
          className={`${iconClasses[variant]} mr-3 mt-0.5 flex-shrink-0`} 
        />
        
        <div className="flex-1">
          <h3 className="font-medium mb-1">{title}</h3>
          <p className="text-sm opacity-90">
            {typeof error === 'string' ? error : error?.message || 'An unexpected error occurred'}
          </p>
          
          {/* Action buttons */}
          {(onRetry || onDismiss) && (
            <div className="flex items-center space-x-2 mt-3">
              {onRetry && (
                <button
                  onClick={onRetry}
                  className="inline-flex items-center px-3 py-1 bg-red-800 hover:bg-red-700 rounded text-xs transition-colors"
                >
                  <RefreshCw size={12} className="mr-1" />
                  Retry
                </button>
              )}
              
              {onDismiss && (
                <button
                  onClick={onDismiss}
                  className="text-xs opacity-70 hover:opacity-100 transition-opacity"
                >
                  Dismiss
                </button>
              )}
            </div>
          )}
        </div>
        
        {dismissible && onDismiss && (
          <button
            onClick={onDismiss}
            className="text-red-400 hover:text-red-300 transition-colors"
          >
            <X size={18} />
          </button>
        )}
      </div>
    </div>
  );
};

export default ErrorMessage;


--- FILE: src\components\ui\ErrorMessage.tsx ---

// ErrorMessage.tsx - TypeScript version with proper error handling types
import React from 'react';
import { AlertTriangle, RefreshCw } from 'lucide-react';
import { ErrorMessageProps } from '../../types';
import Button from './Button';

const ErrorMessage: React.FC<ErrorMessageProps> = ({
  error,
  title = 'Something went wrong',
  onRetry,
  className = ''
}) => {
  // Ensure error is always a string
  const errorMessage = typeof error === 'string' ? error : 
                      (error as any)?.message || 
                      'An unexpected error occurred';

  return (
    <div className={`bg-red-900 border border-red-700 rounded-lg p-6 ${className}`}>
      <div className="flex items-start space-x-3">
        <AlertTriangle className="text-red-400 flex-shrink-0 mt-0.5" size={20} />
        <div className="flex-1 min-w-0">
          <h3 className="text-red-200 font-semibold text-lg mb-2">
            {title}
          </h3>
          <p className="text-red-300 text-sm leading-relaxed mb-4">
            {errorMessage}
          </p>
          {onRetry && (
            <Button
              variant="secondary"
              size="sm"
              onClick={onRetry}
              className="bg-red-700 hover:bg-red-600 border border-red-600"
            >
              <RefreshCw size={14} className="mr-2" />
              Try Again
            </Button>
          )}
        </div>
      </div>
    </div>
  );
};

export default ErrorMessage;


--- FILE: src\components\ui\index.js ---

export { default as LoadingSpinner } from './LoadingSpinner';
export { default as ErrorMessage } from './ErrorMessage';
export { default as StatusBadge } from './StatusBadge';
export { default as Button } from './Button';
export { default as Card } from './Card';
export { default as NotificationCenter } from './NotificationCenter';


--- FILE: src\components\ui\LoadingSpinner.js ---

import React from 'react';

const LoadingSpinner = ({ 
  size = 'md', 
  color = 'cyan', 
  message = 'Loading...', 
  centered = true,
  className = '' 
}) => {
  const sizeClasses = {
    sm: 'h-4 w-4',
    md: 'h-8 w-8', 
    lg: 'h-12 w-12',
    xl: 'h-16 w-16'
  };

  const colorClasses = {
    cyan: 'border-cyan-400',
    blue: 'border-blue-400',
    green: 'border-green-400',
    yellow: 'border-yellow-400',
    red: 'border-red-400',
    gray: 'border-gray-400'
  };

  const spinner = (
    <div 
      className={`
        ${sizeClasses[size]} 
        ${colorClasses[color]} 
        border-2 border-t-transparent rounded-full animate-spin
        ${className}
      `}
      role="status"
      aria-label="Loading"
    />
  );

  if (centered) {
    return (
      <div className="flex flex-col items-center justify-center py-8">
        {spinner}
        {message && (
          <p className="text-gray-400 mt-4 text-sm">{message}</p>
        )}
      </div>
    );
  }

  return (
    <div className="inline-flex items-center space-x-2">
      {spinner}
      {message && (
        <span className="text-gray-400 text-sm">{message}</span>
      )}
    </div>
  );
};

export default LoadingSpinner;


--- FILE: src\components\ui\LoadingSpinner.tsx ---

// LoadingSpinner.tsx - TypeScript version with proper prop types
import React from 'react';
import { LoadingSpinnerProps } from '../../types';

const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({
  size = 'md',
  message = 'Loading...',
  className = ''
}) => {
  const sizeClasses = {
    sm: 'w-4 h-4',
    md: 'w-8 h-8',
    lg: 'w-12 h-12'
  };

  const textSizeClasses = {
    sm: 'text-sm',
    md: 'text-base',
    lg: 'text-lg'
  };

  return (
    <div className={`flex flex-col items-center justify-center space-y-3 ${className}`}>
      <div className="relative">
        <div className={`${sizeClasses[size]} border-2 border-gray-300 border-t-cyan-600 rounded-full animate-spin`} />
      </div>
      {message && (
        <p className={`text-gray-400 ${textSizeClasses[size]} font-medium`}>
          {message}
        </p>
      )}
    </div>
  );
};

export default LoadingSpinner;


--- FILE: src\components\ui\NotificationCenter.js ---

import React, { useState, useEffect } from 'react';
import { Bell, X, Check, CheckCheck } from 'lucide-react';
import { Button } from './Button';
import NotificationService from '../../services/NotificationService';

const NotificationCenter = () => {
  const [notifications, setNotifications] = useState([]);
  const [unreadCount, setUnreadCount] = useState(0);
  const [isOpen, setIsOpen] = useState(false);
  const [loading, setLoading] = useState(false);

  // Fetch notifications and unread count
  const fetchNotifications = async () => {
    try {
      setLoading(true);
      const [notificationsData, count] = await Promise.all([
        NotificationService.getUserNotifications(),
        NotificationService.getUnreadCount()
      ]);
      setNotifications(notificationsData);
      setUnreadCount(count);
    } catch (error) {
      console.error('Error fetching notifications:', error);
    } finally {
      setLoading(false);
    }
  };

  // Mark notification as read
  const handleMarkAsRead = async (notificationId) => {
    try {
      await NotificationService.markAsRead(notificationId);
      // Update local state
      setNotifications(prev => 
        prev.map(n => 
          n.id === notificationId ? { ...n, is_read: true, read_at: new Date().toISOString() } : n
        )
      );
      setUnreadCount(prev => Math.max(0, prev - 1));
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };

  // Mark all notifications as read
  const handleMarkAllAsRead = async () => {
    try {
      await NotificationService.markAllAsRead();
      setNotifications(prev => 
        prev.map(n => ({ ...n, is_read: true, read_at: new Date().toISOString() }))
      );
      setUnreadCount(0);
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
    }
  };

  // Fetch notifications on component mount
  useEffect(() => {
    fetchNotifications();
  }, []);

  // Auto-refresh notifications every 30 seconds
  useEffect(() => {
    const interval = setInterval(fetchNotifications, 30000);
    return () => clearInterval(interval);
  }, []);

  return (
    <div className="relative">
      {/* Notification Bell Button */}
      <button
        onClick={() => setIsOpen(!isOpen)}
        className="relative p-2 text-gray-400 hover:text-white transition-colors"
      >
        <Bell size={20} />
        {unreadCount > 0 && (
          <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium">
            {unreadCount > 99 ? '99+' : unreadCount}
          </span>
        )}
      </button>

      {/* Notification Dropdown */}
      {isOpen && (
        <div className="absolute right-0 mt-2 w-96 bg-gray-800 rounded-lg shadow-2xl border border-gray-700 z-50">
          {/* Header */}
          <div className="flex items-center justify-between p-4 border-b border-gray-700">
            <div className="flex items-center space-x-2">
              <Bell size={16} className="text-cyan-400" />
              <h3 className="text-lg font-semibold text-white">Notifications</h3>
              {unreadCount > 0 && (
                <span className="bg-red-500 text-white text-xs px-2 py-1 rounded-full">
                  {unreadCount}
                </span>
              )}
            </div>
            <div className="flex items-center space-x-2">
              {unreadCount > 0 && (
                <button
                  onClick={handleMarkAllAsRead}
                  className="text-cyan-400 hover:text-cyan-300 transition-colors"
                  title="Mark all as read"
                >
                  <CheckCheck size={16} />
                </button>
              )}
              <button
                onClick={() => setIsOpen(false)}
                className="text-gray-400 hover:text-white transition-colors"
              >
                <X size={16} />
              </button>
            </div>
          </div>

          {/* Notifications List */}
          <div className="max-h-96 overflow-y-auto">
            {loading ? (
              <div className="p-4 text-center text-gray-400">
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-cyan-400 mx-auto"></div>
                <p className="mt-2">Loading notifications...</p>
              </div>
            ) : notifications.length === 0 ? (
              <div className="p-8 text-center text-gray-400">
                <Bell size={48} className="mx-auto mb-4 opacity-50" />
                <h4 className="text-lg font-medium mb-2">No notifications yet</h4>
                <p className="text-sm">You're all caught up! New notifications will appear here.</p>
              </div>
            ) : (
              <div className="divide-y divide-gray-700">
                {notifications.map((notification, index) => (
                  <NotificationItem
                    key={`${notification.id}-${index}`}
                    notification={notification}
                    onMarkAsRead={handleMarkAsRead}
                  />
                ))}
              </div>
            )}
          </div>

          {/* Footer */}
          {notifications.length > 0 && (
            <div className="p-3 border-t border-gray-700 text-center">
              <button
                onClick={() => {
                  setIsOpen(false);
                  // Could navigate to a full notifications page here
                }}
                className="text-cyan-400 hover:text-cyan-300 text-sm transition-colors"
              >
                View all notifications
              </button>
            </div>
          )}
        </div>
      )}

      {/* Backdrop */}
      {isOpen && (
        <div
          className="fixed inset-0 z-40"
          onClick={() => setIsOpen(false)}
        />
      )}
    </div>
  );
};

// Individual notification item component
const NotificationItem = ({ notification, onMarkAsRead }) => {
  const handleClick = () => {
    if (!notification.is_read) {
      onMarkAsRead(notification.id);
    }
    // Could add navigation logic here based on notification type
  };

  const getNotificationStyles = () => {
    const color = NotificationService.getNotificationColor(notification.type);
    const baseClasses = "p-4 hover:bg-gray-700 transition-colors cursor-pointer";
    
    if (!notification.is_read) {
      return `${baseClasses} bg-gray-750 border-l-4 border-${color}-500`;
    }
    return `${baseClasses} opacity-75`;
  };

  return (
    <div className={getNotificationStyles()} onClick={handleClick}>
      <div className="flex items-start space-x-3">
        {/* Icon */}
        <div className="flex-shrink-0 mt-1">
          <span className="text-lg">
            {NotificationService.getNotificationIcon(notification.type)}
          </span>
        </div>

        {/* Content */}
        <div className="flex-1 min-w-0">
          <div className="flex items-start justify-between">
            <div className="flex-1">
              <h4 className={`text-sm font-medium ${notification.is_read ? 'text-gray-300' : 'text-white'}`}>
                {notification.title}
              </h4>
              <p className={`text-sm mt-1 ${notification.is_read ? 'text-gray-400' : 'text-gray-300'}`}>
                {notification.message}
              </p>
              <div className="flex items-center justify-between mt-2">
                <p className="text-xs text-gray-500">
                  {notification.sender_name && notification.sender_name !== 'System' && (
                    <span>From: {notification.sender_name} â€¢ </span>
                  )}
                  {NotificationService.formatNotificationTime(notification.created_at)}
                </p>
                {!notification.is_read && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      onMarkAsRead(notification.id);
                    }}
                    className="text-cyan-400 hover:text-cyan-300 transition-colors"
                    title="Mark as read"
                  >
                    <Check size={14} />
                  </button>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default NotificationCenter;


--- FILE: src\components\ui\StatusBadge.js ---

import React from 'react';
import { getStatusBadgeColor } from '../../utils/uiUtils';

const StatusBadge = ({ 
  status, 
  variant = 'default', 
  size = 'sm', 
  className = '' 
}) => {
  const sizeClasses = {
    xs: 'text-xs px-1.5 py-0.5',
    sm: 'text-xs px-2 py-1',
    md: 'text-sm px-3 py-1.5',
    lg: 'text-base px-4 py-2'
  };

  const variantClasses = {
    default: getStatusBadgeColor(status),
    outline: `border ${getStatusBadgeColor(status).replace('bg-', 'border-').replace('text-white', 'text-current')} bg-transparent`,
    subtle: `${getStatusBadgeColor(status).replace('-600', '-900/20').replace('text-white', 'text-current')} border-none`
  };

  const displayText = status ? status.replace(/_/g, ' ').replace(/\b\w/g, l => l.toUpperCase()) : '';

  return (
    <span 
      className={`
        inline-flex items-center rounded-full font-medium
        ${sizeClasses[size]}
        ${variantClasses[variant]}
        ${className}
      `}
    >
      {displayText}
    </span>
  );
};

export default StatusBadge;


--- FILE: src\contexts\AppContext.js ---

import React, { createContext, useContext, useReducer, useEffect } from 'react';
import { AuthService } from '../services';

// Action types
const APP_ACTIONS = {
  SET_USER: 'SET_USER',
  SET_USER_DATA: 'SET_USER_DATA',
  SET_USER_DATA_LOADING: 'SET_USER_DATA_LOADING',
  SET_ACTIVE_PAGE: 'SET_ACTIVE_PAGE',
  OPEN_MODAL: 'OPEN_MODAL',
  CLOSE_MODAL: 'CLOSE_MODAL',
  RESET_USER_STATE: 'RESET_USER_STATE'
};

// Initial state
const initialState = {
  user: null,
  userRole: null,
  userName: '',
  userDataLoading: true,
  activePage: { name: 'Dashboard', props: {} },
  modal: { isOpen: false, name: null, props: {} }
};

// Reducer
const appReducer = (state, action) => {
  switch (action.type) {
    case APP_ACTIONS.SET_USER:
      return { ...state, user: action.payload };
    
    case APP_ACTIONS.SET_USER_DATA:
      return { 
        ...state, 
        userRole: action.payload.role, 
        userName: action.payload.name 
      };
    
    case APP_ACTIONS.SET_USER_DATA_LOADING:
      return { ...state, userDataLoading: action.payload };
    
    case APP_ACTIONS.SET_ACTIVE_PAGE:
      return { ...state, activePage: action.payload };
    
    case APP_ACTIONS.OPEN_MODAL:
      return { 
        ...state, 
        modal: { 
          isOpen: true, 
          name: action.payload.name, 
          props: action.payload.props || {} 
        } 
      };
    
    case APP_ACTIONS.CLOSE_MODAL:
      return { 
        ...state, 
        modal: { isOpen: false, name: null, props: {} } 
      };
    
    case APP_ACTIONS.RESET_USER_STATE:
      return {
        ...state,
        user: null,
        userRole: null,
        userName: '',
        userDataLoading: false,
        activePage: { name: 'Dashboard', props: {} },
        modal: { isOpen: false, name: null, props: {} }
      };
    
    default:
      return state;
  }
};

// Create context
const AppContext = createContext();

// Context provider component
export const AppProvider = ({ children }) => {
  const [state, dispatch] = useReducer(appReducer, initialState);

  // Fetch user role and name after authentication
  const fetchUserData = async (user) => {
    if (!user) {
      dispatch({ type: APP_ACTIONS.SET_USER_DATA_LOADING, payload: false });
      return;
    }

    try {
      if (process.env.NODE_ENV === 'development') {
        console.log('ðŸ”„ Fetching user data for authenticated user');
      }
      
      const { role, name } = await AuthService.getUserRole(user.email);

      if (process.env.NODE_ENV === 'development') {
        console.log('âœ… User data loaded successfully');
      }
      dispatch({ type: APP_ACTIONS.SET_USER_DATA, payload: { role, name } });

    } catch (error) {
      console.error('ðŸ’¥ Error in fetchUserData:', error);
      // Set defaults if there's an error
      dispatch({ 
        type: APP_ACTIONS.SET_USER_DATA, 
        payload: { role: 'employee', name: user.email.split('@')[0] } 
      });
    } finally {
      dispatch({ type: APP_ACTIONS.SET_USER_DATA_LOADING, payload: false });
    }
  };

  // Initialize auth state
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('ðŸ”„ App starting...');
    }
    
    AuthService.getSession().then((session) => {
      if (process.env.NODE_ENV === 'development') {
        console.log('ðŸ” Session check:', session?.user ? 'Active session' : 'No session');
      }
      dispatch({ type: APP_ACTIONS.SET_USER, payload: session?.user ?? null });
    });

    const { data: { subscription } } = AuthService.onAuthStateChange((event, session) => {
      if (process.env.NODE_ENV === 'development') {
        console.log('ðŸ” Auth changed:', event, session?.user?.email || 'No user');
      }
      dispatch({ type: APP_ACTIONS.SET_USER, payload: session?.user ?? null });
      
      // Reset user data when auth changes
      if (!session?.user) {
        dispatch({ type: APP_ACTIONS.RESET_USER_STATE });
      }
    });

    return () => subscription.unsubscribe();
  }, []);

  // Fetch user data when user changes
  useEffect(() => {
    if (state.user) {
      dispatch({ type: APP_ACTIONS.SET_USER_DATA_LOADING, payload: true });
      fetchUserData(state.user);
    }
  }, [state.user]);

  // Action creators
  const actions = {
    setActivePage: (page) => dispatch({ type: APP_ACTIONS.SET_ACTIVE_PAGE, payload: page }),
    openModal: (name, props = {}) => dispatch({ type: APP_ACTIONS.OPEN_MODAL, payload: { name, props } }),
    closeModal: () => dispatch({ type: APP_ACTIONS.CLOSE_MODAL }),
    signOut: async () => {
      try {
        await AuthService.signOut();
        dispatch({ type: APP_ACTIONS.RESET_USER_STATE });
      } catch (error) {
        console.error('Error signing out:', error);
      }
    }
  };

  const value = {
    ...state,
    ...actions
  };

  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
};

// Custom hook to use the app context
export const useApp = () => {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within an AppProvider');
  }
  return context;
};


--- FILE: src\contexts\index.js ---

export { AppProvider, useApp } from './AppContext';


--- FILE: src\hooks\index.js ---

export { useAssessments } from './useAssessments';
export { useKudos } from './useKudos';
export { useAdmin } from './useAdmin';
export { useTeam } from './useTeam';


--- FILE: src\hooks\useAdmin.js ---

import { useState, useEffect } from 'react';
import { AdminService } from '../services';

export const useAdmin = () => {
  const [employees, setEmployees] = useState([]);
  const [cycles, setCycles] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [employeesData, cyclesData] = await Promise.all([
        AdminService.getAllEmployees(),
        AdminService.getReviewCycles()
      ]);
      
      setEmployees(employeesData);
      setCycles(cyclesData);
    } catch (err) {
      console.error('Error fetching admin data:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  const createReviewCycle = async (cycleData) => {
    try {
      const result = await AdminService.createReviewCycle(cycleData);
      await fetchData(); // Refresh data
      return result;
    } catch (err) {
      console.error('Error creating review cycle:', err);
      throw err;
    }
  };

  const activateReviewCycle = async (cycleId) => {
    try {
      const result = await AdminService.activateReviewCycle(cycleId);
      await fetchData(); // Refresh data
      return result;
    } catch (err) {
      console.error('Error activating review cycle:', err);
      throw err;
    }
  };

  const refresh = () => {
    fetchData();
  };

  return {
    employees,
    cycles,
    loading,
    error,
    createReviewCycle,
    activateReviewCycle,
    refresh
  };
};


--- FILE: src\hooks\useAssessments.js ---

import { useState, useEffect } from 'react';
import { AssessmentService } from '../services';

export const useAssessments = () => {
  const [assessments, setAssessments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchAssessments = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await AssessmentService.getMyAssessments();
      setAssessments(data);
    } catch (err) {
      console.error('Error fetching assessments:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchAssessments();
  }, []);

  const refresh = () => {
    fetchAssessments();
  };

  return {
    assessments,
    loading,
    error,
    refresh
  };
};


--- FILE: src\hooks\useKudos.js ---

import { useState, useEffect } from 'react';
import { KudosService } from '../services';

export const useKudos = () => {
  const [kudos, setKudos] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchKudos = async () => {
    try {
      setLoading(true);
      setError(null);
      const data = await KudosService.getKudosWall();
      setKudos(data);
    } catch (err) {
      console.error('Error fetching kudos:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchKudos();
  }, []);

  const giveKudos = async (kudosData) => {
    try {
      await KudosService.giveKudos(kudosData);
      await fetchKudos(); // Refresh the list
    } catch (err) {
      console.error('Error giving kudos:', err);
      throw err;
    }
  };

  const refresh = () => {
    fetchKudos();
  };

  return {
    kudos,
    loading,
    error,
    giveKudos,
    refresh
  };
};


--- FILE: src\hooks\useTeam.js ---

import { useState, useEffect } from 'react';
import { TeamService } from '../services';

export const useTeam = () => {
  const [team, setTeam] = useState([]);
  const [teamAssessments, setTeamAssessments] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchTeamData = async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [teamData, assessmentsData] = await Promise.all([
        TeamService.getMyTeam(),
        TeamService.getTeamAssessments()
      ]);
      
      setTeam(teamData);
      setTeamAssessments(assessmentsData);
    } catch (err) {
      console.error('Error fetching team data:', err);
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchTeamData();
  }, []);

  const startReviewCycle = async (cycleData) => {
    try {
      const result = await TeamService.startReviewCycle(cycleData);
      await fetchTeamData(); // Refresh data
      return result;
    } catch (err) {
      console.error('Error starting review cycle:', err);
      throw err;
    }
  };

  const refresh = () => {
    fetchTeamData();
  };

  return {
    team,
    teamAssessments,
    loading,
    error,
    startReviewCycle,
    refresh
  };
};


--- FILE: src\services\AdminService.js ---

// AdminService.js - Service for admin employee management operations
import { supabase } from './supabaseClient';
import { supabaseAdmin } from './supabaseAdminClient';
import { validateEmployeeForm, validateReviewCycleForm } from '../utils/validation';
import logger from '../utils/secureLogger';
import csrfProtection from '../utils/csrfProtection';

export class AdminService {
  // Get all employees for admin management
  static async getAllEmployees() {
    try {
      const { data, error } = await supabase.rpc('get_all_employees_for_admin');
      if (error) throw error;
      
      // The function now returns JSON, so we need to parse it
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      
      // If it's already an array/object, return as is
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching employees:', error);
      
      // Try the backup simple function if the main one fails
      try {
        const { data: backupData, error: backupError } = await supabase.rpc('get_employees_simple');
        if (backupError) throw backupError;
        
        return typeof backupData === 'string' ? JSON.parse(backupData) : (backupData || []);
      } catch (backupErr) {
        console.error('Backup function also failed:', backupErr);
        throw new Error(`Failed to fetch employees: ${error.message}`);
      }
    }
  }

  // Get potential managers for dropdown
  static async getPotentialManagers() {
    try {
      const { data, error } = await supabase.rpc('get_potential_managers');
      if (error) throw error;
      
      // The function now returns JSON, so we need to parse it
      let managers;
      if (typeof data === 'string') {
        managers = JSON.parse(data);
      } else {
        managers = Array.isArray(data) ? data : (data || []);
      }
      
      return managers;
    } catch (error) {
      console.error('Error fetching potential managers:', error);
      throw new Error(`Failed to fetch managers: ${error.message}`);
    }
  }

  // Create new employee with security validation
  static async createEmployee(employeeData) {
    try {
      // Input validation and sanitization
      const validation = validateEmployeeForm(employeeData);
      if (!validation.isValid) {
        throw new Error(`Validation failed: ${Object.values(validation.errors).join(', ')}`);
      }

      // Use validated and sanitized data
      const secureData = validation.data;

      // Log security event
      logger.logUserAction('create_employee_attempt', null, { role: secureData.role });

      // Step 1: Create the Supabase auth user first using service role key
      console.log('Creating auth user with admin API...');
      
      const { data: authResponse, error: authError } = await supabaseAdmin.auth.admin.createUser({
        email: secureData.email,
        password: secureData.password,
        email_confirm: true, // Auto-confirm email
        user_metadata: {
          name: secureData.name,
          role: secureData.role
        }
      });

      if (authError) {
        console.error('Auth user creation failed:', authError);
        logger.logSecurity('auth_user_creation_failed', 'error', { error: authError.message });
        throw new Error(`Failed to create auth user: ${authError.message}`);
      }

      const authUser = authResponse.user;
      console.log('Auth user created successfully:', authUser.id);

      // Step 2: Insert into employees table with the auth user ID
      const { data: employee, error: dbError } = await supabase
        .from('employees')
        .insert([
          {
            user_id: authUser.id,
            name: secureData.name,
            email: secureData.email,
            job_title: secureData.jobTitle,
            role: secureData.role,
            manager_id: secureData.managerId || null,
            temp_password: secureData.password, // Store for reference
            must_change_password: true,
            is_active: true
          }
        ])
        .select()
        .single();

      if (dbError) {
        console.error('Employee record creation failed:', dbError);
        
        // Rollback: Delete the auth user since employee creation failed
        try {
          await supabaseAdmin.auth.admin.deleteUser(authUser.id);
          console.log('Rolled back auth user creation');
        } catch (rollbackError) {
          console.error('Failed to rollback auth user:', rollbackError);
        }
        
        logger.logSecurity('employee_record_creation_failed', 'error', { error: dbError.message });
        throw new Error(`Failed to create employee record: ${dbError.message}`);
      }

      logger.logUserAction('create_employee_success', null, { 
        employee_id: employee.id,
        auth_user_id: authUser.id,
        role: secureData.role
      });
      
      return {
        success: true,
        employee_id: employee.id,
        auth_user_id: authUser.id,
        message: 'Employee and auth account created successfully! User can login immediately.',
        next_steps: {
          can_login_immediately: true,
          login_credentials: {
            email: secureData.email,
            password: secureData.password
          }
        }
      };
    } catch (error) {
      logger.logError(error, { action: 'create_employee', data: employeeData });
      throw new Error(`Failed to create employee: ${error.message}`);
    }
  }

  // Update existing employee with security validation
  static async updateEmployee(employeeId, updates) {
    try {
      // Validate employee ID
      if (!employeeId) {
        throw new Error('Employee ID is required');
      }

      // Validate and sanitize only the fields being updated
      const validatedUpdates = {};
      
      if (updates.name !== undefined) {
        const nameValidation = validateEmployeeForm({ name: updates.name });
        if (!nameValidation.isValid && nameValidation.errors.name) {
          throw new Error(`Name validation failed: ${nameValidation.errors.name}`);
        }
        validatedUpdates.name = nameValidation.data?.name || updates.name;
      }

      if (updates.email !== undefined) {
        const emailValidation = validateEmployeeForm({ email: updates.email });
        if (!emailValidation.isValid && emailValidation.errors.email) {
          throw new Error(`Email validation failed: ${emailValidation.errors.email}`);
        }
        validatedUpdates.email = emailValidation.data?.email || updates.email;
      }

      if (updates.jobTitle !== undefined) {
        const jobTitleValidation = validateEmployeeForm({ jobTitle: updates.jobTitle });
        if (!jobTitleValidation.isValid && jobTitleValidation.errors.jobTitle) {
          throw new Error(`Job title validation failed: ${jobTitleValidation.errors.jobTitle}`);
        }
        validatedUpdates.jobTitle = jobTitleValidation.data?.jobTitle || updates.jobTitle;
      }

      if (updates.role !== undefined) {
        const roleValidation = validateEmployeeForm({ role: updates.role });
        if (!roleValidation.isValid && roleValidation.errors.role) {
          throw new Error(`Role validation failed: ${roleValidation.errors.role}`);
        }
        validatedUpdates.role = roleValidation.data?.role || updates.role;
      }

      if (updates.managerId !== undefined) {
        validatedUpdates.managerId = updates.managerId;
      }

      if (updates.isActive !== undefined) {
        validatedUpdates.isActive = updates.isActive;
      }

      // Log security event
      logger.logUserAction('update_employee_attempt', null, { 
        employee_id: employeeId,
        fields_updated: Object.keys(validatedUpdates)
      });

      // Use direct RPC call (CSRF protection is handled at middleware level)
      const { data: result, error: rpcError } = await supabase.rpc('update_employee', {
        p_employee_id: employeeId,
        p_name: validatedUpdates.name || null,
        p_email: validatedUpdates.email || null,
        p_job_title: validatedUpdates.jobTitle || null,
        p_role: validatedUpdates.role || null,
        p_manager_id: validatedUpdates.managerId || null,
        p_is_active: validatedUpdates.isActive !== undefined ? validatedUpdates.isActive : null
      });
      
      if (rpcError) throw rpcError;
      
      if (result?.error) {
        logger.logSecurity('employee_update_failed', 'warn', { 
          employee_id: employeeId,
          error: result.error 
        });
        throw new Error(result.error);
      }

      logger.logUserAction('update_employee_success', null, { 
        employee_id: employeeId,
        fields_updated: Object.keys(validatedUpdates)
      });
      
      return result;
    } catch (error) {
      logger.logError(error, { 
        action: 'update_employee', 
        employee_id: employeeId,
        updates: Object.keys(updates)
      });
      throw new Error(`Failed to update employee: ${error.message}`);
    }
  }

  // Check current user role for debugging
  static async checkCurrentRole() {
    try {
      const { data, error } = await supabase.rpc('get_my_role');
      if (error) throw error;
      return data;
    } catch (error) {
      console.error('Error checking role:', error);
      throw new Error(`Failed to check role: ${error.message}`);
    }
  }

  // Get review cycles (for useAdmin compatibility)
  static async getReviewCycles() {
    try {
      const { data, error } = await supabase
        .from('review_cycles')
        .select('*')
        .order('created_at', { ascending: false });
      
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching review cycles:', error);
      throw new Error(`Failed to fetch review cycles: ${error.message}`);
    }
  }

  // Get active review cycles with assessment status
  static async getActiveReviewCyclesWithStatus() {
    try {
      const { data, error } = await supabase.rpc('get_active_review_cycles_with_status');
      if (error) throw error;
      return data || [];
    } catch (error) {
      console.error('Error fetching active review cycles:', error);
      throw new Error(`Failed to fetch active review cycles: ${error.message}`);
    }
  }

  // Create review cycle with security validation
  static async createReviewCycle(cycleData) {
    try {
      // Input validation and sanitization
      const validation = validateReviewCycleForm(cycleData);
      if (!validation.isValid) {
        throw new Error(`Validation failed: ${Object.values(validation.errors).join(', ')}`);
      }

      const secureData = validation.data;

      // Log security event
      logger.logUserAction('create_review_cycle_attempt', null, { name: secureData.name });

      // Use secure RPC call with CSRF protection
      const result = await csrfProtection.secureRPC('create_simple_review_cycle', {
        p_name: secureData.name,
        p_start_date: secureData.startDate,
        p_end_date: secureData.endDate
      });
      
      if (result?.error) {
        logger.logSecurity('review_cycle_creation_failed', 'warn', { error: result.error });
        throw new Error(result.error);
      }

      logger.logUserAction('create_review_cycle_success', null, { 
        cycle_id: result.cycle_id,
        name: secureData.name 
      });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'create_review_cycle', data: cycleData });
      throw new Error(`Failed to create review cycle: ${error.message}`);
    }
  }

  // Activate review cycle with assessment creation
  static async activateReviewCycle(cycleId) {
    try {
      // Log security event
      logger.logUserAction('activate_review_cycle_attempt', null, { cycle_id: cycleId });

      // Use secure RPC call with CSRF protection
      const result = await csrfProtection.secureRPC('activate_review_cycle_with_assessments', {
        p_cycle_id: cycleId
      });
      
      if (result?.error) {
        logger.logSecurity('review_cycle_activation_failed', 'warn', { 
          cycle_id: cycleId,
          error: result.error 
        });
        throw new Error(result.error);
      }

      logger.logUserAction('activate_review_cycle_success', null, { 
        cycle_id: cycleId,
        assessments_created: result.assessments_created,
        cycle_name: result.cycle_name
      });
      
      return {
        success: true,
        message: `Review cycle activated successfully! Created ${result.assessments_created} assessments.`,
        data: result
      };
    } catch (error) {
      logger.logError(error, { action: 'activate_review_cycle', cycle_id: cycleId });
      throw new Error(`Failed to activate review cycle: ${error.message}`);
    }
  }

  // Close review cycle
  static async closeReviewCycle(cycleId) {
    try {
      // Log security event
      logger.logUserAction('close_review_cycle_attempt', null, { cycle_id: cycleId });

      // Use secure RPC call with CSRF protection
      const result = await csrfProtection.secureRPC('close_review_cycle', {
        p_cycle_id: cycleId
      });
      
      if (result?.error) {
        logger.logSecurity('review_cycle_close_failed', 'warn', { 
          cycle_id: cycleId,
          error: result.error 
        });
        throw new Error(result.error);
      }

      logger.logUserAction('close_review_cycle_success', null, { 
        cycle_id: cycleId,
        cycle_name: result.cycle_name,
        total_assessments: result.total_assessments,
        completed_assessments: result.completed_assessments
      });
      
      return {
        success: true,
        message: `Review cycle "${result.cycle_name}" closed successfully! ${result.completed_assessments}/${result.total_assessments} assessments were completed.`,
        data: result
      };
    } catch (error) {
      logger.logError(error, { action: 'close_review_cycle', cycle_id: cycleId });
      throw new Error(`Failed to close review cycle: ${error.message}`);
    }
  }

  // Get detailed review cycle information
  static async getReviewCycleDetails(cycleId) {
    try {
      const result = await csrfProtection.secureRPC('get_review_cycle_details', {
        p_cycle_id: cycleId
      });
      
      if (result?.error) {
        throw new Error(result.error);
      }

      return result;
    } catch (error) {
      logger.logError(error, { action: 'get_review_cycle_details', cycle_id: cycleId });
      throw new Error(`Failed to get review cycle details: ${error.message}`);
    }
  }

  // Generate invitation link/instructions
  static generateInvitationInstructions(employeeData, credentials) {
    const appUrl = window.location.origin;
    return {
      subject: `Welcome to EDGE - Employee Development & Growth Engine`,
      body: `Hi ${employeeData.name},

You've been added to the EDGE (Employee Development & Growth Engine) system as a ${employeeData.role}.

To get started:
1. Go to: ${appUrl}
2. Click "Sign Up" 
3. Use this email: ${employeeData.email}
4. Create your password (minimum 6 characters)

Your role: ${employeeData.role.charAt(0).toUpperCase() + employeeData.role.slice(1)}
${employeeData.managerId ? `Your manager will be available in the system once you log in.` : ''}

If you have any questions, please contact your administrator.

Welcome to the team!`,
      
      copyText: `Email: ${employeeData.email}\nRole: ${employeeData.role}\nApp URL: ${appUrl}`
    };
  }
}

export default AdminService;


--- FILE: src\services\assessmentService.js ---

import { supabase } from './supabaseClient';

export class AssessmentService {
  static async getMyAssessments() {
    try {
      console.log('Calling reliable get_my_assessments function');
      const { data, error } = await supabase.rpc('get_my_assessments');
      
      if (error) {
        console.error('Error from get_my_assessments:', error);
        throw error;
      }
      
      console.log('Assessments received:', data);
      return data || [];
    } catch (error) {
      console.error('Error in getMyAssessments:', error);
      throw error;
    }
  }

  static async getAssessmentById(assessmentId) {
    const { data, error } = await supabase.rpc('get_assessment_details', {
      p_assessment_id: assessmentId
    });
    if (error) throw error;
    return data;
  }

  static async updateAssessment(assessmentId, updates) {
    try {
      console.log('Updating assessment:', assessmentId, 'with updates:', updates);
      
      const { data, error } = await supabase.rpc('update_assessment', {
        p_assessment_id: assessmentId,
        p_updates: updates
      });
      
      if (error) {
        console.error('Database error updating assessment:', error);
        throw error;
      }
      
      console.log('Update response:', data);
      
      // Check if the response indicates an error from the database function
      if (data && typeof data === 'object' && data.error) {
        console.error('Function returned error:', data.error);
        throw new Error(data.error);
      }
      
      return data;
    } catch (error) {
      console.error('Error in updateAssessment:', error);
      throw error;
    }
  }

  static async submitAssessment(assessmentId) {
    // Direct table update to change status to employee_complete
    const { data, error } = await supabase
      .from('assessments')
      .update({ 
        self_assessment_status: 'employee_complete',
        updated_at: new Date().toISOString()
      })
      .eq('id', assessmentId)
      .select();

    if (error) throw error;
    return data;
  }

  static async submitManagerReview(assessmentId, feedbackData) {
    try {
      console.log('submitManagerReview called for assessment ID:', assessmentId);
      console.log('Submitting manager review with full feedback data:', feedbackData);
      
      // Use the new atomic submit_manager_review function
      const { data, error } = await supabase.rpc('submit_manager_review', {
        p_assessment_id: assessmentId,
        p_feedback: feedbackData
      });

      if (error) {
        console.error('Error in submitManagerReview:', error);
        throw error;
      }
      
      console.log('submitManagerReview success, response:', data);
      
      // Check if the response indicates an error from the database function
      if (data && typeof data === 'object' && data.error) {
        console.error('Function returned error:', data.error);
        throw new Error(data.error);
      }
      
      return data;
    } catch (error) {
      console.error('submitManagerReview failed:', error);
      throw error;
    }
  }

  static async acknowledgeReview(assessmentId) {
    // Direct table update to mark review as acknowledged by employee
    const { data, error } = await supabase
      .from('assessments')
      .update({ 
        employee_acknowledgment: true,
        review_status: 'completed',
        updated_at: new Date().toISOString()
      })
      .eq('id', assessmentId)
      .select();

    if (error) throw error;
    return data;
  }
}


--- FILE: src\services\authService.js ---

import { supabase } from './supabaseClient';

export class AuthService {
  static async getSession() {
    const { data: { session }, error } = await supabase.auth.getSession();
    if (error) throw error;
    return session;
  }

  static async signOut() {
    const { error } = await supabase.auth.signOut();
    if (error) throw error;
  }

  static onAuthStateChange(callback) {
    return supabase.auth.onAuthStateChange(callback);
  }

  static async getUserRole(userEmail) {
    try {
      console.log('ðŸ” Looking up user role for:', userEmail);
      
      // First try to get role from employees table
      const { data: employee, error } = await supabase
        .from('employees')
        .select('role, name')
        .eq('email', userEmail.toLowerCase())
        .single();

      if (employee && !error) {
        console.log('âœ… Found user in employees table:', employee);
        return {
          role: employee.role,
          name: employee.name
        };
      }

      console.log('âš ï¸ User not found in employees table, using fallback logic');
      
      // Fallback to hardcoded logic for existing test users
      if (userEmail === 'admin@lucerne.com') {
        return { role: 'admin', name: 'Admin' };
      } else if (userEmail === 'manager@lucerne.com') {
        return { role: 'manager', name: 'Manager' };
      } else if (userEmail === 'employee1@lucerne.com') {
        return { role: 'employee', name: 'Employee 1' };
      }
      
      // Default fallback
      return {
        role: 'employee',
        name: userEmail.split('@')[0]
      };
    } catch (err) {
      console.error('âŒ Error fetching user role:', err);
      // Fallback on error
      return {
        role: 'employee',
        name: userEmail.split('@')[0]
      };
    }
  }
}


--- FILE: src\services\feedbackService.js ---

import { supabase } from './supabaseClient';

export class FeedbackService {
  static async giveFeedback(recipientId, feedbackType, message, category = 'general', isAnonymous = false) {
    const { data, error } = await supabase.rpc('give_peer_feedback', {
      p_recipient_id: recipientId,
      p_feedback_type: feedbackType,
      p_message: message,
      p_category: category,
      p_is_anonymous: isAnonymous
    });
    if (error) throw error;
    return data;
  }

  static async getEmployeesForFeedback() {
    const { data, error } = await supabase.rpc('get_employees_for_feedback');
    if (error) throw error;
    return data || [];
  }

  static async getFeedbackWall(limit = 50, feedbackType = null) {
    const { data, error } = await supabase.rpc('get_feedback_wall', {
      p_limit: limit,
      p_feedback_type: feedbackType
    });
    if (error) throw error;
    return data || [];
  }

  static async getMyFeedbackReceived(limit = 20) {
    const { data, error } = await supabase.rpc('get_my_feedback_received', {
      p_limit: limit
    });
    if (error) throw error;
    return data || [];
  }

  static async markFeedbackHelpful(feedbackId) {
    const { data, error } = await supabase.rpc('mark_feedback_helpful', {
      p_feedback_id: feedbackId
    });
    if (error) throw error;
    return data;
  }
}


--- FILE: src\services\index.js ---

export { supabase } from './supabaseClient';
export { AuthService } from './authService';
export { SecureAuthService } from './SecureAuthService';
export { AssessmentService } from './assessmentService';
export { KudosService } from './kudosService';
export { AdminService } from './AdminService';
export { TeamService } from './teamService';
export { FeedbackService } from './feedbackService';
export { NotificationService } from './NotificationService';
export { ManagerPlaybookService } from './ManagerPlaybookService';


--- FILE: src\services\kudosService.js ---

import { supabase } from './supabaseClient';

export class KudosService {
  static async getKudosWall() {
    const { data, error } = await supabase.rpc('get_kudos_wall');
    if (error) throw error;
    return data || [];
  }

  static async giveKudos(kudosData) {
    const { data, error } = await supabase.rpc('give_kudos', {
      p_recipient_id: kudosData.recipientId,
      p_core_value: kudosData.coreValue,
      p_message: kudosData.message
    });
    if (error) throw error;
    return data;
  }

  static async getKudosForEmployee(employeeId) {
    const { data, error } = await supabase.rpc('get_employee_kudos', {
      p_employee_id: employeeId
    });
    if (error) throw error;
    return data || [];
  }
}


--- FILE: src\services\ManagerPlaybookService.js ---

// ManagerPlaybookService.js - Service for manager private notes functionality
import { supabase } from './supabaseClient';
import logger from '../utils/secureLogger';

export class ManagerPlaybookService {
  // Get manager's direct reports with note counts
  static async getManagerEmployees() {
    try {
      const { data, error } = await supabase.rpc('get_manager_employees');
      if (error) throw error;
      
      // Parse JSON response
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching manager employees:', error);
      throw new Error(`Failed to fetch employees: ${error.message}`);
    }
  }

  // Get all notes for a specific employee
  static async getEmployeeNotes(employeeId) {
    try {
      if (!employeeId) {
        throw new Error('Employee ID is required');
      }

      const { data, error } = await supabase.rpc('get_employee_notes', {
        p_employee_id: employeeId
      });
      
      if (error) throw error;
      
      // Check for authorization error in response
      if (data?.error) {
        throw new Error(data.error);
      }
      
      // Parse JSON response
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching employee notes:', error);
      throw new Error(`Failed to fetch notes: ${error.message}`);
    }
  }

  // Save a new manager note
  static async saveManagerNote(noteData) {
    try {
      // Validate required fields
      if (!noteData.employee_id) {
        throw new Error('Employee ID is required');
      }
      if (!noteData.title?.trim()) {
        throw new Error('Note title is required');
      }
      if (!noteData.content?.trim()) {
        throw new Error('Note content is required');
      }

      logger.logUserAction('save_manager_note_attempt', null, { 
        employee_id: noteData.employee_id,
        category: noteData.category 
      });

      const { data: result, error } = await supabase.rpc('save_manager_note', {
        p_employee_id: noteData.employee_id,
        p_title: noteData.title.trim(),
        p_content: noteData.content.trim(),
        p_category: noteData.category || 'general',
        p_priority: noteData.priority || 'medium'
      });
      
      if (error) throw error;
      
      if (result?.error) {
        logger.logSecurity('manager_note_save_failed', 'warn', { error: result.error });
        throw new Error(result.error);
      }

      logger.logUserAction('save_manager_note_success', null, { 
        employee_id: noteData.employee_id,
        note_id: result.note_id 
      });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'save_manager_note', data: noteData });
      throw new Error(`Failed to save note: ${error.message}`);
    }
  }

  // Update an existing manager note
  static async updateManagerNote(noteId, noteData) {
    try {
      // Validate required fields
      if (!noteId) {
        throw new Error('Note ID is required');
      }
      if (!noteData.title?.trim()) {
        throw new Error('Note title is required');
      }
      if (!noteData.content?.trim()) {
        throw new Error('Note content is required');
      }

      logger.logUserAction('update_manager_note_attempt', null, { note_id: noteId });

      const { data: result, error } = await supabase.rpc('update_manager_note', {
        p_note_id: noteId,
        p_title: noteData.title.trim(),
        p_content: noteData.content.trim(),
        p_category: noteData.category || 'general',
        p_priority: noteData.priority || 'medium'
      });
      
      if (error) throw error;
      
      if (result?.error) {
        logger.logSecurity('manager_note_update_failed', 'warn', { 
          note_id: noteId,
          error: result.error 
        });
        throw new Error(result.error);
      }

      logger.logUserAction('update_manager_note_success', null, { note_id: noteId });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'update_manager_note', note_id: noteId });
      throw new Error(`Failed to update note: ${error.message}`);
    }
  }

  // Delete a manager note
  static async deleteManagerNote(noteId) {
    try {
      if (!noteId) {
        throw new Error('Note ID is required');
      }

      logger.logUserAction('delete_manager_note_attempt', null, { note_id: noteId });

      const { data: result, error } = await supabase.rpc('delete_manager_note', {
        p_note_id: noteId
      });
      
      if (error) throw error;
      
      if (result?.error) {
        logger.logSecurity('manager_note_delete_failed', 'warn', { 
          note_id: noteId,
          error: result.error 
        });
        throw new Error(result.error);
      }

      logger.logUserAction('delete_manager_note_success', null, { note_id: noteId });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'delete_manager_note', note_id: noteId });
      throw new Error(`Failed to delete note: ${error.message}`);
    }
  }
}

export default ManagerPlaybookService;


--- FILE: src\services\NotificationService.js ---

// NotificationService.js - Service for managing user notifications and workflow events
import { supabase } from './supabaseClient';
import logger from '../utils/secureLogger';

export class NotificationService {
  // Get all notifications for current user
  static async getUserNotifications() {
    try {
      const { data, error } = await supabase.rpc('get_user_notifications');
      if (error) throw error;
      
      // Parse JSON response
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching user notifications:', error);
      throw new Error(`Failed to fetch notifications: ${error.message}`);
    }
  }

  // Get count of unread notifications
  static async getUnreadCount() {
    try {
      const { data, error } = await supabase.rpc('get_unread_notification_count');
      if (error) throw error;
      return data || 0;
    } catch (error) {
      console.error('Error fetching unread count:', error);
      return 0;
    }
  }

  // Mark a notification as read
  static async markAsRead(notificationId) {
    try {
      if (!notificationId) {
        throw new Error('Notification ID is required');
      }

      const { data, error } = await supabase.rpc('mark_notification_read', {
        p_notification_id: notificationId
      });
      
      if (error) throw error;
      
      if (data?.error) {
        throw new Error(data.error);
      }
      
      return data;
    } catch (error) {
      console.error('Error marking notification as read:', error);
      throw new Error(`Failed to mark notification as read: ${error.message}`);
    }
  }

  // Mark all notifications as read for current user
  static async markAllAsRead() {
    try {
      const notifications = await this.getUserNotifications();
      const unreadNotifications = notifications.filter(n => !n.is_read);
      
      // Mark each unread notification as read
      const promises = unreadNotifications.map(notification => 
        this.markAsRead(notification.id)
      );
      
      await Promise.all(promises);
      return { success: true, count: unreadNotifications.length };
    } catch (error) {
      console.error('Error marking all notifications as read:', error);
      throw new Error(`Failed to mark all notifications as read: ${error.message}`);
    }
  }

  // Submit a development plan
  static async submitDevelopmentPlan(planData) {
    try {
      // Validate required fields
      if (!planData.title?.trim()) {
        throw new Error('Plan title is required');
      }
      if (!planData.goals || planData.goals.length === 0) {
        throw new Error('At least one goal is required');
      }

      logger.logUserAction('submit_development_plan_attempt', null, { 
        title: planData.title 
      });

      const { data: result, error } = await supabase.rpc('submit_development_plan', {
        p_title: planData.title.trim(),
        p_description: planData.description?.trim() || '',
        p_goals: JSON.stringify(planData.goals),
        p_skills_to_develop: JSON.stringify(planData.skills_to_develop || []),
        p_timeline: planData.timeline?.trim() || ''
      });
      
      if (error) throw error;
      
      if (result?.error) {
        logger.logSecurity('development_plan_submit_failed', 'warn', { error: result.error });
        throw new Error(result.error);
      }

      logger.logUserAction('submit_development_plan_success', null, { 
        plan_id: result.plan_id 
      });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'submit_development_plan', data: planData });
      throw new Error(`Failed to submit development plan: ${error.message}`);
    }
  }

  // Get development plans for current user
  static async getDevelopmentPlans() {
    try {
      const { data, error } = await supabase.rpc('get_development_plans');
      if (error) throw error;
      
      // Parse JSON response
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching development plans:', error);
      throw new Error(`Failed to fetch development plans: ${error.message}`);
    }
  }

  // Real-time subscription to notifications
  static subscribeToNotifications(userId, callback) {
    try {
      const subscription = supabase
        .channel('notifications')
        .on(
          'postgres_changes',
          {
            event: 'INSERT',
            schema: 'public',
            table: 'notifications',
            filter: `recipient_id=eq.${userId}`
          },
          callback
        )
        .subscribe();

      return subscription;
    } catch (error) {
      console.error('Error subscribing to notifications:', error);
      return null;
    }
  }

  // Unsubscribe from real-time notifications
  static unsubscribeFromNotifications(subscription) {
    if (subscription) {
      supabase.removeChannel(subscription);
    }
  }

  // Helper function to get notification icon based on type
  static getNotificationIcon(type) {
    const iconMap = {
      'review_cycle_opened': 'ðŸ“‹',
      'assessment_submitted': 'âœ…',
      'manager_review_ready': 'ðŸ‘¨â€ðŸ’¼',
      'manager_review_completed': 'ðŸŽ‰',
      'development_plan_submitted': 'ðŸ“ˆ',
      'development_plan_reviewed': 'âœï¸',
      'assessment_overdue': 'âš ï¸',
      'review_reminder': 'ðŸ””'
    };
    return iconMap[type] || 'ðŸ“¢';
  }

  // Helper function to get notification color based on type
  static getNotificationColor(type) {
    const colorMap = {
      'review_cycle_opened': 'blue',
      'assessment_submitted': 'green',
      'manager_review_ready': 'orange',
      'manager_review_completed': 'green',
      'development_plan_submitted': 'purple',
      'development_plan_reviewed': 'blue',
      'assessment_overdue': 'red',
      'review_reminder': 'yellow'
    };
    return colorMap[type] || 'gray';
  }

  // Get development plans for manager review
  static async getDevelopmentPlansForReview() {
    try {
      const { data, error } = await supabase.rpc('get_development_plans_for_review');
      if (error) throw error;
      
      // Parse JSON response
      if (typeof data === 'string') {
        return JSON.parse(data);
      }
      return Array.isArray(data) ? data : (data || []);
    } catch (error) {
      console.error('Error fetching development plans for review:', error);
      throw new Error(`Failed to fetch development plans for review: ${error.message}`);
    }
  }

  // Review a development plan (manager function)
  static async reviewDevelopmentPlan(planId, status, feedback) {
    try {
      if (!planId) {
        throw new Error('Plan ID is required');
      }
      if (!status || !['approved', 'needs_revision', 'under_review'].includes(status)) {
        throw new Error('Valid status is required (approved, needs_revision, or under_review)');
      }

      logger.logUserAction('review_development_plan_attempt', null, { 
        plan_id: planId,
        status: status 
      });

      const { data: result, error } = await supabase.rpc('review_development_plan', {
        p_plan_id: planId,
        p_status: status,
        p_manager_feedback: feedback || ''
      });
      
      if (error) throw error;
      
      if (result?.error) {
        logger.logSecurity('development_plan_review_failed', 'warn', { error: result.error });
        throw new Error(result.error);
      }

      logger.logUserAction('review_development_plan_success', null, { 
        plan_id: planId,
        status: status
      });
      
      return result;
    } catch (error) {
      logger.logError(error, { action: 'review_development_plan', plan_id: planId });
      throw new Error(`Failed to review development plan: ${error.message}`);
    }
  }

  // Get dashboard statistics using the new unified function
  static async getDashboardStats(userRole) {
    try {
      console.log(`Calling unified get_dashboard_stats for role: ${userRole}`);
      
      const { data, error } = await supabase.rpc('get_dashboard_stats', {
        p_role: userRole
      });
      
      if (error) {
        console.error('Database error from get_dashboard_stats:', error);
        throw error;
      }
      
      console.log('Dashboard stats received:', data);
      return data || {};
    } catch (error) {
      console.error('Error fetching dashboard stats:', error);
      throw new Error(`Failed to fetch dashboard statistics: ${error.message}`);
    }
  }



  // Helper function to format notification time
  static formatNotificationTime(timestamp) {
    const now = new Date();
    const time = new Date(timestamp);
    const diffInMinutes = Math.floor((now - time) / (1000 * 60));
    
    if (diffInMinutes < 1) return 'Just now';
    if (diffInMinutes < 60) return `${diffInMinutes}m ago`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `${diffInHours}h ago`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    if (diffInDays < 7) return `${diffInDays}d ago`;
    
    return time.toLocaleDateString();
  }
}

export default NotificationService;


--- FILE: src\services\SecureAuthService.js ---

// SecureAuthService.js - Secure authentication service with server-side validation
import { supabase } from './supabaseClient';

export class SecureAuthService {
  // Get current user session with server-side validation
  static async getCurrentSession() {
    try {
      const { data, error } = await supabase.rpc('get_current_user_session');
      if (error) throw error;
      
      return {
        ...data,
        isAuthenticated: data?.authenticated || false,
        user: data?.authenticated ? {
          id: data.user_id,
          name: data.name,
          email: data.email,
          role: data.role,
          jobTitle: data.job_title
        } : null
      };
    } catch (error) {
      console.error('Session validation failed:', error);
      return {
        isAuthenticated: false,
        user: null,
        error: error.message
      };
    }
  }

  // Get user role with server-side validation
  static async getUserRole() {
    try {
      const { data, error } = await supabase.rpc('get_current_user_role');
      if (error) throw error;
      
      if (!data?.authorized) {
        throw new Error(data?.error || 'Unauthorized access');
      }
      
      return {
        role: data.role,
        permissions: data.permissions || [],
        employeeId: data.employee_id,
        name: data.name
      };
    } catch (error) {
      console.error('Role validation failed:', error);
      throw new Error('Unable to verify user permissions');
    }
  }

  // Check if user has specific permission
  static async checkPermission(permission) {
    try {
      const { data, error } = await supabase.rpc('check_user_permission', {
        required_permission: permission
      });
      
      if (error) throw error;
      return data === true;
    } catch (error) {
      console.error('Permission check failed:', error);
      return false;
    }
  }

  // Secure sign in with validation
  static async signIn(email, password) {
    try {
      // Input validation
      const validationError = this.validateCredentials(email, password);
      if (validationError) {
        throw new Error(validationError);
      }

      // Attempt sign in
      const { data, error } = await supabase.auth.signInWithPassword({
        email: this.sanitizeEmail(email),
        password: password
      });

      if (error) throw error;

      // Validate session server-side
      const session = await this.getCurrentSession();
      if (!session.isAuthenticated) {
        throw new Error('Authentication validation failed');
      }

      // Log successful login
      await this.logSecurityEvent('user_login', 'authentication', true);

      return {
        success: true,
        user: session.user,
        session: data.session
      };
    } catch (error) {
      // Log failed login attempt
      await this.logSecurityEvent('user_login_failed', 'authentication', false);
      
      throw new Error(`Sign in failed: ${error.message}`);
    }
  }

  // Secure sign out
  static async signOut() {
    try {
      // Log logout
      await this.logSecurityEvent('user_logout', 'authentication', true);
      
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
      
      return { success: true };
    } catch (error) {
      console.error('Sign out error:', error);
      throw new Error('Sign out failed');
    }
  }

  // Input validation for credentials
  static validateCredentials(email, password) {
    if (!email || !email.trim()) {
      return 'Email is required';
    }

    if (!this.isValidEmail(email)) {
      return 'Invalid email format';
    }

    if (!password) {
      return 'Password is required';
    }

    if (password.length < 6) {
      return 'Password must be at least 6 characters';
    }

    return null;
  }

  // Email validation
  static isValidEmail(email) {
    const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(email.trim());
  }

  // Email sanitization
  static sanitizeEmail(email) {
    return email.trim().toLowerCase();
  }

  // Log security events (server-side)
  static async logSecurityEvent(action, resource = null, success = true) {
    try {
      await supabase.rpc('log_security_event', {
        p_action: action,
        p_resource: resource,
        p_success: success
      });
    } catch (error) {
      // Don't throw - logging should not break main flow
      console.error('Failed to log security event:', error);
    }
  }

  // Check if user is admin (with server validation)
  static async isAdmin() {
    return await this.checkPermission('admin');
  }

  // Check if user is manager or admin
  static async canManageTeam() {
    return await this.checkPermission('manage_team');
  }

  // Check if user can manage other users
  static async canManageUsers() {
    return await this.checkPermission('manage_users');
  }

  // Get current user's permissions
  static async getUserPermissions() {
    try {
      const roleData = await this.getUserRole();
      return roleData.permissions || [];
    } catch (error) {
      console.error('Failed to get permissions:', error);
      return [];
    }
  }

  // Validate current session periodically
  static async validateSession() {
    try {
      const session = await this.getCurrentSession();
      return session.isAuthenticated;
    } catch (error) {
      console.error('Session validation failed:', error);
      return false;
    }
  }

  // Get secure user data for UI (no sensitive info)
  static async getSecureUserData() {
    try {
      const session = await this.getCurrentSession();
      if (!session.isAuthenticated) {
        return null;
      }

      return {
        id: session.user.id,
        name: session.user.name,
        email: session.user.email.replace(/(.{2}).*@/, '$1***@'), // Mask email for display
        role: session.user.role,
        jobTitle: session.user.jobTitle
      };
    } catch (error) {
      console.error('Failed to get secure user data:', error);
      return null;
    }
  }
}

export default SecureAuthService;


--- FILE: src\services\supabaseAdminClient.js ---

// supabaseAdminClient.js - Admin client with service role key for admin operations
import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseServiceRoleKey = process.env.REACT_APP_SUPABASE_SERVICE_ROLE_KEY;

if (!supabaseUrl || !supabaseServiceRoleKey) {
  throw new Error('Missing Supabase environment variables for admin client');
}

// Create admin client with service role key
export const supabaseAdmin = createClient(supabaseUrl, supabaseServiceRoleKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

// Note: This should only be used for admin operations like creating users
// âš ï¸ WARNING: Service role key has full database access - use carefully!
export default supabaseAdmin;


--- FILE: src\services\supabaseClient.js ---

import { createClient } from '@supabase/supabase-js';

const supabaseUrl = process.env.REACT_APP_SUPABASE_URL;
const supabaseAnonKey = process.env.REACT_APP_SUPABASE_ANON_KEY;

export const supabase = createClient(supabaseUrl, supabaseAnonKey);


--- FILE: src\services\teamService.js ---

import { supabase } from './supabaseClient';

export class TeamService {
  static async getMyTeam() {
    try {
      console.log('Calling reliable get_my_team function');
      const { data, error } = await supabase.rpc('get_my_team');
      
      if (error) {
        console.error('Error from get_my_team:', error);
        throw error;
      }
      
      console.log('Team data received:', data);
      return data || [];
    } catch (error) {
      console.error('Error in getMyTeam:', error);
      throw error;
    }
  }

  static async getTeamAssessments() {
    try {
      console.log('Calling reliable get_team_assessments function');
      const { data, error } = await supabase.rpc('get_team_assessments');
      
      if (error) {
        console.error('Error from get_team_assessments:', error);
        throw error;
      }
      
      console.log('Team assessments received:', data);
      return data || [];
    } catch (error) {
      console.error('Error in getTeamAssessments:', error);
      throw error;
    }
  }

  static async startReviewCycle(cycleData) {
    try {
      const { data, error } = await supabase.rpc('start_review_cycle', {
        p_cycle_name: cycleData.cycleName,
        p_employee_ids: cycleData.employeeIds,
        p_due_date: cycleData.dueDate
      });
      if (error) {
        if (error.code === 'PGRST202') {
          console.warn('start_review_cycle function not found');
          return { success: false, error: 'Review cycle function not implemented yet' };
        }
        throw error;
      }
      return data;
    } catch (error) {
      if (error.code === 'PGRST202') {
        console.warn('start_review_cycle function not found');
        return { success: false, error: 'Review cycle function not implemented yet' };
      }
      throw error;
    }
  }
}


--- FILE: src\types\index.ts ---

// Core TypeScript definitions for EDGE application

export interface User {
  id: string;
  email: string;
  created_at: string;
  updated_at: string;
}

export interface Employee {
  id: string;
  user_id: string | null;
  name: string;
  email: string;
  job_title?: string;
  role: 'employee' | 'manager' | 'admin';
  manager_id?: string;
  is_active: boolean;
  created_at: string;
  updated_at: string;
}

export interface ReviewCycle {
  id: string;
  name: string;
  description?: string;
  start_date: string;
  end_date: string;
  status: 'upcoming' | 'active' | 'closed';
  created_by: string;
  created_at: string;
}

export interface Assessment {
  id: string;
  employee_id: string;
  cycle_id: string;
  self_assessment_status: 'not_started' | 'in_progress' | 'submitted';
  manager_review_status: 'pending' | 'in_progress' | 'completed';
  self_assessment_data?: Record<string, any>;
  manager_review_data?: Record<string, any>;
  due_date: string;
  created_at: string;
  updated_at: string;
}

export interface DevelopmentPlan {
  id: string;
  employee_id: string;
  title: string;
  description?: string;
  goals: string; // JSON string
  skills_to_develop: string; // JSON string
  timeline?: string;
  status: 'draft' | 'submitted' | 'under_review' | 'approved' | 'needs_revision';
  manager_feedback?: string;
  manager_reviewed_at?: string;
  manager_reviewed_by?: string;
  created_at: string;
  updated_at: string;
}

export interface Goal {
  goal: string;
  timeline?: string;
  priority?: 'low' | 'medium' | 'high';
}

export interface Skill {
  skill: string;
  reason?: string;
}

export interface Notification {
  id: string;
  recipient_id: string;
  sender_id?: string;
  type: string;
  title: string;
  message: string;
  data?: Record<string, any>;
  read_at?: string;
  created_at: string;
}

export interface Feedback {
  id: string;
  sender_id: string;
  recipient_id: string;
  feedback_text: string;
  feedback_type: 'positive' | 'constructive' | 'general';
  visibility: 'private' | 'manager' | 'public';
  created_at: string;
}

export interface Kudo {
  id: string;
  sender_id: string;
  recipient_id: string;
  message: string;
  badge_type: 'teamwork' | 'innovation' | 'leadership' | 'dedication' | 'excellence';
  visibility: 'public' | 'private';
  created_at: string;
}

export interface ManagerNote {
  id: string;
  manager_id: string;
  employee_id: string;
  note_text: string;
  note_type: 'general' | 'performance' | 'goal' | 'development';
  created_at: string;
  updated_at: string;
}

// Component Props Types
export interface ButtonProps {
  variant?: 'primary' | 'secondary' | 'danger' | 'ghost';
  size?: 'sm' | 'md' | 'lg';
  disabled?: boolean;
  loading?: boolean;
  onClick?: () => void;
  children: React.ReactNode;
  className?: string;
  type?: 'button' | 'submit' | 'reset';
}

export interface LoadingSpinnerProps {
  size?: 'sm' | 'md' | 'lg';
  message?: string;
  className?: string;
}

export interface ErrorMessageProps {
  error: string;
  title?: string;
  onRetry?: () => void;
  className?: string;
}

export interface StatusBadgeProps {
  status: string;
  color?: 'gray' | 'blue' | 'green' | 'yellow' | 'red' | 'purple' | 'cyan';
  size?: 'sm' | 'md';
}

export interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  size?: 'sm' | 'md' | 'lg' | 'xl';
}

// Form Types
export interface EmployeeFormData {
  name: string;
  email: string;
  jobTitle: string;
  role: 'employee' | 'manager' | 'admin';
  managerId?: string;
  isActive: boolean;
  tempPassword?: string;
}

export interface ValidationResult {
  isValid: boolean;
  errors: Record<string, string>;
  data: any;
}

// API Response Types
export interface ApiResponse<T = any> {
  success: boolean;
  data?: T;
  error?: string;
  message?: string;
}

export interface DashboardStats {
  employees?: {
    total: number;
    by_role: Record<string, number>;
    team_members?: Employee[];
    total_members?: number;
  };
  review_cycles?: {
    total: number;
    active: number;
    upcoming: number;
    closed: number;
  };
  assessments?: {
    total: number;
    completed: number;
    pending: number;
    manager_reviews_pending: number;
    manager_reviews_completed: number;
    completion_rate: number;
    team_completion_rate?: number;
    pending_reviews?: number;
  };
  development_plans?: {
    total: number;
    submitted: number;
    under_review: number;
    approved: number;
    needs_revision: number;
    pending_review?: number;
  };
  notifications?: {
    total_sent: number;
    unread: number;
    unread_count?: number;
  };
  recent_activity?: Array<{
    type: string;
    description: string;
    timestamp: string;
    employee_name: string;
  }>;
  profile?: {
    name: string;
    job_title: string;
    email: string;
    role: string;
    manager_name?: string;
  };
}

// App Context Types
export interface AppState {
  user: User | null;
  userRole: string | null;
  userName: string | null;
  userDataLoading: boolean;
  activePage: {
    name: string;
    props: Record<string, any>;
  };
  modal: {
    isOpen: boolean;
    name: string | null;
    props: Record<string, any>;
  };
}

export interface AppContextValue extends AppState {
  setActivePage: (page: { name: string; props?: Record<string, any> }) => void;
  openModal: (name: string, props?: Record<string, any>) => void;
  closeModal: () => void;
  signOut: () => Promise<void>;
}

// Service Types
export interface ServiceResponse<T = any> {
  data?: T;
  error?: string;
  success: boolean;
}

// Utility Types
export type UserRole = 'employee' | 'manager' | 'admin';
export type AssessmentStatus = 'not_started' | 'in_progress' | 'submitted';
export type ReviewStatus = 'pending' | 'in_progress' | 'completed';
export type DevelopmentPlanStatus = 'draft' | 'submitted' | 'under_review' | 'approved' | 'needs_revision';
export type NotificationType = 
  | 'review_cycle_opened'
  | 'assessment_submitted'
  | 'manager_review_ready'
  | 'manager_review_completed'
  | 'development_plan_submitted'
  | 'development_plan_reviewed'
  | 'assessment_overdue'
  | 'review_reminder';


--- FILE: src\utils\assessmentUtils.js ---

// Assessment-related utility functions
import { Calendar, Clock, CheckCircle, Award, User } from 'lucide-react';

export const getStatusDisplay = (assessment) => {
  // Use self_assessment_status if available, otherwise fall back to status
  const currentStatus = assessment.self_assessment_status || assessment.status;
  const cycleStatus = assessment.review_cycle_status;
  const managerReviewStatus = assessment.manager_review_status;
  const employeeAcknowledgment = assessment.employee_acknowledgment;
  
  // If the review cycle is closed, none of the assessments should be considered "active"
  const isCycleClosed = cycleStatus === 'closed';
  
  // Special handling for different workflow states
  if (isCycleClosed) {
    return {
      label: 'Review Cycle Closed', 
      color: 'text-gray-400',
      bgColor: 'bg-gray-600',
      actionLabel: 'View History',
      description: 'This review cycle has been closed',
      icon: Calendar,
      isActive: false
    };
  }
  
  // Handle manager review completion and employee acknowledgment workflow
  if (managerReviewStatus === 'completed' && !employeeAcknowledgment) {
    return {
      label: 'Manager Review Complete - Acknowledge Required', 
      color: 'text-blue-400',
      bgColor: 'bg-blue-600',
      actionLabel: 'Review & Acknowledge',
      description: 'Your manager has completed their review. Please review and acknowledge.',
      icon: Award,
      isActive: cycleStatus === 'active'
    };
  }
  
  if (managerReviewStatus === 'completed' && employeeAcknowledgment) {
    return {
      label: 'Review Process Complete', 
      color: 'text-green-400',
      bgColor: 'bg-green-600',
      actionLabel: 'View Results',
      description: 'Your performance review is fully complete',
      icon: CheckCircle,
      isActive: false
    };
  }
  
  const statusMap = {
    'not_started': { 
      label: 'Not Started', 
      color: 'text-gray-400',
      bgColor: 'bg-gray-600',
      actionLabel: 'Start',
      description: 'Begin your self-assessment',
      icon: Calendar,
      isActive: cycleStatus === 'active'  // Only active if cycle is active
    },
    'in_progress': { 
      label: 'In Progress', 
      color: 'text-yellow-400',
      bgColor: 'bg-yellow-600',
      actionLabel: 'Continue',
      description: 'Complete your self-assessment',
      icon: Clock,
      isActive: cycleStatus === 'active'  // Only active if cycle is active
    },
    'employee_complete': { 
      label: 'Waiting for Manager Review', 
      color: 'text-blue-400',
      bgColor: 'bg-blue-600',
      actionLabel: 'View',
      description: 'Your manager is reviewing your assessment',
      icon: User,
      isActive: cycleStatus === 'active'  // Only active if cycle is active
    },
    'manager_complete': { 
      label: 'Manager Review Complete', 
      color: 'text-purple-400',
      bgColor: 'bg-purple-600',
      actionLabel: 'View',
      description: 'Review completed by manager',
      icon: Award,
      isActive: cycleStatus === 'active'  // Only active if cycle is active
    },
    'finalized': { 
      label: 'Finalized', 
      color: 'text-green-400',
      bgColor: 'bg-green-600',
      actionLabel: 'View',
      description: 'Review cycle complete',
      icon: CheckCircle,
      isActive: false
    }
  };
  
  return statusMap[currentStatus] || { 
    label: 'Unknown Status', 
    color: 'text-gray-400',
    bgColor: 'bg-gray-600',
    actionLabel: 'View',
    description: 'Status unclear',
    icon: Calendar,
    isActive: false
  };
};

export const isActiveReview = (assessment) => {
  const statusInfo = getStatusDisplay(assessment);
  return statusInfo.isActive;
};

export const filterActiveReviews = (assessments) => {
  return assessments.filter(assessment => isActiveReview(assessment));
};

export const filterCompletedReviews = (assessments) => {
  return assessments.filter(assessment => !isActiveReview(assessment));
};

export const getAssessmentProgress = (assessment) => {
  const status = assessment.self_assessment_status || assessment.status;
  
  switch (status) {
    case 'not_started':
      return { percentage: 0, step: 'Not Started' };
    case 'in_progress':
      return { percentage: 25, step: 'In Progress' };
    case 'employee_complete':
      return { percentage: 50, step: 'Submitted' };
    case 'manager_complete':
      return { percentage: 75, step: 'Manager Review Complete' };
    case 'finalized':
      return { percentage: 100, step: 'Finalized' };
    default:
      return { percentage: 0, step: 'Unknown' };
  }
};


--- FILE: src\utils\csrfProtection.js ---

// csrfProtection.js - CSRF protection utilities for secure form submissions

import { supabase } from '../services/supabaseClient';

/**
 * CSRF Protection utility class
 */
class CSRFProtection {
  constructor() {
    this.tokenKey = '_csrf_token';
    this.headerName = 'X-CSRF-Token';
  }

  /**
   * Generate a secure random token
   */
  generateToken() {
    const array = new Uint8Array(32);
    crypto.getRandomValues(array);
    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');
  }

  /**
   * Store CSRF token in session storage
   */
  storeToken(token) {
    try {
      sessionStorage.setItem(this.tokenKey, token);
      return true;
    } catch (error) {
      console.error('Failed to store CSRF token:', error);
      return false;
    }
  }

  /**
   * Get stored CSRF token
   */
  getStoredToken() {
    try {
      return sessionStorage.getItem(this.tokenKey);
    } catch (error) {
      console.error('Failed to retrieve CSRF token:', error);
      return null;
    }
  }

  /**
   * Initialize CSRF protection (call on app start)
   */
  initialize() {
    let token = this.getStoredToken();
    if (!token) {
      token = this.generateToken();
      this.storeToken(token);
    }
    return token;
  }

  /**
   * Create protected form data with CSRF token
   */
  createProtectedFormData(formData) {
    const token = this.getStoredToken();
    if (!token) {
      throw new Error('CSRF token not available');
    }

    return {
      ...formData,
      _csrf_token: token,
      _timestamp: Date.now(),
      _nonce: this.generateToken().substring(0, 16)
    };
  }

  /**
   * Validate form submission timing (prevent replay attacks)
   */
  validateTimestamp(timestamp, maxAgeMs = 300000) { // 5 minutes default
    if (!timestamp) return false;
    const now = Date.now();
    const age = now - timestamp;
    return age >= 0 && age <= maxAgeMs;
  }

  /**
   * Create secure headers for API requests
   */
  createSecureHeaders() {
    const token = this.getStoredToken();
    if (!token) {
      throw new Error('CSRF token not available');
    }

    return {
      [this.headerName]: token,
      'Content-Type': 'application/json',
      'X-Requested-With': 'XMLHttpRequest'
    };
  }

  /**
   * Secure RPC call wrapper with CSRF protection
   */
  async secureRPC(functionName, params = {}) {
    const token = this.getStoredToken();
    if (!token) {
      throw new Error('CSRF token not available');
    }

    // Add security metadata to params
    const secureParams = {
      ...params,
      _csrf_token: token,
      _timestamp: Date.now(),
      _nonce: this.generateToken().substring(0, 16)
    };

    try {
      const { data, error } = await supabase.rpc(functionName, secureParams);
      
      if (error) {
        throw error;
      }

      return data;
    } catch (error) {
      console.error(`Secure RPC call failed (${functionName}):`, error);
      throw error;
    }
  }

  /**
   * Validate form data before submission
   */
  validateFormData(formData) {
    const errors = [];

    // Check for CSRF token
    if (!formData._csrf_token) {
      errors.push('Security token missing');
    } else if (formData._csrf_token !== this.getStoredToken()) {
      errors.push('Invalid security token');
    }

    // Check timestamp
    if (!formData._timestamp) {
      errors.push('Timestamp missing');
    } else if (!this.validateTimestamp(formData._timestamp)) {
      errors.push('Request expired');
    }

    // Check for required nonce
    if (!formData._nonce) {
      errors.push('Security nonce missing');
    }

    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Clear stored tokens (call on logout)
   */
  clearTokens() {
    try {
      sessionStorage.removeItem(this.tokenKey);
    } catch (error) {
      console.error('Failed to clear CSRF token:', error);
    }
  }

  /**
   * Refresh token (call periodically or after sensitive operations)
   */
  refreshToken() {
    const newToken = this.generateToken();
    this.storeToken(newToken);
    return newToken;
  }
}

// Create singleton instance
const csrfProtection = new CSRFProtection();

// Initialize on module load
csrfProtection.initialize();

export default csrfProtection;

/**
 * Hook for React components to use CSRF protection
 */
export const useCSRFProtection = () => {
  const createProtectedData = (formData) => {
    return csrfProtection.createProtectedFormData(formData);
  };

  const secureSubmit = async (functionName, formData) => {
    const protectedData = createProtectedData(formData);
    return await csrfProtection.secureRPC(functionName, protectedData);
  };

  const getSecureHeaders = () => {
    return csrfProtection.createSecureHeaders();
  };

  return {
    createProtectedData,
    secureSubmit,
    getSecureHeaders,
    refreshToken: () => csrfProtection.refreshToken(),
    clearTokens: () => csrfProtection.clearTokens()
  };
};

/**
 * Higher-order component for CSRF protection
 */
export const withCSRFProtection = (WrappedComponent) => {
  return function CSRFProtectedComponent(props) {
    const csrfProps = useCSRFProtection();
    return <WrappedComponent {...props} csrf={csrfProps} />;
  };
};


--- FILE: src\utils\dateUtils.js ---

// Date-related utility functions

export const formatDate = (dateString, options = {}) => {
  if (!dateString) return 'N/A';
  
  const defaultOptions = {
    year: 'numeric',
    month: 'short',
    day: 'numeric'
  };
  
  const formatOptions = { ...defaultOptions, ...options };
  
  try {
    return new Date(dateString).toLocaleDateString(undefined, formatOptions);
  } catch (error) {
    console.error('Error formatting date:', error);
    return 'Invalid Date';
  }
};

export const formatDateTime = (dateString) => {
  if (!dateString) return 'N/A';
  
  try {
    return new Date(dateString).toLocaleString();
  } catch (error) {
    console.error('Error formatting date time:', error);
    return 'Invalid Date';
  }
};

export const getRelativeTime = (dateString) => {
  if (!dateString) return 'N/A';
  
  try {
    const date = new Date(dateString);
    const now = new Date();
    const diffMs = now - date;
    const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
    const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
    const diffMinutes = Math.floor(diffMs / (1000 * 60));
    
    if (diffDays > 0) {
      return `${diffDays} day${diffDays > 1 ? 's' : ''} ago`;
    } else if (diffHours > 0) {
      return `${diffHours} hour${diffHours > 1 ? 's' : ''} ago`;
    } else if (diffMinutes > 0) {
      return `${diffMinutes} minute${diffMinutes > 1 ? 's' : ''} ago`;
    } else {
      return 'Just now';
    }
  } catch (error) {
    console.error('Error calculating relative time:', error);
    return 'Unknown time';
  }
};

export const isDateInPast = (dateString) => {
  if (!dateString) return false;
  try {
    return new Date(dateString) < new Date();
  } catch (error) {
    return false;
  }
};

export const isDateInFuture = (dateString) => {
  if (!dateString) return false;
  try {
    return new Date(dateString) > new Date();
  } catch (error) {
    return false;
  }
};


--- FILE: src\utils\index.js ---

export * from './assessmentUtils';
export * from './dateUtils';
export * from './validationUtils';
export * from './uiUtils';

// Security utilities
export { default as validation } from './validation';
export { default as logger } from './secureLogger';
export { default as csrfProtection, useCSRFProtection, withCSRFProtection } from './csrfProtection';


--- FILE: src\utils\performanceUtils.ts ---

// performanceUtils.ts - Performance optimization utilities
import React, { useCallback, useMemo, useRef, useEffect, useState } from 'react';

/**
 * Debounce hook for performance-sensitive operations
 * @param callback Function to debounce
 * @param delay Delay in milliseconds
 * @returns Debounced callback
 */
export const useDebounce = <T extends (...args: any[]) => any>(
  callback: T,
  delay: number
): T => {
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  const debouncedCallback = useCallback((...args: Parameters<T>) => {
    if (timeoutRef.current) {
      clearTimeout(timeoutRef.current);
    }
    
    timeoutRef.current = setTimeout(() => {
      callback(...args);
    }, delay);
  }, [callback, delay]) as T;

  // Cleanup on unmount
  useEffect(() => {
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
    };
  }, []);

  return debouncedCallback;
};

/**
 * Throttle hook for performance-sensitive operations
 * @param callback Function to throttle
 * @param delay Delay in milliseconds
 * @returns Throttled callback
 */
export const useThrottle = <T extends (...args: any[]) => any>(
  callback: T,
  delay: number
): T => {
  const lastCallRef = useRef<number>(0);

  const throttledCallback = useCallback((...args: Parameters<T>) => {
    const now = Date.now();
    if (now - lastCallRef.current >= delay) {
      lastCallRef.current = now;
      callback(...args);
    }
  }, [callback, delay]) as T;

  return throttledCallback;
};

/**
 * Memoized selector for complex state computations
 * @param selector Function to compute derived state
 * @param dependencies Dependencies array
 * @returns Memoized result
 */
export const useMemoizedSelector = <T>(
  selector: () => T,
  dependencies: React.DependencyList
): T => {
  return useMemo(selector, dependencies);
};

/**
 * Performance monitoring hook
 * @param componentName Name of component to monitor
 * @param enabled Whether monitoring is enabled
 */
export const usePerformanceMonitoring = (
  componentName: string,
  enabled: boolean = process.env.NODE_ENV === 'development'
) => {
  const renderStartTime = useRef<number>(0);
  const renderCount = useRef<number>(0);

  useEffect(() => {
    if (!enabled) return;

    renderCount.current += 1;
    renderStartTime.current = performance.now();

    // Log render time after DOM update
    const timeoutId = setTimeout(() => {
      if (renderStartTime.current) {
        const renderTime = performance.now() - renderStartTime.current;
        console.log(`[Performance] ${componentName} render #${renderCount.current}: ${renderTime.toFixed(2)}ms`);
      }
    }, 0);

    return () => clearTimeout(timeoutId);
  });

  // Return performance metrics
  return useMemo(() => ({
    renderCount: renderCount.current,
    componentName
  }), [componentName]);
};

/**
 * Intersection Observer hook for lazy loading
 * @param options Intersection Observer options
 * @returns Ref and isIntersecting state
 */
export const useIntersectionObserver = (
  options: IntersectionObserverInit = {}
) => {
  const elementRef = useRef<HTMLElement>(null);
  const observerRef = useRef<IntersectionObserver | null>(null);
  const [isIntersecting, setIsIntersecting] = useState(false);
  const [hasIntersected, setHasIntersected] = useState(false);

  useEffect(() => {
    const element = elementRef.current;
    if (!element) return;

    observerRef.current = new IntersectionObserver(([entry]) => {
      setIsIntersecting(entry.isIntersecting);
      if (entry.isIntersecting && !hasIntersected) {
        setHasIntersected(true);
      }
    }, options);

    observerRef.current.observe(element);

    return () => {
      if (observerRef.current) {
        observerRef.current.disconnect();
      }
    };
  }, [options, hasIntersected]);

  return { elementRef, isIntersecting, hasIntersected };
};

/**
 * Virtual scrolling hook for large lists
 * @param items Array of items to virtualize
 * @param itemHeight Height of each item
 * @param containerHeight Height of visible container
 * @returns Visible items and scroll handlers
 */
export const useVirtualScrolling = <T>(
  items: T[],
  itemHeight: number,
  containerHeight: number
) => {
  const [scrollTop, setScrollTop] = useState(0);
  
  const visibleRange = useMemo(() => {
    const startIndex = Math.floor(scrollTop / itemHeight);
    const endIndex = Math.min(
      startIndex + Math.ceil(containerHeight / itemHeight) + 1,
      items.length
    );
    
    return { startIndex, endIndex };
  }, [scrollTop, itemHeight, containerHeight, items.length]);

  const visibleItems = useMemo(() => {
    return items.slice(visibleRange.startIndex, visibleRange.endIndex).map((item, index) => ({
      item,
      index: visibleRange.startIndex + index
    }));
  }, [items, visibleRange]);

  const totalHeight = items.length * itemHeight;
  const offsetY = visibleRange.startIndex * itemHeight;

  const handleScroll = useCallback((event: React.UIEvent<HTMLDivElement>) => {
    setScrollTop(event.currentTarget.scrollTop);
  }, []);

  return {
    visibleItems,
    totalHeight,
    offsetY,
    handleScroll
  };
};

/**
 * Lazy component loader with error boundary
 * @param importFn Dynamic import function
 * @param fallback Loading component
 * @returns Lazy component with error handling
 */
export const createLazyComponent = (
  importFn: () => Promise<{ default: React.ComponentType<any> }>,
  fallback: React.ComponentType = () => React.createElement('div', null, 'Loading...')
) => {
  const LazyComponent = React.lazy(importFn);
  
  return React.forwardRef((props: any, ref: any) => (
    React.createElement(React.Suspense, { fallback: React.createElement(fallback) },
      React.createElement(LazyComponent, { ...props, ref })
    )
  ));
};

/**
 * Bundle analyzer helper (development only)
 */
export const analyzeBundleSize = () => {
  if (process.env.NODE_ENV !== 'development') return;
  
  // Log bundle information
  console.group('ðŸ“¦ Bundle Analysis');
  console.log('React version:', React.version);
  console.log('Environment:', process.env.NODE_ENV);
  
  // Estimate component sizes (rough approximation)
  const componentCount = document.querySelectorAll('[data-component]').length;
  console.log('Rendered components:', componentCount);
  
  // Memory usage (if available)
  if ('memory' in performance) {
    const memory = (performance as any).memory;
    console.log('Memory usage:', {
      used: `${(memory.usedJSHeapSize / 1024 / 1024).toFixed(2)} MB`,
      total: `${(memory.totalJSHeapSize / 1024 / 1024).toFixed(2)} MB`,
      limit: `${(memory.jsHeapSizeLimit / 1024 / 1024).toFixed(2)} MB`
    });
  }
  
  console.groupEnd();
};

// useState is already imported at the top


--- FILE: src\utils\secureLogger.js ---

// secureLogger.js - Secure logging utility that prevents sensitive data exposure

/**
 * Secure logger that masks sensitive information
 */
class SecureLogger {
  constructor() {
    this.isDevelopment = process.env.NODE_ENV === 'development';
    this.sensitiveFields = [
      'password', 'email', 'token', 'key', 'secret', 
      'auth', 'session', 'user_id', 'api_key'
    ];
  }

  /**
   * Mask sensitive data in objects
   */
  maskSensitiveData(data) {
    if (typeof data !== 'object' || data === null) {
      return data;
    }

    if (Array.isArray(data)) {
      return data.map(item => this.maskSensitiveData(item));
    }

    const masked = {};
    for (const [key, value] of Object.entries(data)) {
      const lowerKey = key.toLowerCase();
      const isSensitive = this.sensitiveFields.some(field => 
        lowerKey.includes(field)
      );

      if (isSensitive && typeof value === 'string') {
        // Mask email addresses
        if (value.includes('@')) {
          masked[key] = value.replace(/(.{2}).*@(.*)/, '$1***@$2');
        } else {
          // Mask other sensitive strings
          masked[key] = '***';
        }
      } else if (typeof value === 'object') {
        masked[key] = this.maskSensitiveData(value);
      } else {
        masked[key] = value;
      }
    }

    return masked;
  }

  /**
   * Mask email addresses specifically
   */
  maskEmail(email) {
    if (typeof email !== 'string' || !email.includes('@')) {
      return email;
    }
    return email.replace(/(.{2}).*@(.*)/, '$1***@$2');
  }

  /**
   * Log with automatic sensitive data masking
   */
  log(level, message, data = null) {
    if (!this.isDevelopment && level === 'debug') {
      return; // Skip debug logs in production
    }

    const timestamp = new Date().toISOString();
    const logEntry = {
      timestamp,
      level,
      message
    };

    if (data) {
      logEntry.data = this.maskSensitiveData(data);
    }

    // Use appropriate console method
    switch (level) {
      case 'error':
        console.error(`[${timestamp}] ERROR:`, message, data ? logEntry.data : '');
        break;
      case 'warn':
        console.warn(`[${timestamp}] WARN:`, message, data ? logEntry.data : '');
        break;
      case 'info':
        console.info(`[${timestamp}] INFO:`, message, data ? logEntry.data : '');
        break;
      case 'debug':
        if (this.isDevelopment) {
          console.log(`[${timestamp}] DEBUG:`, message, data ? logEntry.data : '');
        }
        break;
      default:
        console.log(`[${timestamp}] LOG:`, message, data ? logEntry.data : '');
    }
  }

  /**
   * Convenience methods
   */
  debug(message, data) {
    this.log('debug', message, data);
  }

  info(message, data) {
    this.log('info', message, data);
  }

  warn(message, data) {
    this.log('warn', message, data);
  }

  error(message, data) {
    this.log('error', message, data);
  }

  /**
   * Log authentication events securely
   */
  logAuth(action, userId = null, success = true) {
    this.info(`Auth: ${action}`, {
      user_id: userId ? `***${userId.slice(-4)}` : null,
      success,
      action
    });
  }

  /**
   * Log user actions securely
   */
  logUserAction(action, userId, details = {}) {
    this.info(`User Action: ${action}`, {
      user_id: userId ? `***${userId.slice(-4)}` : null,
      action,
      details: this.maskSensitiveData(details)
    });
  }

  /**
   * Log security events
   */
  logSecurity(event, severity = 'info', details = {}) {
    this.log(severity, `Security: ${event}`, {
      security_event: event,
      details: this.maskSensitiveData(details)
    });
  }

  /**
   * Log errors without sensitive data
   */
  logError(error, context = {}) {
    this.error('Application Error', {
      message: error.message,
      stack: this.isDevelopment ? error.stack : null,
      context: this.maskSensitiveData(context)
    });
  }
}

// Create singleton instance
const logger = new SecureLogger();

export default logger;

// Export convenience methods
export const { debug, info, warn, error, logAuth, logUserAction, logSecurity, logError } = logger;


--- FILE: src\utils\uiUtils.js ---

// UI-related utility functions

export const getStatusBadgeColor = (status) => {
  const colors = {
    'upcoming': 'bg-yellow-600 text-white',
    'active': 'bg-green-600 text-white', 
    'completed': 'bg-blue-600 text-white',
    'finalized': 'bg-purple-600 text-white',
    'not_started': 'bg-gray-600 text-white',
    'in_progress': 'bg-orange-600 text-white',
    'employee_complete': 'bg-blue-600 text-white',
    'manager_complete': 'bg-purple-600 text-white'
  };
  return colors[status] || 'bg-gray-600 text-white';
};

export const getProgressBarColor = (percentage) => {
  if (percentage >= 100) return 'bg-green-500';
  if (percentage >= 75) return 'bg-blue-500';
  if (percentage >= 50) return 'bg-yellow-500';
  if (percentage >= 25) return 'bg-orange-500';
  return 'bg-gray-500';
};

export const truncateText = (text, maxLength = 100) => {
  if (!text) return '';
  if (text.length <= maxLength) return text;
  return text.substring(0, maxLength) + '...';
};

export const capitalizeFirst = (str) => {
  if (!str) return '';
  return str.charAt(0).toUpperCase() + str.slice(1);
};

export const formatUserRole = (role) => {
  if (!role) return '';
  return role.charAt(0).toUpperCase() + role.slice(1);
};

export const getInitials = (name) => {
  if (!name) return '';
  return name
    .split(' ')
    .map(word => word.charAt(0))
    .join('')
    .toUpperCase()
    .substring(0, 2);
};

export const generateAvatarColor = (name) => {
  if (!name) return 'bg-gray-500';
  
  const colors = [
    'bg-red-500', 'bg-blue-500', 'bg-green-500', 'bg-yellow-500',
    'bg-purple-500', 'bg-pink-500', 'bg-indigo-500', 'bg-teal-500'
  ];
  
  const hash = name.split('').reduce((acc, char) => {
    return char.charCodeAt(0) + ((acc << 5) - acc);
  }, 0);
  
  return colors[Math.abs(hash) % colors.length];
};


--- FILE: src\utils\validation.js ---

// validation.js - Comprehensive input validation and sanitization utilities

/**
 * Validation schema for different input types
 */
export const ValidationRules = {
  email: {
    pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/,
    message: 'Please enter a valid email address'
  },
  name: {
    pattern: /^[a-zA-Z0-9\s'-]{2,50}$/,
    message: 'Name must be 2-50 characters and contain only letters, numbers, spaces, hyphens, and apostrophes'
  },
  jobTitle: {
    pattern: /^[a-zA-Z0-9\s\-&().,]{2,100}$/,
    message: 'Job title must be 2-100 characters and contain only letters, numbers, and basic punctuation'
  },
  role: {
    allowed: ['employee', 'manager', 'admin'],
    message: 'Role must be employee, manager, or admin'
  },
  password: {
    minLength: 6,
    pattern: /^(?=.*[a-zA-Z])(?=.*\d).{6,}$/,
    message: 'Password must be at least 6 characters and contain at least one letter and one number'
  },
  cycleName: {
    pattern: /^[a-zA-Z0-9\s\-_.()]{3,100}$/,
    message: 'Cycle name must be 3-100 characters and contain only letters, numbers, spaces, and basic punctuation'
  }
};

/**
 * Sanitize string input by removing potentially dangerous characters
 */
export const sanitizeString = (input) => {
  if (typeof input !== 'string') return '';
  
  return input
    .trim()
    .replace(/[<>\"'&]/g, '') // Remove HTML/script injection chars
    .replace(/\s+/g, ' ') // Normalize whitespace
    .substring(0, 1000); // Limit length
};

/**
 * Sanitize email input
 */
export const sanitizeEmail = (email) => {
  if (typeof email !== 'string') return '';
  
  return email
    .trim()
    .toLowerCase()
    .replace(/[^\w@.-]/g, '') // Only allow valid email characters
    .substring(0, 254); // RFC 5321 limit
};

/**
 * Validate email format
 */
export const validateEmail = (email) => {
  const sanitized = sanitizeEmail(email);
  
  if (!sanitized) {
    return { isValid: false, error: 'Email is required' };
  }
  
  if (!ValidationRules.email.pattern.test(sanitized)) {
    return { isValid: false, error: ValidationRules.email.message };
  }
  
  return { isValid: true, value: sanitized };
};

/**
 * Validate name input
 */
export const validateName = (name) => {
  const sanitized = sanitizeString(name);
  
  if (!sanitized) {
    return { isValid: false, error: 'Name is required' };
  }
  
  if (!ValidationRules.name.pattern.test(sanitized)) {
    return { isValid: false, error: ValidationRules.name.message };
  }
  
  return { isValid: true, value: sanitized };
};

/**
 * Validate job title
 */
export const validateJobTitle = (jobTitle) => {
  const sanitized = sanitizeString(jobTitle);
  
  if (!sanitized) {
    return { isValid: false, error: 'Job title is required' };
  }
  
  if (!ValidationRules.jobTitle.pattern.test(sanitized)) {
    return { isValid: false, error: ValidationRules.jobTitle.message };
  }
  
  return { isValid: true, value: sanitized };
};

/**
 * Validate role
 */
export const validateRole = (role) => {
  if (!role) {
    return { isValid: false, error: 'Role is required' };
  }
  
  if (!ValidationRules.role.allowed.includes(role)) {
    return { isValid: false, error: ValidationRules.role.message };
  }
  
  return { isValid: true, value: role };
};

/**
 * Validate password
 */
export const validatePassword = (password) => {
  if (!password) {
    return { isValid: false, error: 'Password is required' };
  }
  
  if (password.length < ValidationRules.password.minLength) {
    return { isValid: false, error: `Password must be at least ${ValidationRules.password.minLength} characters` };
  }
  
  if (!ValidationRules.password.pattern.test(password)) {
    return { isValid: false, error: ValidationRules.password.message };
  }
  
  return { isValid: true, value: password };
};

/**
 * Validate review cycle name
 */
export const validateCycleName = (name) => {
  const sanitized = sanitizeString(name);
  
  if (!sanitized) {
    return { isValid: false, error: 'Cycle name is required' };
  }
  
  if (!ValidationRules.cycleName.pattern.test(sanitized)) {
    return { isValid: false, error: ValidationRules.cycleName.message };
  }
  
  return { isValid: true, value: sanitized };
};

/**
 * Validate date input
 */
export const validateDate = (date, fieldName = 'Date') => {
  if (!date) {
    return { isValid: false, error: `${fieldName} is required` };
  }
  
  const dateObj = new Date(date);
  if (isNaN(dateObj.getTime())) {
    return { isValid: false, error: `${fieldName} is not a valid date` };
  }
  
  return { isValid: true, value: date };
};

/**
 * Validate date range
 */
export const validateDateRange = (startDate, endDate) => {
  const startValidation = validateDate(startDate, 'Start date');
  if (!startValidation.isValid) return startValidation;
  
  const endValidation = validateDate(endDate, 'End date');
  if (!endValidation.isValid) return endValidation;
  
  if (new Date(startDate) >= new Date(endDate)) {
    return { isValid: false, error: 'End date must be after start date' };
  }
  
  return { isValid: true, startDate, endDate };
};

/**
 * Validate UUID
 */
export const validateUUID = (uuid, fieldName = 'ID') => {
  if (!uuid) {
    return { isValid: false, error: `${fieldName} is required` };
  }
  
  const uuidPattern = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;
  if (!uuidPattern.test(uuid)) {
    return { isValid: false, error: `${fieldName} is not a valid ID` };
  }
  
  return { isValid: true, value: uuid };
};

/**
 * Comprehensive form validation
 */
export const validateForm = (data, rules) => {
  const errors = {};
  const sanitizedData = {};
  
  for (const [field, value] of Object.entries(data)) {
    if (rules[field]) {
      const validation = rules[field](value);
      if (!validation.isValid) {
        errors[field] = validation.error;
      } else {
        sanitizedData[field] = validation.value;
      }
    } else {
      // Default sanitization for unknown fields
      sanitizedData[field] = sanitizeString(value);
    }
  }
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors,
    data: sanitizedData
  };
};

/**
 * Employee creation form validation
 */
export const validateEmployeeForm = (formData) => {
  return validateForm(formData, {
    name: validateName,
    email: validateEmail,
    jobTitle: validateJobTitle,
    role: validateRole,
    managerId: (id) => id ? validateUUID(id, 'Manager ID') : { isValid: true, value: null }
  });
};

/**
 * Review cycle form validation
 */
export const validateReviewCycleForm = (formData) => {
  const basicValidation = validateForm(formData, {
    name: validateCycleName,
    startDate: (date) => validateDate(date, 'Start date'),
    endDate: (date) => validateDate(date, 'End date')
  });
  
  if (!basicValidation.isValid) {
    return basicValidation;
  }
  
  // Additional date range validation
  const dateRangeValidation = validateDateRange(
    basicValidation.data.startDate,
    basicValidation.data.endDate
  );
  
  if (!dateRangeValidation.isValid) {
    return {
      isValid: false,
      errors: { dateRange: dateRangeValidation.error },
      data: basicValidation.data
    };
  }
  
  return basicValidation;
};

/**
 * Authentication form validation
 */
export const validateAuthForm = (formData) => {
  return validateForm(formData, {
    email: validateEmail,
    password: validatePassword
  });
};

export default {
  sanitizeString,
  sanitizeEmail,
  validateEmail,
  validateName,
  validateJobTitle,
  validateRole,
  validatePassword,
  validateCycleName,
  validateDate,
  validateDateRange,
  validateUUID,
  validateForm,
  validateEmployeeForm,
  validateReviewCycleForm,
  validateAuthForm,
  ValidationRules
};


--- FILE: src\utils\validationUtils.js ---

// Validation utility functions

export const validateEmail = (email) => {
  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  return emailRegex.test(email);
};

export const validateRequired = (value, fieldName = 'Field') => {
  if (!value || (typeof value === 'string' && value.trim() === '')) {
    return `${fieldName} is required`;
  }
  return null;
};

export const validateMinLength = (value, minLength, fieldName = 'Field') => {
  if (value && value.length < minLength) {
    return `${fieldName} must be at least ${minLength} characters long`;
  }
  return null;
};

export const validateMaxLength = (value, maxLength, fieldName = 'Field') => {
  if (value && value.length > maxLength) {
    return `${fieldName} must not exceed ${maxLength} characters`;
  }
  return null;
};

export const validateDateRange = (startDate, endDate) => {
  if (!startDate || !endDate) {
    return 'Both start and end dates are required';
  }
  
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  if (start >= end) {
    return 'End date must be after start date';
  }
  
  return null;
};

export const validateForm = (data, rules) => {
  const errors = {};
  
  Object.keys(rules).forEach(field => {
    const fieldRules = rules[field];
    const value = data[field];
    
    for (const rule of fieldRules) {
      const error = rule(value, field);
      if (error) {
        errors[field] = error;
        break; // Stop at first error for this field
      }
    }
  });
  
  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};


--- FILE: supabase\.branches\_current_branch ---

main


--- FILE: supabase\.temp\cli-latest ---

v2.31.8
